var AssetAdapter = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.getAsset = function (t, e, i) {
        function n(n) {
            e.call(i, n, t)
        }

        if (RES.hasRes(t)) {
            var a = RES.getRes(t);
            a ? n(a) : RES.getResAsync(t, n, this)
        } else RES.getResByUrl(t, function (t) {
            n(t)
        }, this)
    }, t
}();
egret.registerClass(AssetAdapter, "AssetAdapter", ["eui.IAssetAdapter"]);
var mui;
!function (t) {
    var e = function (t) {
        function e(e, i, n, a, s) {
            void 0 === i && (i = ""), void 0 === n && (n = 20), void 0 === a && (a = 16777215), void 0 === s && (s = null), t.call(this), this.startX = -1, this.startY = -1, this._sounds = "btn_click", this.btnImg = new eui.Image, this.btnImg.source = e, this.addChild(this.btnImg), this.textImg = new eui.Image, this.addChild(this.textImg), this.textImg.verticalCenter = 0, this.textImg.horizontalCenter = 0, this.textImg.touchEnabled = !1, "" != i && (this.textField = new eui.Label, this.textField.size = n, this.textField.textColor = a, this.textField.textAlign = "center", this.textField.bold = !0, this.textField.fontFamily = "Microsoft YaHei", s && (this.textField.stroke = s.q, this.textField.strokeColor = s.c), this.textField.text = i, this.textField.horizontalCenter = 0, this.textField.verticalCenter = 0, this.addChild(this.textField)), this.touchEnabled = !0, this.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouch, this), this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouch, this), this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouch, this), this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouch, this)
        }

        __extends(e, t);
        var i = (__define, e), n = i.prototype;
        return n.onTouch = function (t) {
            var e = this;
            switch (t.type) {
                case"touchBegin":
                    GameSound.PlaySound("" + this._sounds), this.addStage(), e.startX = e.x, e.startY = e.y;
                    var i = e.x + .025 * e.width, n = e.y + .025 * e.height;
                    egret.Tween.get(e).to({scaleX: .95, scaleY: .95, x: i, y: n}, 50, egret.Ease.sineIn);
                    break;
                case"touchEnd":
                    this.removeStage(), this.onMove();
                    break;
                case"touchMove":
                    break;
                case"touchTap":
            }
        }, n.onMove = function (t) {
            void 0 === t && (t = null), (-1 != this.startX || -1 != this.startY) && (t && t.target == this || egret.Tween.get(this).to({
                scaleX: 1,
                scaleY: 1,
                x: this.startX,
                y: this.startY
            }, 50))
        }, n.addStage = function () {
            GameConfig.curStage().addEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().addEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
        }, n.removeStage = function () {
            GameConfig.curStage().removeEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().removeEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
        }, n.getSource = function () {
            return this.btnImg ? this.btnImg.source : void 0
        }, n.setSource = function (t) {
            void 0 === t && (t = ""), this.btnImg && (this.btnImg.source = t)
        }, e
    }(eui.Component);
    t.EButton = e, egret.registerClass(e, "mui.EButton")
}(mui || (mui = {}));
var mui;
!function (t) {
    var e = function (e) {
        function i(t, i, n, a) {
            void 0 === t && (t = null), void 0 === i && (i = 2), void 0 === n && (n = "check_on_btn"), void 0 === a && (a = "check_off_btn"), e.call(this), this._radioList = [], this.radioIndex = 0, this._radioNum = 2, this._rn = "check_on_btn", this._rf = "check_off_btn", this.touchEnabled = !0, this._gdata = t, this._radioNum = i, this._rf = a, this._rn = n
        }

        __extends(i, e);
        var n = (__define, i), a = n.prototype;
        return a.createChildren = function () {
            e.prototype.createChildren.call(this), this._group = new eui.Group, this._gdata && this.setGroups(this._gdata), this.addChild(this._group);
            for (var i = 0; i < this._radioNum; i++) {
                var n = new t.ERadio(this._rn, this._rf, !1);
                n.name = "" + (i + 1), this._radioList.push(n), this._group.addChild(n), n.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this), 0 == i && (n.setSelectIndex(1), this.radioIndex = i + 1)
            }
        }, a.setGroups = function (t) {
            if (t) {
                var e = new t.layout;
                e.horizontalAlign = t.horizontalAlign, e.verticalAlign = t.verticalAlign, e.gap = t.gap, this._group.width = +t.width, this._group.height = +t.height, this._group.layout = e
            }
        }, a.clearRadio = function () {
            for (var t = 0; t < this._radioList.length; t++) {
                var e = this._radioList[t];
                e.setSelectIndex(0)
            }
        }, a.onClick = function (t) {
            this.clearRadio();
            var e = t.currentTarget;
            e && (e.setSelectIndex(1), this.radioIndex = +e.name)
        }, i
    }(eui.Component);
    t.ECheckBox = e, egret.registerClass(e, "mui.ECheckBox")
}(mui || (mui = {}));
var mui;
!function (t) {
    var e = function (t) {
        function e(e, i, n, a, s) {
            void 0 === e && (e = 10), void 0 === i && (i = 0), void 0 === n && (n = "setting_progressbar_bg"), void 0 === a && (a = "radio_btn"), void 0 === s && (s = "setting_progressbar1"), t.call(this), this._strack = "", this._sthumb = "", this._shap = "", this.maxNum = 10, this.minNum = 0, this.skinName = "EHSliderSkin", this._strack = n, this._sthumb = a, this._shap = s, this.maxNum = e, this.minNum = i
        }

        __extends(e, t);
        var i = (__define, e), n = i.prototype;
        return n.createChildren = function () {
            t.prototype.createChildren.call(this), this.setTrack(), this.setThumb(), this.setShap(), this.setMax(), this.setMin()
        }, n.changeShap = function () {
            var t = this.value, e = this.maximum, i = this.width, n = 0;
            n = 0 == t ? 0 : t == e ? i - 5 : t / e * i, this.shap.width = n
        }, n.setTrack = function (t) {
            void 0 === t && (t = this._strack), this.track ? this.track.source = t : this._strack = t
        }, n.setThumb = function (t) {
            void 0 === t && (t = this._sthumb), this.thumb ? this.thumb.source = t : this._sthumb = t
        }, n.setShap = function (t) {
            void 0 === t && (t = this._shap), this.shap ? this.shap.source = t : this._shap = t
        }, n.setMax = function (t) {
            void 0 === t && (t = this.maxNum), this.maximum = this.maxNum = t
        }, n.setMin = function (t) {
            void 0 === t && (t = this.minNum), this.minimum = this.minNum = t
        }, e
    }(eui.HSlider);
    t.EHSlider = e, egret.registerClass(e, "mui.EHSlider")
}(mui || (mui = {}));
var mui;
!function (t) {
    var e = function (t) {
        function e(e) {
            t.call(this), this._src = null, this._comp = !1, null != e && this.load(e)
        }

        __extends(e, t);
        var i = __define, n = e, a = n.prototype;
        return i(a, "src", function () {
            return this._src
        }, function (t) {
            this.load(t)
        }), e.$ = function (t) {
            var e = t.$;
            return delete t.$, t.onload = null, t.onerror = null, e
        }, a.onLoadBack = function (t, e) {
            if (e == this._src) {
                if (t) {
                    var i = new egret.Texture;
                    i._setBitmapData(t), this.texture = i
                } else this.texture = null;
                this._comp = !0
            }
        }, a.load = function (t) {
            if (this._src != t || !this._comp) if (this._src = t, null != t && t.length > 0) {
                this._comp = !1;
                var i = new Image;
                i.$ = this, i.onload = function () {
                    e.$(this).onLoadBack(this, this.src)
                }, i.onerror = function () {
                    e.$(this).onLoadBack(this, this.src)
                }, i.src = t
            } else this.texture = null, this._comp = !0
        }, a.size = function (t, e) {
            this.width = t, this.height = e
        }, a.move = function (t, e) {
            this.x = t, this.y = e
        }, e.loadAsync = function (t, e, i) {
            void 0 === e && (e = null), void 0 === i && (i = null);
            var n = new Image, a = new egret.Bitmap;
            return n.$ = a, n.onload = function () {
                var t = this.$;
                delete this.$, this.onload = null, this.onerror = null;
                var n = new egret.Texture;
                n._setBitmapData(this), t.texture = n, null != e && e.apply(i, [t])
            }, n.onerror = function () {
                var t = this.$;
                delete this.$, this.onload = null, this.onerror = null, t.texture = null, null != e && e.apply(i, null)
            }, n.src = t, a
        }, e
    }(egret.Bitmap);
    t.EImage = e, egret.registerClass(e, "mui.EImage")
}(mui || (mui = {}));
var mui;
!function (t) {
    var e = function (t) {
        function e(e, i, n) {
            void 0 === e && (e = "check_on_btn"), void 0 === i && (i = "check_off_btn"), void 0 === n && (n = !0), t.call(this), this.onImg = "", this.offImg = "", this.selectIndex = 0, this.onImg = e, this.offImg = i, this.touchEnabled = !0, n && this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouch, this)
        }

        __extends(e, t);
        var i = (__define, e), n = i.prototype;
        return n.createChildren = function () {
            t.prototype.createChildren.call(this), this.onSelect()
        }, n.onTouch = function (t) {
            0 == this.selectIndex ? this.selectIndex = 1 : this.selectIndex = 0, this.onSelect()
        }, n.onSelect = function () {
            this.bgimg || (this.bgimg = new eui.Image, this.contains(this.bgimg) || this.addChild(this.bgimg)), 0 == this.selectIndex ? this.bgimg.source = this.offImg : this.bgimg.source = this.onImg;
            var t = StackManager.findDialog(CreateDialog, "CreateDialog");
            t && GameLayerManager.gameLayer().panelLayer.contains(t) && t.refreshText()
        }, n.setSelectIndex = function (t) {
            void 0 === t && (t = 0), this.selectIndex = t, this.onSelect()
        }, e
    }(eui.Component);
    t.ERadio = e, egret.registerClass(e, "mui.ERadio")
}(mui || (mui = {}));
var mui;
!function (t) {
    var e = function (t) {
        function e() {
            t.call(this)
        }

        __extends(e, t);
        var i = (__define, e), n = i.prototype;
        return n.setText = function (t) {
            void 0 === t && (t = "");
            var e = new egret.HtmlTextParser;
            this.textFlow = e.parser(t)
        }, e
    }(egret.TextField);
    t.ETextField = e, egret.registerClass(e, "mui.ETextField")
}(mui || (mui = {}));
var GameConfig;
!function (t) {
    function e(e) {
        for (var i in e) t[i] = e[i]
    }

    function i(t, e) {
    }

    function n() {
        var t = window.navigator.userAgent.toLowerCase(), e = "" + t.match(/MicroMessenger/i);
        return "null" == e ? !1 : "micromessenger" == e ? !0 : void 0
    }

    function a() {
        return document.body.clientHeight / document.body.clientWidth > 1.32
    }

    function s() {
        var t = window.navigator.userAgent.toLowerCase();
        "" + t.match(/MicroMessenger/i);
        return "" + t.match(/windows nt/i) == "windows nt" ? "windows" : "" + t.match(/iphone/i) == "iphone" ? "ios" : "" + t.match(/android/i) == "android" ? "android" : "" + t.match(/ipad/i) == "ipad" ? "ipad" : "" + t.match(/linux/i) == "linux" ? "linux" : "" + t.match(/mac/i) == "mac" ? "mac" : "" + t.match(/ucbrower/i) == "ucbrower" ? "ucbrower" : void console.log("未知系统类型")
    }

    function o() {
        var t = window.navigator.userAgent.toLowerCase();
        return "" + t.match(/micromessenger/i) == "micromessenger" ? "micromessenger" : "" + t.match(/qzone/i) == "qzone" ? "qzone" : "" + t.match(/weibo/i) == "weibo" ? "weibo" : "" + t.match(/qq/i) == "qq" ? "qq" : "" + t.match(/renren/i) == "renren" ? "renren" : "" + t.match(/txmicroblog/i) == "txmicroblog" ? "txmicroblog" : "" + t.match(/douban/i) == "douban" ? "douban" : "other"
    }

    function r() {
        return egret.MainContext.instance.stage
    }

    function h() {
        return egret.MainContext.instance.stage.stageWidth
    }

    function c() {
        return egret.MainContext.instance.stage.stageHeight
    }

    t.isOnLine = navigator.onLine, t.http_address = {
        ip: "192.168.1.113",
        port: 8337
    }, t.address_game = {ip: "192.168.1.113", port: 8337}, t.address_test = {
        ip: "192.168.1.113",
        port: 8337
    }, t.address_center = {
        ip: "192.168.1.113",
        port: 8337
    }, t.appid = "wxe863b6acd85b9ae7", t.AppSecret = "660151634b4af49a10d2a808cf0ab9c4", t.wei_href_address = "http://H5PY.hn78.com/webplat/index.html", t.FontFamily = "Microsoft YaHei", t.TextColors = {
        white: 16777215,
        milkWhite: 16511407,
        grayWhite: 13547170,
        yellow: 16776960,
        lightYellow: 16765813,
        orangeYellow: 16750848,
        red: 15799040,
        green: 58624,
        blue: 1742039,
        grayBlue: 3101047,
        purple: 15284466,
        pink: 16724016,
        black: 3026221,
        golden: 16766720
    }, t.LabelFontSize = {littleSize: 18, middleSize: 20, normalSize: 24, bigSize: 36}, t.rules = {
        1: "夹五",
        2: "清一色",
        3: "扣听",
        4: "鸡胡鸡飘",
        5: "攒杠",
        6: "手把一",
        7: "背靠背",
        8: "责任制"
    }, t.pushData = e, t.sendData = i, t.isWeiXin = n, t.isBigScreen = a, t.systemType = s, t.platformType = o, t.curStage = r, t.curWidth = h, t.curHeight = c
}(GameConfig || (GameConfig = {}));
var GlobalData = function () {
    function t() {
        this.roomid = 100023, this.sendLogin = !1, this.connCount = 0, this.resourceCode = "", this.gamewarmList = ["游戏问题请咨询红鸟客服 ，请文明娱乐，禁止赌博。", "需经过所有玩家同意房间才能解散。", "庄家赢不下庄，输了轮到下一位玩家坐庄，所有玩家都坐过庄之后才算完成了一圈。"], this.hornList = [], this.msgList = {
            1: "人已经满了！",
            2: "牌局已经开始了！",
            3: "房间不存在或已过期！",
            4: "参数不合法",
            5: "状态不合法",
            6: "已经在房间里了",
            7: "查无此人",
            8: "不能绑定你自己",
            9: "你已经有代理了",
            10: "不支持此房间类型",
            11: "未定义的code",
            12: "未定义的code",
            13: "您的房卡不够"
        }
    }

    var e = (__define, t);
    e.prototype;
    return t.getInstance = function () {
        return this.instance || (this.instance = new t), this.instance
    }, t
}();
egret.registerClass(GlobalData, "GlobalData");
var Weixin = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.getAccessCode = function (t, e) {
        var i = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=" + t + "&redirect_uri=" + encodeURIComponent(e) + "&response_type=code&scope=snsapi_userinfo&state=1#wechat_redirect";
        location.href = i
    }, t.config = function (e, i, n, a, s) {
        function o() {
            t.onMenuShareAppMessage(GSData.i.roomID + ""), t.onMenuShareTimeline(GSData.i.roomID + "")
        }

        void 0 === s && (s = []);
        var r = new BodyConfig;
        if (r.appId = e, r.debug = !1, r.timestamp = i, r.nonceStr = n, r.signature = a, r.jsApiList = s, wx) {
            wx.config(r);
            var h = this;
            wx.ready(function () {
                GSData.i.roomID ? o() : egret.setTimeout(o, h, 500)
            })
        }
    }, t.pay = function (t, e, i, n, a) {
        wx.checkJsApi({
            jsApiList: ["chooseWXPay"], success: function () {
                wx.chooseWXPay({timestamp: t, nonceStr: e, "package": i, paySign: n, signType: "MD5", success: a})
            }
        })
    }, t.closeWindow = function () {
        var t = new BodyConfig;
        wx.closeWindow(t)
    }, t.onClickShare = function (t) {
        function e() {
            Global.showShare()
        }

        function i() {
            Global.showShare()
        }

        var n = "", a = "大赢家-";
        if (t && t.length > 0) {
            t.sort(function (t, e) {
                return Number(t.cur) < Number(e.cur) ? 1 : -1
            });
            for (var s = 0; s < t.length; s++) {
                var o = t[s];
                0 == s ? a += o.nick + ":" + o.cur + "分" : n += o.nick + ":" + o.cur + "分\n"
            }
        }
        Global.showShare(!0), console.log(n);
        var r = new BodyMenuShareAppMessage;
        r.title = "" + a, r.desc = "" + n, r.link = "" + GameConfig.wei_href_address, r.imgUrl = "http://mj.h5sd.com/wdmj/weishare.png", r.type = "link", r.dataUrl = "", r.success = e, r.cancel = i, wx.onMenuShareAppMessage(r)
    }, t.onMenuShareAppMessage = function (t) {
        function e() {
            egret.log("分享朋友成功"), Global.showShare()
        }

        function i() {
            egret.log("取消分享到朋友"), Global.showShare()
        }

        void 0 === t && (t = null);
        var n = new BodyMenuShareAppMessage;
        if (t) {
            for (var a = t + "", s = "", o = 0; o < a.length; o++) s += a.charAt(o) + " ";
            if (GSData.i.roomPlayers && GSData.i.roomPlayers[1]) {
                var r, h = GSData.i.roomPlayers[1];
                r = h.nick, n.desc = "房　主：" + r + " 房间号：" + s + " " + GSData.i.rules, n.title = "跟我一起开房的点此链接！", n.link = GameConfig.wei_href_address + "?roomid=" + t
            } else n.title = "这麻将！三天不打，上房揭瓦！", n.desc = "私房麻将馆，好友组局，微信登录，玩牌交友两不误！", n.link = "" + GameConfig.wei_href_address
        } else n.title = "这麻将！三天不打，上房揭瓦！", n.desc = "私房麻将馆，好友组局，微信登录，玩牌交友两不误！", n.link = "" + GameConfig.wei_href_address;
        n.imgUrl = "http://mj.h5sd.com/wdmj/weishare.png", n.type = "link", n.dataUrl = "", n.success = e, n.cancel = i, wx.onMenuShareAppMessage(n)
    }, t.onMenuShareTimeline = function (t) {
        function e() {
            egret.log("分享朋友圈成功"), Global.showShare()
        }

        function i() {
            egret.log("取消分享到朋友圈"), Global.showShare()
        }

        void 0 === t && (t = null);
        var n = new BodyMenuShareTimeline;
        n.title = "这麻将！三天不打，上房揭瓦！", t ? n.link = GameConfig.wei_href_address + "?roomid=" + t : n.link = "" + GameConfig.wei_href_address, n.imgUrl = "http://mj.h5sd.com/wdmj/weishare.png", n.success = e, n.cancel = i, wx.onMenuShareTimeline(n)
    }, t.hideMenuItems = function () {
        wx.hideMenuItems({menuList: ["menuItem:share:qq", "menuItem:share:weiboApp", "menuItem:share:facebook", "menuItem:share:QZone", "menuItem:editTag", "menuItem:delete", "menuItem:copyUrl", "menuItem:originPage", "menuItem:readMode", "menuItem:openWithQQBrowser", "menuItem:openWithSafari", "menuItem:share:email", "menuItem:share:brand"]})
    }, t.startRecord = function () {
        var t = new BodyConfig;
        wx.startRecord(t)
    }, t.stopRecord = function () {
        wx.stopRecord({
            success: function (e) {
                var i = e.localId;
                t.uploadVoice(i)
            }
        })
    }, t.onVoiceRecordEnd = function () {
        wx.onVoiceRecordEnd({
            complete: function (e) {
                var i = e.localId;
                t.uploadVoice(i), Global.hideVoice()
            }
        })
    }, t.playVoice = function (t) {
        wx.playVoice({localId: t})
    }, t.pauseVoice = function (t) {
        wx.pauseVoice({localId: t})
    }, t.stopVoice = function (t) {
        wx.stopVoice({localId: t})
    }, t.onVoicePlayEnd = function () {
        wx.onVoicePlayEnd({
            success: function (t) {
                t.localId
            }
        })
    }, t.uploadVoice = function (t) {
        wx.uploadVoice({
            localId: t, isShowProgressTips: 0, success: function (t) {
                var e = t.serverId;
                SocketManager.getInstance().getGameConn().send(25, {args: {type: 2, voice: {id: e}}})
            }
        })
    }, t.downloadVoice = function (e) {
        wx.downloadVoice({
            serverId: e, isShowProgressTips: 0, success: function (e) {
                var i = e.localId;
                t.playVoice(i)
            }
        })
    }, t
}();
egret.registerClass(Weixin, "Weixin");
var BaseDialog = function (t) {
    function e(e, i, n) {
        void 0 === e && (e = "shop_txt"), void 0 === i && (i = 0), void 0 === n && (n = 0), t.call(this), this.init = !1, this.showing = !1, this.w = 0, this.h = 0, this.w = GameConfig.curWidth(), this.h = GameConfig.curHeight(), this.m_dialog = new DialogUI, this.m_dialog.verticalCenter = 0, this.m_dialog.horizontalCenter = 0, this.m_dialog.btn_close.addEventListener(egret.TouchEvent.TOUCH_TAP, this.hide, this), this.m_dialog._title.source = e, i > 0 && (this.m_dialog.width = i), n > 0 && (this.m_dialog.height = n), this.m_dialog.btn_close.x = this.m_dialog.width - 71, this.m_dialog.btn_close.y = -28, this.addChild(this.m_dialog)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.show = function (t, e, i, n, a) {
        void 0 === t && (t = !1), void 0 === e && (e = 0), void 0 === i && (i = 0), void 0 === n && (n = 1), void 0 === a && (a = !1), this.beforShow(), this.initUI(), this.initData(), PopUpManager.addPopUp(this, t, e, i, n, a)
    }, n.beforShow = function () {
    }, n.initUI = function () {
    }, n.initData = function () {
    }, n.hide = function (t) {
        void 0 === t && (t = 1), PopUpManager.removePopUp(this, t), this.destroy()
    }, n.destroy = function () {
    }, n.getIsPopUp = function () {
        return this.showing
    }, n.getIsInit = function () {
        return this.init
    }, n.getWidth = function () {
        return this.width
    }, n.getHeight = function () {
        return this.height
    }, e
}(eui.Component);
egret.registerClass(BaseDialog, "BaseDialog");
var BindDialog = function (t) {
    function e() {
        t.call(this, "bind_img", 792, 484), this.clickNum = []
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new JoinPasswordUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0;
        for (var e = 0; 12 > e; e++) {
            var i = this.m_UI["_t" + e];
            i.name = "" + e, i.addEventListener(egret.TouchEvent.TOUCH_END, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
        }
        this.m_UI._desc.text = "绑定推荐人就可以使用商场咯", this.m_UI._warm.text = "请输入推荐人ID：", this.m_UI._t11.text = "绑定"
    }, n.onJoin = function () {
        return "" == this.m_UI._edit.text ? void EffectUtils.showTips("ID不能为空", 5) : RegUtils.isNumber(this.m_UI._edit.text) ? this.m_UI._edit.text.length < 5 ? void EffectUtils.showTips("ID长度应该为五位", 5) : void 0 : void EffectUtils.showTips("ID格式不正确(只能是数字)", 5)
    }, n.onClick = function (t) {
        var e = +t.currentTarget.name, i = t.currentTarget, n = this.m_UI["_img" + e];
        switch (t.type) {
            case"touchBegin":
                this.addStage(), n.source = "clickeff_btn", i.textColor = 16771584;
                break;
            case"touchEnd":
                this.removeStage(), n.source = "clickeff_of_btn", this.clearText();
                break;
            case"touchMove":
                break;
            case"touchTap":
                11 == e ? this.onJoin() : 10 == e ? this.clickNum.pop() : this.clickNum.length < 5 && this.clickNum.push(e), this.refreshText()
        }
    }, n.addStage = function () {
        GameConfig.curStage().addEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().addEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.removeStage = function () {
        GameConfig.curStage().removeEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().removeEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.onMove = function (t) {
        void 0 === t && (t = null), this.clearText()
    }, n.clearText = function () {
        for (var t = 0; 12 > t; t++) {
            var e = this.m_UI["_t" + t];
            e.textColor = 16777215;
            var i = this.m_UI["_img" + t];
            i.source = "clickeff_of_btn"
        }
    }, n.refreshText = function () {
        for (var t = "", e = 0; e < this.clickNum.length; e++) t += this.clickNum[e];
        this.m_UI._edit.text = t
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1), StackManager.closeDialog("JoinDialog"), this.m_UI._edit.text = ""
    }, n.hide = function () {
        t.prototype.hide.call(this, 1), this.clickNum = []
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(BindDialog, "BindDialog");
var ChatDialog = function (t) {
    function e() {
        t.call(this, "bind_img", 670, 388), this.chat = {
            0: {text: "赶紧的，麻将桌都让你给靠倒了"},
            1: {text: "打啊，你搁那疙瘩相面呢啊？"},
            2: {text: "不是，你嘎哈呢啊，你打的咋这慢呢？"},
            3: {text: "打完别走啊，喝几瓶再来2圈。"},
            4: {text: "这麻将跟你打的，哎呦我天，我都怀疑人生。"},
            5: {text: "你跟谁俩舞舞玄玄的呢？"},
            6: {text: "哎你这牌，打绝了。"},
            7: {text: "那谁，你天生就是打麻将的料！"},
            8: {text: "别闹，好好玩一会。"},
            9: {text: "就是“蛋”多，爱咋咋滴"},
            10: {text: "我是洮北区的，你哪的啊？"},
            11: {text: "我在开发区呢，过来喝点啊？"}
        }
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new ChatUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog._title_img.visible = !1, this.m_dialog._title.visible = !1;
        for (var e in this.chat) {
            var i = new ChatListUI;
            this.m_UI._group.addChild(i), i.clickey = +e, i._labels.text = this.chat[e].text
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(ChatDialog, "ChatDialog");
var CreateDialog = function (t) {
    function e() {
        t.call(this, "create_btn", 792, 510), this.checkBoxSize = {
            1: {x: 307, y: 187},
            2: {x: 467, y: 187},
            3: {x: 627, y: 187},
            4: {x: 307, y: 231},
            5: {x: 467, y: 231},
            6: {x: 627, y: 231},
            7: {x: 307, y: 278},
            8: {x: 627, y: 187}
        }, this._xy = {
            1: {x: 198, y: 113},
            2: {x: 403, y: 113},
            3: {x: 607, y: 113}
        }, this.selectIndex = 1, this.checkIndex = 0, this.roudList = {
            1: 2,
            2: 4,
            3: 8
        }, this._touchStatus = !1, this._distance = new egret.Point
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new CreateUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_UI.btn_start.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this);
        for (var e = 1; 8 >= e; e++) {
            var i = new mui.ERadio;
            this.m_UI.addChild(i), i.name = "" + e, i.x = this.checkBoxSize[e].x, i.y = this.checkBoxSize[e].y, 3 == e && (i.visible = !1);
            var n = this.m_UI["_tg" + e];
            3 >= e ? (i.setSelectIndex(0), n.textColor = 10517067) : (i.setSelectIndex(1), n.textColor = 16723737), i.visible = !1, this.checkBoxSize[e].item = i
        }
        this.m_UI._center_btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onSize, this), this.m_UI._lef_btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onSize, this), this.m_UI._right_btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onSize, this), this.m_UI.btn_fanxuan.visible = !1, this.m_UI.btn_fanxuan.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCheck, this), this.m_UI.btn_suiji.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onRandom, this), this.m_UI._riado.touchEnabled = !1
    }, n.mouseDown = function (t) {
        this._touchStatus = !0, this._distance.x = t.stageX - this.m_UI._riado.x, this.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.mouseMove, this)
    }, n.mouseMove = function (t) {
        if (this._touchStatus) {
            var e = t.stageX - this._distance.x;
            226 > e && (e = 226), e > 635 && (e = 635), this.m_UI._riado.x = e
        }
    }, n.mouseUp = function (t) {
        this._touchStatus = !1, this.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.mouseMove, this)
    }, n.onRandom = function () {
        var t = "", e = Math.floor(10 * Math.random());
        t += "" + e;
        var i = Math.floor(10 * Math.random());
        t += "" + i;
        var n = Math.floor(10 * Math.random());
        t += "" + n;
        var a = Math.floor(10 * Math.random());
        t += "" + a, this.m_UI._edit.text = "" + t
    }, n.onCheck = function () {
        0 == this.checkIndex ? this.checkIndex = 1 : 1 == this.checkIndex && (this.checkIndex = 0), this.setCheck()
    }, n.setCheck = function (t) {
        void 0 === t && (t = this.checkIndex), this.m_UI.btn_fanxuan.textImg.source = "create_xz" + t;
        for (var e = 1; 8 >= e; e++) {
            var i = this.checkBoxSize[e].item, n = this.m_UI["_tg" + e];
            i.setSelectIndex(t), 0 == t ? n.textColor = 10517067 : n.textColor = 16723737
        }
    }, n.refreshText = function () {
        for (var t = 1; 8 >= t; t++) {
            var e = this.checkBoxSize[t].item, i = this.m_UI["_tg" + t];
            0 == e.selectIndex ? i.textColor = 10517067 : i.textColor = 16723737
        }
    }, n.onSize = function (t) {
        switch (t.currentTarget) {
            case this.m_UI._center_btn:
                this.selectIndex = 2, this.m_UI._tq1.textColor = 10517067, this.m_UI._tq2.textColor = 16723737, this.m_UI._tq3.textColor = 10517067;
                break;
            case this.m_UI._lef_btn:
                this.selectIndex = 1, this.m_UI._tq1.textColor = 16723737, this.m_UI._tq2.textColor = 10517067, this.m_UI._tq3.textColor = 10517067;
                break;
            case this.m_UI._right_btn:
                this.selectIndex = 3, this.m_UI._tq1.textColor = 10517067, this.m_UI._tq2.textColor = 10517067, this.m_UI._tq3.textColor = 16723737
        }
        this.m_UI._riado.x = this._xy[this.selectIndex].x, this.m_UI._riado.y = this._xy[this.selectIndex].y
    }, n.onClick = function () {
        for (var t = [], e = 1; 8 >= e; e++) {
            var i = this.checkBoxSize[e].item;
            1 == i.selectIndex && t.push(e)
        }
        var n = {};
        n.maxRound = this.roudList[this.selectIndex], SocketClientManager.getInstance().createRoom(n)
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1);
        for (var e = 1; 8 >= e; e++) {
            var i = this.checkBoxSize[e].item;
            3 >= e ? i.setSelectIndex(0) : i.setSelectIndex(1)
        }
        this.m_UI.btn_fanxuan.textImg.source = "create_xz" + this.checkIndex, this.m_UI._riado.x = this._xy[this.selectIndex].x, this.m_UI._riado.y = this._xy[this.selectIndex].y, this.m_UI._edit.text = "0000"
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1), this.selectIndex = 1, this.checkIndex = 0
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(CreateDialog, "CreateDialog");
var DissolutionDialog = function (t) {
    function e() {
        t.call(this, "diss_title", 670, 388), this.plist = {}, this.isClick = !1
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new DissolutionUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_UI.btn_true.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this), this.m_UI.btn_false.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onQuxiao, this), this.m_dialog.btn_close.enabled = !1
    }, n.clear = function () {
        this.isClick = !1, this.plist = {}, this.hide()
    }, n.onQuxiao = function () {
        return this.isClick ? void EffectUtils.showTips("您已经选择过了", 5) : (SocketClientManager.getInstance().dissolveRoom(0), void (this.isClick = !0))
    }, n.onClick = function (t) {
        return this.isClick ? void EffectUtils.showTips("您已经选择过了", 5) : (SocketClientManager.getInstance().dissolveRoom(1), void (this.isClick = !0))
    }, n.onTimes = function (t) {
        this.m_UI.time_text.text = "若无人拒绝，房间将在 " + Global.getStringBySeconds(1e3 * t) + " 后解散"
    }, n.refresh = function () {
        if (this.plist) {
            this.isClick ? (this.m_UI.btn_false.visible = !1, this.m_UI.btn_true.visible = !1, this.m_UI._desc.visible = !0) : (this.m_UI.btn_false.visible = !0, this.m_UI.btn_true.visible = !0, this.m_UI._desc.visible = !1);
            var t = 1, e = 0, i = !1;
            for (var n in GSData.i.roomPlayerMap) {
                var a = GSData.i.roomPlayerMap[n], s = this.m_UI["_label" + t], o = [];
                o.push({
                    text: a.nick,
                    style: {textColor: 10517067, fontFamily: "Microsoft YaHei", size: 20}
                }), "offline" == a.status ? o.push({
                    text: "（离线）",
                    style: {textColor: 15156010, fontFamily: "Microsoft YaHei", size: 18}
                }) : "online" == a.status ? o.push({
                    text: "（在线）",
                    style: {textColor: 4956255, fontFamily: "Microsoft YaHei", size: 18}
                }) : "leave" == a.status && o.push({
                    text: "（离开）",
                    style: {textColor: 8092024, fontFamily: "Microsoft YaHei", size: 18}
                }), s.textFlow = o;
                var r = this.m_UI["_img" + t];
                if (r.visible = !1, t++, this.plist[n] >= 0) {
                    r.visible = !0;
                    var h = +this.plist[n];
                    1 == h ? r.source = "diss_dui" : (r.source = "diss_cuo", i = !0), e++
                } else r.visible = !1
            }
            if (e >= 4) {
                var c = this;
                egret.setTimeout(function () {
                    c.clear(), i ? (EffectUtils.showTips("因有玩家拒绝解散，房间未能解散", 5), Heart.getInstance().dissolutionTime = 0) : EffectUtils.showTips("房间解散成功", 5)
                }, this, 1e3)
            }
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(DissolutionDialog, "DissolutionDialog");
var JoinDialog = function (t) {
    function e() {
        t.call(this, "joingame_txt", 730, 484), this.clickNum = [], this.textList = []
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new JoinUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0;
        for (var e = 0; 12 > e; e++) {
            var i = this.m_UI["_t" + e];
            i.name = "" + e, i.addEventListener(egret.TouchEvent.TOUCH_END, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
        }
    }, n.onJoin = function () {
        if (this.clickNum.length < 3) return void EffectUtils.showTips("请输入4-6位的房间号", 5, !1);
        for (var t = "", e = 0; e < this.clickNum.length; e++) t += "" + this.clickNum[e];
        GSData.i.roomID = +t, SocketClientManager.getInstance().joinRoom(t)
    }, n.onClick = function (t) {
        var e = +t.currentTarget.name, i = t.currentTarget, n = this.m_UI["_img" + e];
        switch (t.type) {
            case"touchBegin":
                this.addStage(), n.source = "clickeff_btn", i.textColor = 16771584;
                break;
            case"touchEnd":
                this.removeStage(), n.source = "clickeff_of_btn", this.clearText();
                break;
            case"touchMove":
                break;
            case"touchTap":
                11 == e ? this.onJoin() : 10 == e ? this.clickNum.pop() : this.clickNum.length < 6 && this.clickNum.push(e), this.refreshText()
        }
    }, n.addStage = function () {
        GameConfig.curStage().addEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().addEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.removeStage = function () {
        GameConfig.curStage().removeEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().removeEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.onMove = function (t) {
        void 0 === t && (t = null), this.clearText()
    }, n.clearText = function () {
        for (var t = 0; 12 > t; t++) {
            var e = this.m_UI["_t" + t];
            e.textColor = 16777215;
            var i = this.m_UI["_img" + t];
            i.source = "clickeff_of_btn"
        }
    }, n.refreshText = function () {
        this.m_UI._group.removeChildren();
        for (var t = 0; t < this.clickNum.length; t++) {
            var e;
            this.textList[t] ? e = this.textList[t] : (e = new eui.Label, e.size = 30, e.textColor = 758813, e.bold = !0, this.textList[t] = e), e.text = "" + this.clickNum[t], this.m_UI._group.addChild(e)
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1), this.clickNum = [], this.refreshText()
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(JoinDialog, "JoinDialog");
var JoinPasswordDialog = function (t) {
    function e() {
        t.call(this, "joinpassword_txt", 792, 484), this.clickNum = []
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new JoinPasswordUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0;
        for (var e = 0; 12 > e; e++) {
            var i = this.m_UI["_t" + e];
            i.name = "" + e, i.addEventListener(egret.TouchEvent.TOUCH_END, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onClick, this), i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
        }
    }, n.onJoin = function () {
        return "" == this.m_UI._edit.text ? void EffectUtils.showTips("密码不能为空", 5) : RegUtils.isNumber(this.m_UI._edit.text) ? this.m_UI._edit.text.length < 4 ? void EffectUtils.showTips("密码长度应该为四位", 5) : (GSData.i.roomPass = +this.m_UI._edit.text, void this.hide()) : void EffectUtils.showTips("密码格式不正确(只能是数字)", 5)
    }, n.onClick = function (t) {
        var e = +t.currentTarget.name, i = t.currentTarget, n = this.m_UI["_img" + e];
        switch (t.type) {
            case"touchBegin":
                this.addStage(), n.source = "clickeff_btn", i.textColor = 16771584;
                break;
            case"touchEnd":
                this.removeStage(), n.source = "clickeff_of_btn", this.clearText();
                break;
            case"touchMove":
                break;
            case"touchTap":
                11 == e ? this.onJoin() : 10 == e ? this.clickNum.pop() : this.clickNum.length < 4 && this.clickNum.push(e), this.refreshText()
        }
    }, n.addStage = function () {
        GameConfig.curStage().addEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().addEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.removeStage = function () {
        GameConfig.curStage().removeEventListener(egret.TouchEvent.TOUCH_END, this.onMove, this), GameConfig.curStage().removeEventListener(egret.Event.LEAVE_STAGE, this.onMove, this)
    }, n.onMove = function (t) {
        void 0 === t && (t = null), this.clearText()
    }, n.clearText = function () {
        for (var t = 0; 12 > t; t++) {
            var e = this.m_UI["_t" + t];
            e.textColor = 16777215;
            var i = this.m_UI["_img" + t];
            i.source = "clickeff_of_btn"
        }
    }, n.refreshText = function () {
        for (var t = "", e = 0; e < this.clickNum.length; e++) t += this.clickNum[e];
        this.m_UI._edit.text = t
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1), this.m_UI._edit.text = "0000", StackManager.closeDialog("JoinDialog")
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1), this.clickNum = []
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(JoinPasswordDialog, "JoinPasswordDialog");
var MessageDialog = function (t) {
    function e() {
        t.call(this, "msg_title", 662, 410)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new MessageUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_UI.btn_t.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTrue, this), this.m_UI.btn_f.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onFalse, this)
    }, n.onTrue = function (e) {
        this.cb(!0), t.prototype.hide.call(this, 1)
    }, n.onFalse = function (t) {
        this.hide()
    }, n.showMsg = function (e, i, n, a, s) {
        void 0 === i && (i = ""), void 0 === n && (n = null), void 0 === a && (a = null), void 0 === s && (s = !1), t.prototype.show.call(this, !0, this.width, this.height, 1, !1), n = null == n ? "确  定" : n, a = null == a ? "取  消" : a, this.m_UI._labs.text = i, this.m_UI.btn_t.textField.text = n, this.m_UI.btn_f.textField.text = a, this.cb = e, s ? (this.m_UI.btn_f.visible = !1, this.m_UI.btn_t.x = 253) : (this.m_UI.btn_f.visible = !0, this.m_UI.btn_t.x = 391)
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1), this.cb(!1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(MessageDialog, "MessageDialog");
var RecordDialog = function (t) {
    function e() {
        t.call(this, "record_txt", 870, 580), this.obj = [], this.xobj = [], this.itemList = {}, this.XitemList = {}, this.pcList = [], this.isXiang = !1
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new RecordUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, HttpManager.getInstance().addEventListener(AppEvent.GET_USER_RECORD_SUCC, this.getRoleSuccHandler, this)
    }, n.getRoleSuccHandler = function (t) {
        if (this._isRecordBoo) {
            var e = t.eventData;
            this.obj = e.recordList.reverse(), this.refreshList()
        }
    }, n.refreshXList = function () {
        this.isXiang = !0, this.m_UI._group.scrollV = 0, this.m_UI._group.removeChildren();
        for (var t = 0; t < this.xobj.length; t++) {
            var e = this.xobj[t];
            e.push(t + 1);
            var i;
            this.XitemList[t] ? (i = this.XitemList[t], i.obj = e) : i = new RecordXItem(e), this.m_UI._group.addChild(i), i.onUpdate()
        }
    }, n.refreshList = function () {
        this.isXiang = !1, this.m_UI._group.scrollV = 0, this.m_UI._group.removeChildren();
        for (var t = 0; t < this.obj.length; t++) {
            var e = this.obj[t];
            e.rank = t;
            var i = new RecordItem(e);
            this.m_UI._group.addChild(i), i.onUpdate()
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1), this._isRecordBoo = !0
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        return this.isXiang ? void this.refreshList() : (t.prototype.hide.call(this, 1), void (this._isRecordBoo = !1))
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(RecordDialog, "RecordDialog");
var RoleDialog = function (t) {
    function e() {
        t.call(this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(RoleDialog, "RoleDialog");
var RoleInfoDialog = function (t) {
    function e() {
        t.call(this, "", 503, 159)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new RoleInfoUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog.visible = !1, this._head = new GSHeadIcon, this.m_UI.addChild(this._head), this._head.x = 73, this._head.y = 95, this.btn_closes = new mui.EButton("close_btn"), this.btn_closes.x = 453, this.btn_closes.y = -30, this._head.headImg.width = this._head.headImg.height = 100, this.m_UI.addChild(this.btn_closes), this.btn_closes.addEventListener(egret.TouchEvent.TOUCH_TAP, this.hide, this), HttpManager.getInstance().addEventListener(AppEvent.GET_USER_RECORD_SUCC, this.getRoleSuccHandler, this)
    }, n.refreshRole = function (t) {
        if (void 0 === t && (t = null), t || (t = UserDataModel.getInstance()), this.m_UI._name.text = "" + t.nick, this.m_UI._id.text = "I D：" + t.uid, this.m_UI._ip.text = "I P：" + t.ip, this.m_UI._rate.text = "游戏次数：0  胜率：0%", t.pic) {
            this.headUrl = t.pic;
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            e ? this._head.setHeadImg(e.texture) : HttpManager.getInstance().addEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this)
        } else this._head.setHeadImg("head_001");
        HttpManager.getInstance().getUserRecord(t.uid)
    }, n.getRoleSuccHandler = function (t) {
        var e = t.eventData, i = 0 == e.roundCount ? 0 : e.winCount / e.roundCount * 100;
        this.m_UI._rate.text = "游戏次数：" + e.roundCount + "  胜率：" + i.toFixed(2) + "%"
    }, n.loadHeadSuccHandler = function (t) {
        if (this.headUrl == t.eventData) {
            HttpManager.getInstance().removeEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this);
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            this._head.setHeadImg(e.texture)
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(RoleInfoDialog, "RoleInfoDialog");
var RuleDialog = function (t) {
    function e() {
        t.call(this, "rule_txt", 844, 558)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new RuleUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog._title_img.visible = !1, this.inits()
    }, n.inits = function () {
        if (this.jsons = RES.getRes("rule"), this.jsons) {
            var t = "　　" + this.jsons.title, e = this.jsons.content;
            for (var i in e) {
                var n = e[i];
                if (n) {
                    t += "\n\n　　" + n.desc;
                    var a = n.list;
                    if (a) for (var s in a) t += "\n　　　" + a[s]
                }
            }
            this.setText(t)
        }
    }, n.setText = function (t) {
        void 0 === t && (t = ""), this.text = new eui.Label, this.text.fontFamily = GameConfig.FontFamily, this.text.textColor = 11104580, this.text.width = this.m_UI._scroller.width, this.text.lineSpacing = 10, this.text.size = 20, this.text.text = "\n" + t, this.m_UI._group.addChild(this.text)
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(RuleDialog, "RuleDialog");
var SettingDialog = function (t) {
    function e() {
        t.call(this, "setting_txt", 670, 380)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new SettingUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 10, this.slider_music = new mui.EHSlider(100, 0, "setting_progressbar_bg", "radio_btn", "setting_progressbar1"), this.slider_music.x = 95, this.slider_music.y = 100, this.slider_music.width = 320, this.m_dialog._title_img.visible = !1, this.m_UI.addChild(this.slider_music), this.slider_music.addEventListener(egret.Event.CHANGE, this.setMusic, this), this.slider_sound = new mui.EHSlider(100, 0, "setting_progressbar_bg", "radio_btn", "setting_progressbar1"), this.slider_sound.x = 95, this.slider_sound.y = 170, this.slider_sound.width = 320, this.m_UI.addChild(this.slider_sound), this.slider_sound.addEventListener(egret.Event.CHANGE, this.setSound, this), this.m_UI._btn_sound.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onOff, this)
    }, n.onOff = function () {
        var t = +NativeApi.getLocalData("switch");
        1 == t ? (NativeApi.setLocalData("switch", 0), this.m_UI._btn_sound.source = "sound_close_btn", GameMusic.CloseAllSound(), GameSound.CloseAllSound(), this.slider_music.touchEnabled = !1, this.slider_music.touchChildren = !1, this.slider_music.filters = Global.getColorFlilter(), this.slider_sound.touchEnabled = !1, this.slider_sound.touchChildren = !1, this.slider_sound.filters = Global.getColorFlilter()) : (NativeApi.setLocalData("switch", 1), this.m_UI._btn_sound.source = "sound_open_btn", GameLayerManager.gameLayer().sceneLayer.visible ? GameMusic.PlaySound("music_scene") : GameMusic.PlaySound("music_game"), this.slider_music.touchEnabled = !0, this.slider_music.touchChildren = !0, this.slider_music.filters = [], this.slider_sound.touchEnabled = !0, this.slider_sound.touchChildren = !0, this.slider_sound.filters = [])
    }, n.setMusic = function () {
        this.slider_music.changeShap();
        var t = this.slider_music.value, e = this.slider_music.maximum, i = Math.floor(t / e * 10), n = i / 10;
        GameMusic.setSoundVolume(n), NativeApi.setLocalData("music_volume", n)
    }, n.setSound = function () {
        this.slider_sound.changeShap();
        var t = this.slider_sound.value, e = this.slider_sound.maximum, i = Math.floor(t / e * 10), n = i / 10;
        GameSound.setSoundVolume(n), NativeApi.setLocalData("sound_volume", n)
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1);
        var e = +NativeApi.getLocalData("switch");
        0 == e ? (this.m_UI._btn_sound.source = "sound_close_btn", this.slider_music.touchEnabled = !1, this.slider_music.touchChildren = !1, this.slider_music.filters = Global.getColorFlilter(), this.slider_sound.touchEnabled = !1, this.slider_sound.touchChildren = !1, this.slider_sound.filters = Global.getColorFlilter()) : (this.m_UI._btn_sound.source = "sound_open_btn", this.slider_music.touchEnabled = !0, this.slider_music.touchChildren = !0, this.slider_music.filters = [], this.slider_sound.touchEnabled = !0, this.slider_sound.touchChildren = !0, this.slider_sound.filters = []);
        var i = +NativeApi.getLocalData("music_volume");
        this.slider_music.value = 100 * i, this.slider_music.validateNow(), this.slider_music.changeShap();
        var n = +NativeApi.getLocalData("sound_volume");
        this.slider_sound.value = 100 * n, this.slider_sound.validateNow(), this.slider_sound.changeShap()
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(SettingDialog, "SettingDialog");
var ShopDialog = function (t) {
    function e() {
        t.call(this, "shop_txt", 806, 468), this.activit = {
            1: {
                title: "新手福利",
                content: "　　公测期间，凡首次登陆游戏的玩家，均可获得12张房卡福利，便于体验游戏。"
            },
            2: {
                title: "邀请福利",
                content: "　　公测期间，凡邀请任何一位新人体验游戏（至少两圈）并完成牌局，其对应的邀请人可获得4张房卡，被邀请人可获得2张房卡。"
            },
            3: {
                title: "关注福利",
                content: "　　公测期间，关注微信公众号：老友棋牌（微信号：CCTV1V5）进入公众号回复“关注奖励”，即可获得4张房卡。"
            }
        }, this.selectIndex = 1
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new ShopUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog._title.top = 7, this.m_dialog._title_img.top = -18, this.m_dialog._title_img.source = "shop_dialog_head_img", this.m_dialog._dialog_bg.source = "dialog_bg";
        for (var e in this.activit) {
            var i = this.activit[e], n = i.title, a = new mui.EButton("btn_cheng", n);
            this.m_UI._group.addChild(a), a.name = "" + e, a.y = 59 * (+e - 1), a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this), a.textField.verticalCenter = -5, 1 == +e && (a.textImg.source = "btn_red", a.textField.textColor = 16774488)
        }
        this.refreshText(this.selectIndex)
    }, n.onClick = function (t) {
        void 0 === t && (t = null), this.refreshText(+t.currentTarget.name), this.refreshBtn();
        var e = t.currentTarget;
        e.textImg.source = "btn_red", e.textField.textColor = 16774488
    }, n.refreshText = function (t) {
        this.m_UI._labels.text = "" + this.activit[t].content
    }, n.refreshBtn = function () {
        for (var t = this.m_UI._group, e = 0; e < t.numChildren; e++) {
            var i = t.getChildAt(e);
            i.x = 0, i.textImg.source = "btn_cheng", i.textField.textColor = 16777215
        }
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(ShopDialog, "ShopDialog");
var TipsDialog = function (t) {
    function e() {
        t.call(this, "msg_title", 662, 410)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.m_UI = new MessageUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog._title_img.visible = !1, this.m_UI.btn_f.visible = this.m_UI.btn_t.visible = !1, this.m_UI._labs.text = "投诉建议举报   【官方微信号】"
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(TipsDialog, "TipsDialog");
var UserAgreement = function (t) {
    function e() {
        t.call(this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        if (t.prototype.createChildren.call(this), this.m_UI = new RuleUI, this.addChild(this.m_UI), this.m_UI.horizontalCenter = 0, this.m_UI.verticalCenter = 0, this.m_dialog._title_img.visible = !1, this.m_dialog._title.source = "agreement_text", this.jsons = RES.getRes("agreement"), this.jsons) {
            var e = [];
            this.jsons.ztitle && e.push({
                text: "　　　　　　　　　　　" + this.jsons.ztitle + "\n",
                style: {textColor: 11104580, fontFamily: "" + GameConfig.FontFamily, size: 24}
            }), this.jsons.title && e.push({
                text: "　　" + this.jsons.title,
                style: {textColor: 11104580, fontFamily: "" + GameConfig.FontFamily, size: 20}
            });
            var i = this.jsons.content;
            for (var n in i) {
                var a = i[n];
                if (a) {
                    e.push({
                        text: "\n\n" + a.desc,
                        style: {textColor: 11104580, fontFamily: "" + GameConfig.FontFamily, size: 22}
                    });
                    var s = a.list;
                    if (s) for (var o in s) e.push({
                        text: "\n" + s[o],
                        style: {textColor: 11104580, fontFamily: "" + GameConfig.FontFamily, size: 20}
                    })
                }
            }
            this.jsons.etitle && e.push({
                text: "\n　　" + this.jsons.etitle,
                style: {textColor: 11104580, fontFamily: "" + GameConfig.FontFamily, size: 20}
            }), this.setText(e)
        }
    }, n.setText = function (t) {
        this.text = new eui.Label, this.text.width = this.m_UI._scroller.width - 40, this.text.lineSpacing = 10, this.text.textFlow = t, this.m_UI._group.addChild(this.text)
    }, n.show = function () {
        t.prototype.show.call(this, !0, this.width, this.height, 1, !1)
    }, n.beforShow = function () {
        t.prototype.beforShow.call(this)
    }, n.initUI = function () {
        t.prototype.initUI.call(this)
    }, n.initData = function () {
        t.prototype.initData.call(this)
    }, n.hide = function () {
        t.prototype.hide.call(this, 1)
    }, n.destroy = function () {
        t.prototype.destroy.call(this)
    }, e
}(BaseDialog);
egret.registerClass(UserAgreement, "UserAgreement");
var EffectManager = function () {
    function t() {
        this.movieClips = [], this.movieClipDataMap = {}, this.playingMovieClips = [], this.movieClipDataFactory = new egret.MovieClipDataFactory, this.movieDefaultProp = {
            x: 0,
            y: 0,
            scaleX: 1,
            scaleY: 1,
            anchorOffsetX: 0,
            anchorOffsetY: 0,
            rotation: 0,
            frameRate: 12
        }, this.eps = {}, this.regEffectsAO()
    }

    var e = __define, i = t, n = i.prototype;
    return e(t, "i", function () {
        return this._i || (this._i = new t)
    }), n.regEffectsAO = function () {
        this.regAO("loding", "loding", 0, 0, 9)
    }, n.getPropEffect = function (t) {
        var e = this.getMovieClipFPool();
        return "" == t ? e : (this.updateMovieClipData(e, t), e)
    }, n.getMovieClipFPool = function () {
        return this.movieClips.length ? this.movieClips.shift() : new egret.MovieClip
    }, n.updateMovieClipData = function (t, e) {
        var i = this.getAO(e), n = this.getMovieClipData(i.name);
        t.movieClipData = n, t.totalFrames > 0 && n && (t.frameRate = i.frame), t.anchorOffsetX = i.x, t.anchorOffsetY = i.y
    }, n.getMovieClipData = function (t) {
        var e = this.movieClipDataMap[t];
        if (!e) {
            var i = this.movieClipDataFactory.mcDataSet = RES.getRes(t + "_json");
            i && (this.movieClipDataFactory.mcDataSet = i, this.movieClipDataFactory.texture = RES.getRes(t + "_png")), null == i ? e = null : this.movieClipDataMap[t] = e = this.movieClipDataFactory.generateMovieClipData()
        }
        return e
    }, n.removeEffect = function (t) {
        this.resetMovieClip(t), t.parent && t.parent.removeChild(t), this.playingMovieClips.splice(this.playingMovieClips.indexOf(t), 1), this.movieClips.push(t)
    }, n.resetMovieClip = function (t) {
        for (var e in this.movieDefaultProp) t[e] = this.movieDefaultProp[e];
        t.gotoAndStop(0)
    }, n.playEffect = function (t, e, i, n, a, s, o) {
        void 0 === i && (i = 1);
        var r = this.getPropEffect(t);
        if (this.playingMovieClips.push(r), n) for (var h in n) this.movieDefaultProp.hasOwnProperty(h) && (r[h] = n[h]);
        return r.play(i), e.addChild(r), 1 == i && r.addEventListener(egret.Event.COMPLETE, function (t) {
            r.removeEventListener(egret.Event.COMPLETE, arguments.callee, this), this.removeEffect(r), null == a || a.call(s, o)
        }, this), r
    }, n.regAO = function (t, e, i, n, a) {
        void 0 === a && (a = 12), this.eps[t] = {name: e, x: i, y: n, frame: a}
    }, n.getAO = function (t) {
        var e = this.eps[t];
        if (!e) throw new Error("没有注册特效相关属性 : " + t);
        return e
    }, t
}();
egret.registerClass(EffectManager, "EffectManager");
var GameLayerManager = function (t) {
    function e() {
        t.call(this), this.sceneLayer = new eui.UILayer, this.mainLayer = new eui.UILayer, this.effectLayer = new eui.UILayer, this.panelLayer = new eui.UILayer, this.maskLayer = new eui.UILayer, this.loadLayer = new eui.UILayer, this.init()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return e.gameLayer = function () {
        return this._instance || (this._instance = new e), this._instance
    }, n.init = function () {
        this.touchThrough = !0, this.sceneLayer.touchThrough = !0, this.panelLayer.touchThrough = !0, this.mainLayer.touchThrough = !0, this.effectLayer.touchThrough = !0, this.maskLayer.touchThrough = !0, this.loadLayer.touchThrough = !0, this.addChild(this.sceneLayer), this.addChild(this.mainLayer), this.addChild(this.maskLayer), this.addChild(this.effectLayer), this.addChild(this.panelLayer), this.addChild(this.loadLayer), this.setLayerVisible(!1, "mainLayer"), this.hornGroup = new eui.Group, this.hornGroup.horizontalCenter = 0, this.hornGroup.width = 718, this.hornGroup.height = 38, this.effectLayer.addChild(this.hornGroup), this.effectLayer.touchEnabled = !1, this.effectLayer.touchChildren = !1, this.loadLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickLoad, this)
    }, n.onClickLoad = function () {
        Global.showShare()
    }, n.openMainLayer = function () {
        this.setLayerVisible(!1, "sceneLayer"), this.setLayerVisible(!0, "mainLayer"), GameMusic.PlaySound("music_game");
        var t = e.gameLayer().hornGroup;
        t && t.contains(Global.hornPanel) && (t.top = 20)
    }, n.openSceneLayer = function () {
        this.setLayerVisible(!0, "sceneLayer"), this.setLayerVisible(!1, "mainLayer"), GameMusic.PlaySound("music_scene");
        var t = e.gameLayer().hornGroup;
        t && t.contains(Global.hornPanel) && (t.top = 120), Weixin.onMenuShareAppMessage(), Weixin.onMenuShareTimeline()
    }, n.setLayerVisible = function (t, e) {
        void 0 === t && (t = !1), this["" + e] ? this["" + e].visible = t : EffectUtils.showTips("未找到这个场景类", 5)
    }, e
}(eui.UILayer);
egret.registerClass(GameLayerManager, "GameLayerManager");
var DialogLoding = function (t) {
    function e() {
        t.call(this), this.graphics.clear(), this.graphics.beginFill(0, .5), this.graphics.drawRect(0, 0, GameConfig.curWidth(), GameConfig.curHeight()), this.graphics.endFill(), this.label = new eui.Label, this.label.width = 100, this.label.height = 30, this.label.textAlign = "center", this.label.textColor = 16777215, this.label.size = 26, this.label.fontFamily = "Microsoft YaHei", this.label.bold = !0, this.label.x = this.width / 2 - this.label.width / 2, this.label.y = this.height / 2 - this.label.height / 2 + 100
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.show = function () {
        GameLayerManager.gameLayer().loadLayer.contains(this) || GameLayerManager.gameLayer().loadLayer.addChild(this), this.addChild(this.label), this.label.text = "0%"
    }, n.setTitle = function (t, e) {
        this.label.text = Math.floor(t / e * 100) + "%"
    }, n.clearLoad = function () {
        GameLayerManager.gameLayer().loadLayer.contains(this) && GameLayerManager.gameLayer().loadLayer.removeChild(this), this.removeChildren()
    }, e
}(egret.Sprite);
egret.registerClass(DialogLoding, "DialogLoding");
var PopUpManager;
!function (t) {
    function e(e, i, n, a, s, o) {
        if (void 0 === i && (i = !1), void 0 === n && (n = 0), void 0 === a && (a = 0), void 0 === s && (s = 0), void 0 === o && (o = !1), !GameLayerManager.gameLayer().panelLayer.contains(e)) {
            e.scaleX = 1, e.scaleY = 1, e.x = 0, e.y = 0, e.alpha = 1, i && (t.darkSprite || (t.darkSprite = new egret.Sprite, t.darkSprite.graphics.clear(), t.darkSprite.graphics.beginFill(0, .6), t.darkSprite.graphics.drawRect(0, 0, GameConfig.curWidth(), GameConfig.curHeight()), t.darkSprite.graphics.endFill(), t.darkSprite.width = GameConfig.curWidth(), t.darkSprite.height = GameConfig.curHeight()), GameLayerManager.gameLayer().maskLayer.contains(t.darkSprite) || GameLayerManager.gameLayer().maskLayer.addChild(t.darkSprite), t.darkSprite.touchEnabled = !0, t.darkSprite.visible = !0), GameLayerManager.gameLayer().panelLayer.addChild(e), GameConfig.curPanel = e, 0 != n ? (e.x = GameConfig.curWidth() / 2 - n / 2, e.y = GameConfig.curHeight() / 2 - a / 2) : (n = e.width, a = e.height);
            var r = GameConfig.curWidth() / 2 - n / 2, h = GameConfig.curHeight() / 2 - a / 2;
            switch (s) {
                case 0:
                    break;
                case 1:
                    e.alpha = 0, e.scaleX = .5, e.scaleY = .5, e.x = e.x + n / 4, e.y = e.y + a / 4, egret.Tween.get(e).to({
                        alpha: 1,
                        scaleX: 1,
                        scaleY: 1,
                        x: e.x - n / 4,
                        y: e.y - a / 4
                    }, 300, egret.Ease.backOut);
                    break;
                case 2:
                    e.alpha = 0, e.scaleX = .5, e.scaleY = .5, e.x = e.x + n / 4, e.y = e.y + a / 4, egret.Tween.get(e).to({
                        alpha: 1,
                        scaleX: 1,
                        scaleY: 1,
                        x: e.x - n / 4,
                        y: e.y - a / 4
                    }, 600, egret.Ease.elasticOut);
                    break;
                case 3:
                    o ? (e.x = -n, egret.Tween.get(e).to({x: r}, 500, egret.Ease.cubicOut)) : (e.x = -n, egret.Tween.get(e).to({x: 0}, 500, egret.Ease.cubicOut));
                    break;
                case 4:
                    o ? (e.x = n, egret.Tween.get(e).to({x: r}, 500, egret.Ease.cubicOut)) : (e.x = n, egret.Tween.get(e).to({x: 0}, 500, egret.Ease.cubicOut));
                    break;
                case 5:
                    o ? (e.y = -a, egret.Tween.get(e).to({y: h}, 500, egret.Ease.cubicOut)) : (e.y = -a, egret.Tween.get(e).to({y: 0}, 500, egret.Ease.cubicOut));
                    break;
                case 6:
                    o ? (e.y = GameConfig.curHeight(), egret.Tween.get(e).to({y: h}, 500, egret.Ease.cubicOut)) : (e.y = a, egret.Tween.get(e).to({y: 0}, 500, egret.Ease.cubicOut))
            }
        }
    }

    function i(e, i) {
        function n() {
            GameLayerManager.gameLayer().panelLayer.contains(e) && GameLayerManager.gameLayer().panelLayer.removeChild(e);
            var i = function () {
                GameLayerManager.gameLayer().maskLayer.contains(t.darkSprite) && (GameLayerManager.gameLayer().maskLayer.removeChild(t.darkSprite), t.darkSprite.alpha = 1)
            };
            GameLayerManager.gameLayer().panelLayer.numChildren <= 0 && t.darkSprite && egret.Tween.get(t.darkSprite).to({alpha: 0}, 100).call(i, a)
        }

        void 0 === i && (i = 0);
        var a = this;
        switch (i) {
            case 0:
                break;
            case 1:
                egret.Tween.get(e).to({
                    alpha: 0,
                    scaleX: 0,
                    scaleY: 0,
                    x: e.x + e.width / 2,
                    y: e.y + e.height / 2
                }, 200).call(n, this);
                break;
            case 2:
                break;
            case 3:
                egret.Tween.get(e).to({x: e.width}, 500, egret.Ease.cubicOut).call(n, a);
                break;
            case 4:
                egret.Tween.get(e).to({x: -e.width}, 500, egret.Ease.cubicOut).call(n, a);
                break;
            case 5:
                egret.Tween.get(e).to({y: e.height}, 500, egret.Ease.cubicOut).call(n, a);
                break;
            case 6:
                egret.Tween.get(e).to({y: -e.height}, 500, egret.Ease.cubicOut).call(n, a)
        }
    }

    t.addPopUp = e, t.removePopUp = i
}(PopUpManager || (PopUpManager = {}));
var HttpRequest = egret.HttpRequest, GameMainScene = function (t) {
    function e() {
        t.call(this), this.iconList = {
            1: {source: "zhanji_icon_png", click: "", name: "record"},
            2: {source: "set_icon", click: "", name: "set"},
            3: {source: "rule_icon", click: "", name: "rule"}
        }, this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "mainSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this.initIconList(), this.btn_create = new mui.EButton("blue_game_btn"), this.btn_create.horizontalCenter = -292, this.btn_create.verticalCenter = 0, this.main_group.addChildAt(this.btn_create, 0), this.btn_join = new mui.EButton("red_game_btn"), this.btn_join.horizontalCenter = 0, this.btn_join.verticalCenter = 0, this.main_group.addChildAt(this.btn_join, 0), this.btn_record = new mui.EButton("yellow_game_btn"), this.btn_record.horizontalCenter = 292, this.btn_record.verticalCenter = 3, this.main_group.addChildAt(this.btn_record, 0), this.btn_normal = new mui.EButton("normalRoom_png"), this.btn_normal.name = "normal", this.btn_normal.x = 986, this.btn_normal.verticalCenter = 0, this.main_group.addChildAt(this.btn_normal, 0), this.normalLimitLabel = new egret.TextField, this.normalLimitLabel.size = 18, this.normalLimitLabel.text = "金币 ≥ " + UserDataModel.getInstance().roomCfg.normal.limit, this.normalLimitLabel.x = this.btn_normal.x + 138 - this.normalLimitLabel.width / 2, this.normalLimitLabel.y = this.btn_normal.y + 325, this.main_group.addChild(this.normalLimitLabel), this.btn_middle = new mui.EButton("middleRoom_png"), this.btn_middle.name = "middle", this.btn_middle.x = 1306, this.btn_middle.verticalCenter = 0, this.main_group.addChildAt(this.btn_middle, 0), this.midLimitLabel = new egret.TextField, this.midLimitLabel.size = 18, this.midLimitLabel.text = "金币 ≥ " + UserDataModel.getInstance().roomCfg.middle.limit, this.midLimitLabel.x = this.btn_middle.x + 138 - this.midLimitLabel.width / 2, this.midLimitLabel.y = this.btn_middle.y + 325, this.main_group.addChild(this.midLimitLabel), this.btn_high = new mui.EButton("highRoom_png"), this.btn_high.name = "high", this.btn_high.x = 1626, this.btn_high.verticalCenter = 0, this.main_group.addChildAt(this.btn_high, 0), this.highLimitLabel = new egret.TextField, this.highLimitLabel.size = 18, this.highLimitLabel.text = "金币 ≥ " + UserDataModel.getInstance().roomCfg.hight.limit, this.highLimitLabel.x = this.btn_high.x + 138 - this.highLimitLabel.width / 2, this.highLimitLabel.y = this.btn_high.y + 325, this.main_group.addChild(this.highLimitLabel), this.btn_normal.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCoinRoomSelect, this), this.btn_middle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCoinRoomSelect, this), this.btn_high.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCoinRoomSelect, this), this.back_group.visible = !1, this.btn_join.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            StackManager.open(JoinDialog, "JoinDialog")
        }, this), this.btn_create.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            StackManager.open(CreateDialog, "CreateDialog")
        }, this), this.btn_record.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            var t = this;
            egret.Tween.get(this.main_group).to({x: -960}, 200).call(function () {
                t.back_group.visible = !0
            })
        }, this), this.btn_add.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            StackManager.open(TipsDialog, "TipsDialog")
        }, this), this.btn_curr_add.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            StackManager.open(TipsDialog, "TipsDialog")
        }, this), this._head_click.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            var t = StackManager.findDialog(RoleInfoDialog, "RoleInfoDialog");
            t && (t.show(), t.refreshRole())
        }, this), this.back_group.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            this.back_group.visible = !1, egret.Tween.get(this.main_group).to({x: 0}, 200)
        }, this)
    }, n.initIconList = function () {
        for (var t in this.iconList) {
            var e = this.iconList[t], i = new mui.EButton(e.source + "", "", 20);
            this.icon_group.addChild(i), i.x += 95 * (+t - 1), i.name = e.name, i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
        }
    }, n.onCoinRoomSelect = function (t) {
        var e = t.currentTarget.name, i = 0;
        switch (e) {
            case"normal":
                i = 2;
                break;
            case"middle":
                i = 3;
                break;
            case"high":
                i = 4
        }
        SocketClientManager.getInstance().enterNormalRoom(i)
    }, n.onClick = function (t) {
        var e = t.currentTarget.name;
        switch (e) {
            case"record":
                StackManager.open(RecordDialog, "RecordDialog"), HttpManager.getInstance().getUserRecord(UserDataModel.getInstance().uid);
                break;
            case"set":
                StackManager.open(SettingDialog, "SettingDialog");
                break;
            case"rule":
                StackManager.open(RuleDialog, "RuleDialog")
        }
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this), this.stage.orientation = "landscape", this.stage.setContentSize(960, 640);
        var e = new egret.Shape;
        e.graphics.lineStyle(0), e.graphics.beginFill(16777215, 1), e.graphics.drawRoundRect(2, 2, this._head.width - 4, this._head.height - 4, 30, 30), e.graphics.endFill(), e.x = this._head.x, e.y = this._head.y, this.head_group.addChild(e), this._head.mask = e, this.update(), GameConfig.roomid && (GSData.i.roomID = +GameConfig.roomid, SocketManager.getInstance().getGameConn().send(3, {
            args: {
                roomid: +GameConfig.roomid,
                pass: "0"
            }
        }));
        var i = Math.floor(Math.random() * GlobalData.getInstance().gamewarmList.length);
        GlobalData.getInstance().hornList.push(GlobalData.getInstance().gamewarmList[i]), egret.setTimeout(this.onWeiJs, this, 1e3), SocketClientManager.getInstance().addEventListener(AppEvent.SOCKET_ROOM_DATA_EVENT, this.enterRoomHandler, this)
    }, n.enterRoomHandler = function (t) {
        StackManager.closeDialog("", !0), GSController.i.startView()
    }, n.onWeiJs = function () {
        Weixin.onMenuShareAppMessage(), Weixin.onMenuShareTimeline(), Weixin.hideMenuItems()
    }, n.update = function () {
        var t = this, e = UserDataModel.getInstance();
        if (this._money_text.text = "" + e.roomcard, this._currency_text.text = "" + e.currency, this._name.text = "" + e.nick, this._uid.text = "ID：" + e.uid, e.pic) {
            this.headUrl = e.pic;
            var i = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            i ? t._head.source = i.texture : HttpManager.getInstance().addEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this)
        } else t._head.source = "head_001";
        t._head.width = t._head.height = 77
    }, n.loadHeadSuccHandler = function (t) {
        if (this.headUrl == t.eventData) {
            HttpManager.getInstance().removeEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this);
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            this._head.source = e.texture
        }
    }, e
}(eui.Component);
egret.registerClass(GameMainScene, "GameMainScene");
var LoginScene = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "LoginSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this), this.registerBtn.visible = !1, this.backLoginPot.visible = !1, this.currentState = "loading", null != getCookie("uname_pc") && "" != getCookie("uname_pc") && null != getCookie("password_pc") && "" != getCookie("password_pc") && (this.username.text = getCookie("uname_pc"), this.password.text = getCookie("password_pc")), this.username.prompt = "请输入用户名", this.password.textDisplay.type = egret.TextFieldType.INPUT, this.password.textDisplay.inputType = egret.TextFieldInputType.PASSWORD, this.password.prompt = "请输入密码", this.password.displayAsPassword = !0, this.loginBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.loginHandle, this), this.registerBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.registerBtnHandle, this), this.registerPot.addEventListener(egret.TouchEvent.TOUCH_TAP, this.registerPotHandle, this), this.backLoginPot.addEventListener(egret.TouchEvent.TOUCH_TAP, this.backLoginPotHandle, this), HttpManager.getInstance().addEventListener(AppEvent.LOGIN_SUCC, this.onIn, this), HttpManager.getInstance().addEventListener(AppEvent.ADDUSER_SUCC, this.addUserSuccHandler, this), RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), RES.loadGroup("preload"), this._label_info.text = "正在加载游戏资源···"
    }, n.addUserSuccHandler = function (t) {
        TipsUtils.showTipsFromCenter("注册成功"), this.loginHandle(null)
    }, n.registerBtnHandle = function (t) {
        return "" == this.username.text || "" == this.password.text ? void TipsUtils.showTipsFromCenter("注册信息不完整,请重新输入") : void HttpManager.getInstance().addUser(this.username.text, this.password.text)
    }, n.backLoginPotHandle = function (t) {
        null != getCookie("uname_pc") && "" != getCookie("uname_pc") && null != getCookie("password_pc") && "" != getCookie("password_pc") && (this.username.text = getCookie("uname_pc"), this.password.text = getCookie("password_pc")), this.registerBtn.visible = !1, this.loginBtn.visible = !0, this.backLoginPot.visible = !1, this.registerPot.visible = !0
    }, n.registerPotHandle = function (t) {
        this.username.text = "", this.password.text = "", this.registerBtn.visible = !0, this.loginBtn.visible = !1, this.backLoginPot.visible = !0, this.registerPot.visible = !1
    }, n.loginHandle = function (t) {
        return "" == this.username.text || "" == this.password.text ? void TipsUtils.showTipsFromCenter("登录信息不完整,请重新输入") : (GameMusic.PlaySound("music_scene"), HttpManager.getInstance().login(this.username.text, this.password.text), setCookie("uname_pc", this.username.text, 365), void setCookie("password_pc", this.password.text, 365))
    }, n.onResourceLoadComplete = function (t) {
        "preload" == t.groupName ? RES.loadGroup("music") : (RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), GlobalData.getInstance().sendLogin = !0, HttpManager.getInstance().initData(), GameConfig.openid && is_weixin() ? (this._label_info.text = "正在拉取用户信息···", setTimeout(function () {
            HttpManager.getInstance().getWxUserData(GameConfig.openid)
        }, 1e3)) : this.loginView())
    }, n.onItemLoadError = function (t) {
        console.warn("Url:" + t.resItem.url + " has failed to load")
    }, n.onResourceLoadError = function (t) {
        console.warn("Group:" + t.groupName + " has failed to load"), this.onResourceLoadComplete(t)
    }, n.onResourceProgress = function (t) {
        if ("preload" == t.groupName) {
            var e = Math.floor(t.itemsLoaded / t.itemsTotal * 100) + "%";
            this.load_jindu.text = "" + e
        }
    }, n.loginView = function () {
        this.currentState = "login"
    }, n.onIn = function (t) {
        this.loginBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.loginHandle, this), this.registerBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.registerBtnHandle, this), this.registerPot.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.registerPotHandle, this), this.backLoginPot.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.backLoginPotHandle, this), HttpManager.getInstance().removeEventListener(AppEvent.ADDUSER_SUCC, this.addUserSuccHandler, this), HttpManager.getInstance().removeEventListener(AppEvent.LOGIN_SUCC, this.onIn, this), GameMusic.PlaySound("music_scene"), SocketClientManager.getInstance().init(), SceneManager.open(GameMainScene, "GameMainScene"), SceneManager.close("LoginScene", !0), GameLayerManager.gameLayer().messagBox = new MessageDialog
    }, n.update = function () {
    }, e
}(eui.Component);
egret.registerClass(LoginScene, "LoginScene");
var SceneManager;
!function (t) {
    function e(t, e) {
        void 0 === e && (e = !1), this.dict[t] && (GameLayerManager.gameLayer().sceneLayer.contains(this.dict[t]) && GameLayerManager.gameLayer().sceneLayer.removeChild(this.dict[t]), e && delete this.dict[t])
    }

    function i(t, e) {
        GameLayerManager.gameLayer().sceneLayer.removeChildren(), null == this.dict[e] ? (this.dict[e] = new t, GameLayerManager.gameLayer().sceneLayer.addChild(this.dict[e])) : GameLayerManager.gameLayer().sceneLayer.contains(this.dict[e]) || GameLayerManager.gameLayer().sceneLayer.addChild(this.dict[e])
    }

    function n(t) {
        return t && this.dict[t] ? this.dict[t] : null
    }

    function a(t) {
        this.dict[t] && this.dict[t].update()
    }

    t.dict = {}, t.close = e, t.open = i, t.find = n, t.update = a
}(SceneManager || (SceneManager = {}));
var StackManager;
!function (t) {
    function e(t, e) {
        if (void 0 === e && (e = !1), e) for (var i in this.dict) this.dict[i] && this.dict[i].hide(); else this.dict[t] && GameLayerManager.gameLayer().panelLayer.contains(this.dict[t]) && this.dict[t].hide()
    }

    function i(e, i, n, a) {
        t.delayed[i] = {meth: n, my: a}, t.open(e, i)
    }

    function n(e, i, n) {
        if (void 0 === n && (n = null), null == this.dict[i]) {
            var a = new e;
            a.show(), t.dict[i] = a
        } else this.dict[i].show(), n && n(this.dict[i])
    }

    function a(t, e, i) {
        if (void 0 === i && (i = !0), t && e && this.dict[e]) {
            if (i && !this.dict[e].showing) return;
            this.dict[e].onUpdate()
        }
    }

    function s(t, e, i) {
        if (void 0 === i && (i = !0), t && e) {
            if (this.dict[e]) return this.dict[e];
            if (i) return this.dict[e] = new t, this.dict[e]
        }
        return null
    }

    t.dict = {}, t.delayed = {}, t.closeDialog = e, t.delayedDialog = i, t.open = n, t.Update = a, t.findDialog = s
}(StackManager || (StackManager = {}));
var ChatListUI = function (t) {
    function e() {
        t.call(this), this.clickey = 0, this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "ChatListSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this), this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
    }, n.onClick = function (t) {
        SocketClientManager.getInstance().sendChat({
            type: 1,
            chat: {id: this.clickey, sex: UserDataModel.getInstance().sexNum, uid: UserDataModel.getInstance().uid}
        }), StackManager.closeDialog("ChatDialog")
    }, e
}(eui.Component);
egret.registerClass(ChatListUI, "ChatListUI");
var ChatPao = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "ChatPaoSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(ChatPao, "ChatPao");
var ChatUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "ChatSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(ChatUI, "ChatUI");
var CreateUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "CreateSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this.btn_start = new mui.EButton("start_btn"), this.btn_start.x = 284, this.btn_start.y = 390, this.btn_start.textImg.source = "create_kspj", this.btn_start.textImg.horizontalCenter = 35, this.btn_start.textImg.verticalCenter = -7, this.addChild(this.btn_start), this.btn_fanxuan = new mui.EButton("create_btn_img"), this.btn_fanxuan.x = 550, this.btn_fanxuan.y = 278, this.addChild(this.btn_fanxuan), this.btn_fanxuan.textImg.source = "create_xz1", this._tq1.textColor = 16723737
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(CreateUI, "CreateUI");
var DialogUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "DialogSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this.btn_close = new mui.EButton("close_btn", "", 20), this.addChild(this.btn_close)
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(DialogUI, "DialogUI");
var DissolutionUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "DissolutionSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this.btn_true = new mui.EButton("btn_green", "同  意", 24), this.btn_true.x = 404, this.btn_true.y = 303, this.addChild(this.btn_true), this.btn_false = new mui.EButton("btn_red", "拒  绝", 24), this.btn_false.x = 110, this.btn_false.y = 303, this.addChild(this.btn_false)
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(DissolutionUI, "DissolutionUI");
var JoinPasswordUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "JoinPasswordSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(JoinPasswordUI, "JoinPasswordUI");
var JoinUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "JoinSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(JoinUI, "JoinUI");
var MessageUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "MessageSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this.btn_t = new mui.EButton("btn_green", "确  定", 24), this.btn_t.x = 391, this.btn_t.y = 320, this.addChild(this.btn_t), this.btn_f = new mui.EButton("btn_red", "取  消", 24), this.btn_f.x = 115, this.btn_f.y = 320, this.addChild(this.btn_f)
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(MessageUI, "MessageUI");
var RankUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RankSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(RankUI, "RankUI");
var RecordItem = function (t) {
    function e(e) {
        void 0 === e && (e = null), t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RecordItemSkin", this.touchChildren = !0, this.obj = e
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.onUpdate = function () {
        if (this.obj) {
            var t = this.obj.resultList, e = this.obj.roomId, i = this.obj.time, n = (this.obj.total, this.obj.rank);
            this._rank.text = "" + (n + 1);
            var a = "";
            this._name1.text = "", this._name2.text = "", this._name3.text = "", this._name4.text = "", this._code.text = "房间号：" + e, this._time.text = "" + i;
            for (var s in t) if (a = "", t.hasOwnProperty(s)) {
                var o = t[s], r = o.nick, h = o.gain;
                a += r + "\n" + h, this["_name" + Number(s)].text = a
            }
        }
    }, n.onClick = function () {
        var t = StackManager.findDialog(RecordDialog, "RecordDialog");
        t.pcList = this.obj.persons
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(RecordItem, "RecordItem");
var RecordUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RecordSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(RecordUI, "RecordUI");
var RecordXItem = function (t) {
    function e(e) {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RecordXItemSkin", this.touchChildren = !0, this.obj = e
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.onUpdate = function () {
        if (this.obj && !(this.obj.length <= 0)) {
            var t = this.obj[0], e = this.obj[6], i = new Date(1e3 * t),
                n = i.getFullYear() + "-" + (i.getMonth() + 1) + "-" + i.getDate() + " " + i.getHours() + ":" + i.getMinutes() + ":" + i.getSeconds();
            this._time.text = "" + n;
            for (var a = "", s = StackManager.findDialog(RecordDialog, "RecordDialog"), o = s.pcList, r = 2; 5 >= r; r++) {
                var h = this.obj[r], c = r - 2, l = o[c], u = l.nick;
                0 > h ? a += u + "： " + h : 0 == h ? a += u + "： " + h : h > 0 && (a += u + "：+" + h), 3 == r ? a += "\n" : (4 == r || 2 == r) && (a += "　　　　")
            }
            this._name.text = a, this._rank.text = "第" + e + "局"
        }
    }, n.onClick = function () {
        EffectUtils.showTips("即将开放", 5)
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this), this.btn = new mui.EButton("btn_blue", "回  放"), this.addChild(this.btn), this.btn.y = 26, this.btn.x = 655, this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this)
    }, e
}(eui.Component);
egret.registerClass(RecordXItem, "RecordXItem");
var RoleInfoUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RoleInfoSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(RoleInfoUI, "RoleInfoUI");
var RuleUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "RuleSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(RuleUI, "RuleUI");
var SettingUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "SettingSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
        this._btn_sound = new eui.Image, this._btn_sound.source = "sound_open_btn", this._btn_sound.x = 500, this._btn_sound.y = 136, this.addChild(this._btn_sound)
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(SettingUI, "SettingUI");
var ShopItem = function (t) {
    function e(e) {
        t.call(this), this.skinName = "ShopItemSkin", this.touchChildren = !0, this.data = e, this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this), this.data && (this._icon.source = this.data.icon, this._labels.text = "￥ " + this.data.rmb, this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this))
    }, n.onClick = function () {
    }, n.PlayStopEff = function (t) {
        void 0 === t && (t = !0)
    }, n.onEff = function (t) {
    }, e
}(eui.Component);
egret.registerClass(ShopItem, "ShopItem");
var ShopUI = function (t) {
    function e() {
        t.call(this), this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "ShopSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, e
}(eui.Component);
egret.registerClass(ShopUI, "ShopUI");
var AppEvent = function (t) {
    function e(e, i) {
        void 0 === i && (i = null), t.call(this, e, !1, !1, i), this.eventData = i
    }

    __extends(e, t);
    var i = (__define, e);
    i.prototype;
    return e.HTTP_DATA_EVENT = "HTTP_DATA_EVENT", e.LOGIN_SUCC = "LOGIN_SUCC", e.ADDUSER_SUCC = "ADDUSER_SUCC", e.SOCKET_ROOM_DATA_EVENT = "SOCKET_ROOM_DATA_EVENT", e.HEAD_ICON_LOAD_SUCC = "HEAD_ICON_LOAD_SUCC", e.GET_USER_RECORD_SUCC = "GET_USER_RECORD_SUCC", e
}(egret.Event);
egret.registerClass(AppEvent, "AppEvent");
var EventType = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.Trigger_Prompt = "Trigger_Prompt", t.Trigger_Play_Point = "Trigger_Play_Point", t.Trigger_Play_Tips = "Trigger_Play_Tips", t
}();
egret.registerClass(EventType, "EventType");
var GameDispatcher = function () {
    function t() {
        this.callbacks = {}
    }

    var e = __define, i = t, n = i.prototype;
    return e(t, "ins", function () {
        return !this._ins && (this._ins = new t), this._ins
    }), n.addEventListener = function (t, e, i) {
        if (!this.checkCallbackIsExist(t, e, i)) {
            var n = this.getCallbackList(t);
            n.push({callback: e, thisObj: i})
        }
    }, n.delEventListener = function (t, e, i) {
        if (this.checkCallbackIsExist(t, e, i)) for (var n, a = this.getCallbackList(t), s = 0; s < a.length; s++) if (n = a[s], n.callback == e && n.thisObj == i) {
            a.splice(s, 1);
            break
        }
    }, n.dispatchEvent = function (t, e) {
        for (var i, n = this.getCallbackList(t), a = 0; a < n.length; a++) i = n[a], i.callback.call(i.thisObj, e)
    }, n.getCallbackList = function (t) {
        var e = [];
        return this.callbacks.hasOwnProperty(t) ? e = this.callbacks[t] : this.callbacks[t] = e, e
    }, n.checkCallbackIsExist = function (t, e, i) {
        for (var n, a = !1, s = this.getCallbackList(t), o = 0; o < s.length; o++) if (n = s[o], n.callback == e && n.thisObj == i) {
            a = !0;
            break
        }
        return a
    }, t
}();
egret.registerClass(GameDispatcher, "GameDispatcher");
var BaseUpdate = function () {
    function t() {
        this.autoRemove = !1, this.stop = !1, this.completed = !1
    }

    var e = (__define, t), i = e.prototype;
    return i.update = function (t, e) {
    }, t
}();
egret.registerClass(BaseUpdate, "BaseUpdate", ["IUpdate"]);
var SpriteSheet = egret.SpriteSheet, Card = function () {
    function t() {
        this.pos = new egret.Point, this.reset(), this.view.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }

    var e = (__define, t), i = e.prototype;
    return t.bindGame = function (e) {
        t.game = e
    }, t.getDirObj = function (t) {
    }, t.getCard = function () {
        return t.pool.length ? t.pool.shift() : new t
    }, t.returnCard = function (e) {
        e.reset(), t.pool.push(e)
    }, t.create = function (e, i, n) {
        void 0 === e && (e = 0), void 0 === i && (i = 0), void 0 === n && (n = ""), t.sheet || (t.sheet = RES.getRes("card"));
        var a = t.getCard();
        return a.dir = e, a.state = i, a.style = n, a.reDraw(), a
    }, i.activateTouch = function (t) {
        this.view.touchEnabled = t
    }, i.onTouchTap = function () {
        this.activate && t.game.onClickCard(this)
    }, i.posView = function (t, e) {
        this.pos.x = t, this.pos.y = e, this.viewByPos()
    }, i.moveUp = function () {
        this.upView(this.pos.x, this.pos.y - 20)
    }, i.viewByPos = function () {
        this.upView(this.pos.x, this.pos.y)
    }, i.upView = function (t, e) {
        this.view.x = t, this.view.y = e
    }, i.changeState = function (t) {
        t != this.state && (this.state = t, this.reDraw())
    }, i.reDraw = function () {
        var t = 3 == this.dir ? 1 : this.dir, e = 3 == this.state ? 2 : this.state;
        this.bg_res = "M_" + t + "_" + e, this.up_res = "W_7", this.hSpacing = this.pRule.spacH, this.vSpacing = this.pRule.spacV, this.up_visible = this.pRule.showTop, this.view.reDraw()
    }, i.hide = function () {
        this.view.visible = !1
    }, i.show = function () {
        this.view.visible = !0, this.moveUp(), egret.Tween.get(this.view).to({y: this.pos.y}, 100).call(this.activated, this)
    }, i["catch"] = function () {
        this.upView(this.pos.x + 50, this.pos.y - 100), this.view.rotation = 90, egret.Tween.get(this.view).to({
            rotation: 0,
            x: this.pos.x,
            y: this.pos.y
        }, 200).call(this.activated, this)
    }, i.activated = function () {
        this.activate = !0
    }, i.reset = function () {
        this.view && (this.view.anchorOffsetX = this.view.anchorOffsetY = 0, this.view.scaleX = this.view.scaleY = 1, egret.Tween.removeTweens(this.view)), this.up_visible = !1, this.activate = !1
    }, t.pool = [], t
}();
egret.registerClass(Card, "Card", ["IShow"]);
var CardView = function (t) {
    function e() {
        t.call(this), this.bg = new egret.Bitmap, this.addChild(this.bg), this.top = new egret.DisplayObjectContainer, this.icon = new egret.Bitmap, this.countText = new egret.TextField, this.top.addChild(this.icon), this.top.addChild(this.countText), this.countText.bold = !0, this.countText.background = !0, this.countText.backgroundColor = 0, this.countText.textColor = 9354569, this.countText.y = 70, this.addChild(this.top), this.pos = new egret.Point, this.hotArea = new egret.Shape, this.hotArea.graphics.beginFill(0, 0), this.hotArea.graphics.drawRect(0, 0, 64, 120), this.addChild(this.hotArea), this.hotArea.anchorOffsetX = GSConfig.posRule[1][1].bgosX, this.hotArea.anchorOffsetY = GSConfig.posRule[1][1].bgosY, this.unactivate()
    }

    __extends(e, t);
    var i = __define, n = e, a = n.prototype;
    return e.create = function (t, i, n, a) {
        void 0 === n && (n = null), void 0 === a && (a = 1);
        var s = e.getCardView();
        return s.dir = t, s.style = i, s.pai = n, s.count = a, s.reDraw(), s
    }, e.createThreeGroup = function (t, i, n) {
        void 0 === n && (n = null), null == n && (n = []);
        for (var a = [], s = 0; 3 > s; s++) {
            var o = GSConfig.getPosByIndex(t, i, s), r = e.create(t, i, n[s]);
            r.posView(o.x, o.y), a.push(r)
        }
        return a
    }, e.getCardView = function () {
        return e.pool.length ? e.pool.shift() : new e
    }, e.returnCardView = function (t) {
        t.reset(), e.pool.push(t)
    }, a.activate = function () {
        this.touchEnabled = !0, this.hotArea.visible = !0
    }, a.unactivate = function () {
        this.touchEnabled = !1, this.hotArea.visible = !1, this.enabled = !0
    }, i(a, "enabled", void 0, function (t) {
        this.bg.alpha = t ? 1 : .8
    }), a.resetPos = function () {
        this.x = this.pos.x, this.y = this.pos.y
    }, a.addClick = function (t, e) {
        this.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.addEventListener(egret.TouchEvent.TOUCH_TAP, t, e)
    }, a.posView = function (t, e) {
        this.pos.x = t, this.pos.y = e, this.x = t, this.y = e
    }, a.changeStyle = function (t, e) {
        void 0 === e && (e = !0), this.style = t, this.count = 1, e && this.reDraw()
    }, a.changePai = function (t, e) {
        void 0 === e && (e = !0), this.pai = t, this.count = 1, e && this.reDraw()
    }, a.showD = function () {
        this.d = new egret.Shape, this.d.graphics.beginFill(16711680), this.d.graphics.drawRect(0, 0, 10, 10), this.addChild(this.d)
    }, a.reset = function () {
        this.posView(0, 0), this.count = 1, this.index = -1, this.scaleX = this.scaleY = 1, this.visible = !0, this.unactivate(), egret.Tween.removeTweens(this)
    }, a.reDraw = function () {
        var t = 10 * this.dir + this.style;
        switch (t) {
            case 11:
            case 12:
            case 13:
                break;
            case 14:
                t = 33;
                break;
            case 15:
                t = 12;
                break;
            case 24:
                t = 23;
                break;
            case 34:
                t = 33;
                break;
            case 41:
                t = 21;
                break;
            case 42:
                t = 22;
                break;
            case 43:
                t = 23;
                break;
            case 44:
                t = 23
        }
        var e = "M_" + t;
        if (this.bg.texture = GameRes.getCard(e), this.count > 1 ? this.countText.text = "x" + this.count : this.countText.text = "", 2 == this.style || 5 == this.style) this.icon.texture = null, this.countText.text = ""; else if (null != this.pai) {
            var i = "Z_" + (10 * this.pai.type + this.pai.number);
            this.icon.texture = GameRes.getCard(i)
        } else this.countText.text = "", this.icon.texture = null;
        this.pRule = GSConfig.posRule[this.dir][this.style], this.bg.anchorOffsetX = this.pRule.bgosX, this.bg.anchorOffsetY = this.pRule.bgosY, this.bg.scaleX = this.pRule.bgScaleX, this.bg.scaleY = this.pRule.bgScaleY, this.top.anchorOffsetX = this.pRule.toposX, this.top.anchorOffsetY = this.pRule.toposY, this.top.rotation = this.pRule.topRot, this.top.scaleX = this.pRule.topScaleX, this.top.scaleY = this.pRule.topScaleY
    }, e.pool = [], e
}(egret.DisplayObjectContainer);
egret.registerClass(CardView, "CardView");
var GSData = function () {
    function t() {
        this.game_state = 1, this.roomPlayerMap = {}, this.roomPass = 0, this.dir2Pos = {}, this.pos2Dir = {}, this.allPais = {}, this.zhuangFlag = 0, this.roomOwnFlag = 0, this.readyFlag = 0, this.roomOwnDir = 0, this.rebackStatus = 0, this.isTing = !1, this.clear()
    }

    var e = __define, i = t, n = i.prototype;
    return e(t, "i", function () {
        return t._i || (t._i = new t)
    }), n.clear = function () {
        this.roundReset(), this.game_state = 1, this.firstInRoom = !1, this.cur_round = 1, this.roomPlayerMap = {}, this.roundStarted = !1, this.readyFlag = 0, this.gangCurs = [0, 0, 0, 0, 0], this.rules = "", this.start_invite_Flag = 0, this.isTing = !1
    }, n.roundReset = function () {
        this.roundStartHasFunction = !1, this.game_state = 2, this.gang_end = !1, this.isZhuangPush = !1, this.turnDir = 0, this.isShowFunc = !1, this.zhuangFlag = 0, this.fen = !1, this.allPais[1] = {
            handPais: null,
            catchPai: null,
            funcPais: [],
            poolPais: []
        }, this.allPais[2] = {
            handPais: null,
            catchPai: null,
            funcPais: [],
            poolPais: []
        }, this.allPais[3] = {
            handPais: null,
            catchPai: null,
            funcPais: [],
            poolPais: []
        }, this.allPais[4] = {
            handPais: null,
            catchPai: null,
            funcPais: [],
            poolPais: []
        }, this.funcSelects = [], this.isTing = !1
    }, n.sortHandPai = function (t) {
        void 0 === t && (t = null), null == t && (t = this.allPais[1].handPais), t.sort(function (t, e) {
            var i = 10 * t.type + t.number, n = 10 * e.type + e.number;
            return i > n ? 1 : i == n ? 0 : n > i ? -1 : void 0
        })
    }, n.setHandPais = function (t, e) {
        this.allPais[t].handPais = e
    }, n.getHandPais = function (t) {
        return this.allPais[t].handPais
    }, n.pushFuncPais = function (t, e) {
        var i = this.getFuncPais(t);
        i.push(e)
    }, n.getFuncPais = function (t) {
        return this.allPais[t].funcPais
    }, n.setPoolPais = function (t, e) {
        this.allPais[t].poolPais = e
    }, n.getPoolPais = function (t) {
        return this.allPais[t].poolPais
    }, n.getCatchPai = function (t) {
        return this.allPais[t].catchPai
    }, n.setCatchPai = function (t, e) {
        this.allPais[t].catchPai = e
    }, n.removeOtherHandPai = function (t, e) {
        var i = this.getHandPais(t);
        i.length -= e
    }, n.removeHandPai = function (t, e) {
        void 0 === e && (e = null);
        var i = this.getHandPais(t);
        if (1 == t) {
            console.log("删除自己手牌:", e.type, e.number);
            for (var n = 0; n < i.length; n++) {
                var a = i[n];
                if (a.type == e.type && a.number == e.number) {
                    i.splice(n, 1), this.sortHandPai();
                    break
                }
            }
        } else i.length--;
        GSController.i.gsView.updateAllCount(this)
    }, n.removeOwnHandPais = function (t) {
        for (var e = 0; e < t.length; e++) console.log("删除自己多张手牌:", t[e].type, t[e].number);
        for (var i = this.getHandPais(1); t.length;) for (var n = t.shift(), e = 0; e < i.length; e++) {
            var a = i[e];
            if (n.type == a.type && n.number == a.number) {
                i.splice(e, 1);
                break
            }
        }
        this.sortHandPai(), GSController.i.gsView.updateAllCount(this)
    }, n.pushStartHandPai = function () {
        var t = this.zhuangDir, e = this.getCatchPai(t);
        this.pushHandPai(t, e), GSController.i.gsView.updateAllCount(this)
    }, n.pushHandPai = function (t, e) {
        var i = this.getHandPais(t);
        i.push(e), GSController.i.gsView.updateAllCount(this)
    }, n.pushPoolPai = function (t) {
        var e = t.dir;
        e == this.zhuangDir && (this.isZhuangPush = !0);
        var i = this.getPoolPais(e);
        t.poolIndex = i.length, i.push(t)
    }, n.popPoolPai = function (t) {
        var e = this.getPoolPais(t);
        e.length--
    }, n.getSexByPos = function (t) {
        return "1" == this.getRoomPlayerByPos(t).sex ? 1 : 0
    }, n.removePengFunc = function (t, e) {
        for (var i = this.getFuncPais(t), n = 0; n < i.length; n++) {
            var a = i[n];
            if (2 == a.action) for (var s = a.pais, o = 0; o < s.length; o++) {
                var r = s[o];
                if (r.pai[0].type == e.type && r.pai[0].number == e.number) return s.splice(o, 1), !0
            }
        }
        return !1
    }, n.addFuncPai = function (t, e, i, n, a, s) {
        void 0 === a && (a = 0), void 0 === s && (s = null);
        var o = this.getFuncPais(e);
        null != s && (s = [1, 1, 1]), 1 == i && n[0].number > n[2].number && n.reverse();
        for (var r = {pai: n, number: a, ever: s}, h = 0; h < o.length; h++) {
            var c = o[h];
            if (c.action == i) return void c.pais.push(r)
        }
        o.push({sort: t, action: i, pais: [r]})
    }, n.getPai = function (t, e, i) {
        void 0 === i && (i = 0);
        for (var n = this.getFuncPais(t), a = 0; a < n.length; a++) {
            var s = n[a];
            if (s.action == e) for (var o = 0; o < s.pais.length; o++) {
                var r = s.pais[o];
                if (!(i > 0)) return r;
                if (i == r.number) return r
            }
        }
        return null
    }, n.getFuncSelectByIndex = function (t) {
        for (var e = 0; e < this.funcSelects.length; e++) if (t == this.funcSelects[e].index) return this.funcSelects[e]
    }, n.getResultPersonLeft = function (t) {
        for (var e = this.getPos(t), i = 0; i < this.result.person.length; i++) {
            var n = this.result.person[i];
            if (n.pos == e) return n.left
        }
    }, n.getDir = function (t) {
        return this.pos2Dir[t]
    }, n.getPos = function (t) {
        return this.dir2Pos[t]
    }, n.getRoomPlayerByPos = function (t) {
        return this.roomPlayers[t]
    }, n.getRoomPlayerByDir = function (t) {
        return this.getRoomPlayerByPos(this.getPos(t))
    }, t
}();
egret.registerClass(GSData, "GSData");
var GSDataProxy = function () {
    function t() {
        this.gData = GSData.i
    }

    var e = __define, i = t, n = i.prototype;
    return e(t, "i", function () {
        return t._i || (t._i = new t)
    }), n.S2C_RebackData = function (t) {
        switch (this.gData.rebackData = t, this.gData.roomID = t.roomid, this.gData.baoPai = t.bao, this.gData.turnPos = t.turn, this.gData.zhuangPos = t.zhuang, this.gData.leftCount = t.dui_num, this.gData.cur_round = t.cur_round, this.gData.max_round = t.max_round, t.step > 4 && (this.gData.isZhuangPush = !0, this.gData.gang_end = !0), t.status) {
            case"wait_for_join":
                this.gData.rebackStatus = 1;
                break;
            case"wait_for_play":
            case"wait_for_deal":
            case"wait_for_resume":
            case"wait_for_dismiss":
            case"wait_for_wake":
                this.gData.rebackStatus = 3;
                break;
            case"wait_for_continue":
                this.gData.rebackStatus = 2, this.gData.roundStarted = !0
        }
    }, n.parseRebackPai = function () {
        this.gData.turnDir = this.gData.getDir(this.gData.turnPos), this.gData.zhuangDir = this.gData.getDir(this.gData.zhuangPos), this.gData.zhuangFlag = 1 << this.gData.zhuangDir;
        for (var t = this.gData.rebackData.person, e = 0; e < t.length; e++) {
            var i = t[e], n = i.pos, a = this.gData.getDir(n), s = i.men, o = i.shou, r = i.wai, h = i.cur,
                c = i.isTing;
            1 == a && (this.gData.isTing = c);
            var l = GSController.i.gsView.headViews[a];
            if (l.tingVisible(c), GSData.i.gangCurs[a] = h, Object.keys(s).length > 0) {
                this.gData.allPais[a].funcPais = [];
                var u = this.gData.getFuncPais(a);
                if (s[1]) for (var d = 0; d < s[1].length; d++) this.gData.addFuncPai(4, a, 1, s[1][d]);
                if (s[2]) for (var d = 0; d < s[2].length; d++) this.gData.addFuncPai(5, a, 2, s[2][d]);
                if (s[22]) for (var g = 0; g < s[22].length; g++) {
                    var f = s[22][g], p = f[0].number, m = f.slice(-3);
                    f.length -= 3;
                    for (var v = [1, 1, 1], d = 0; d < f.length; d++) v[f[d].type - 1]++;
                    u.push({sort: 3, action: 22, pais: [{pai: m, number: p, ever: v}]})
                }
                if (s[24]) for (var d = 0; d < s[24].length; d++) this.gData.addFuncPai(1, a, 24, s[24][d]);
                if (s[25]) for (var d = 0; d < s[25].length; d++) this.gData.addFuncPai(2, a, 25, s[25][d]);
                if (s[26]) {
                    var m = s[26].slice(-3);
                    s[26].length -= 3;
                    for (var v = [1, 1, 1], d = 0; d < s[26].length; d++) v[s[26][d].number - 1]++;
                    u.push({sort: 0, action: 26, pais: [{pai: m, number: 0, ever: v}]})
                }
            }
            if (o > 0) this.gData.setHandPais(a, new Array(o)); else {
                if (GSConfig.handLens[o.length]) {
                    var _ = o.pop();
                    this.gData.sortHandPai(o), o.push(_)
                } else this.gData.sortHandPai(o);
                this.gData.setHandPais(1, o)
            }
            r.length > 0 && (r.reverse(), this.gData.setPoolPais(a, r))
        }
    }, n.S2C_DeletePai = function (t, e) {
        var i = this.gData.getDir(t);
        this.gData.removeHandPai(i, e), GSController.i.updateMJView(i)
    }, n.S2C_Function = function (t) {
        if (this.gData.isShowFunc = !0, this.gData.funcSelects = [{index: 0, action: 0, pai: null}], t[1]) {
            for (var e = t[1], i = [], n = 0; n < e.length; n += 3) i.push({action: 1, pai: e.slice(n, n + 3)});
            this.gData.funcSelects.push({index: 1, group: i})
        }
        if (t[2] && this.gData.funcSelects.push({
            index: 2,
            action: 2,
            pai: t[2]
        }), t[22] || t[23] || t[24] || t[25] || t[26]) {
            var i = [];
            if (t[24]) for (var e = t[24], n = 0; n < e.length; n += 4) i.push({action: 24, pai: e.slice(n, n + 4)});
            if (t[25]) for (var e = t[25], n = 0; n < e.length; n++) i.push({action: 25, pai: e[n]});
            this.gData.funcSelects.push({index: 3, group: i})
        }
        if (t[27] || t[28]) {
            var i = [];
            if (t[27]) for (var e = t[27], a = {}, n = 0; n < e.length; n++) {
                var s = e[n].type << 8 | e[n].number;
                a[s] || (i.push({action: 27, pai: e[n]}), a[s] = !0)
            }
            if (t[28]) for (var a = {}, e = t[28], n = 0; n < e.length; n++) {
                var s = e[n].type << 8 | e[n].number;
                a[s] || (i.push({action: 28, pai: e[n]}), a[s] = !0)
            }
            this.gData.funcSelects.push({index: 4, group: i})
        }
        t[4] && this.gData.funcSelects.push({
            index: 5,
            action: 4,
            pai: t[4]
        }), t[99] && this.gData.funcSelects.push({
            index: 6,
            action: 99,
            pai: t[99]
        }), GSData.i.roundStartHasFunction = !0, GSController.i.showFuncSelectMenu()
    }, n.S2C_UserTing = function (t) {
        var e = this.gData.getDir(t.pos);
        GSController.i.playEffect(e, t.action);
        var i = GSController.i.gsView.headViews[e];
        i.tingVisible(!0)
    }, n.S2C_TurnDir = function (t, e, i) {
        void 0 === i && (i = null), this.gData.turnDir = this.gData.getDir(t), this.gData.leftCount = e, null != i && (this.gData.gang_end = !0), 1 != this.gData.turnDir && (this.gData.pushHandPai(this.gData.turnDir, null), GSController.i.catchCard(this.gData.turnDir), console.log("轮到 " + this.gData.turnDir + " 抓牌")), GSController.i.setArrowDir(this.gData.turnDir), GSController.i.updateCenterInfo()
    }, n.S2C_OwnCatch = function (t, e, i) {
        void 0 === i && (i = !1), console.log("同步己方抓牌", t), this.gData.setCatchPai(1, t), this.gData.pushHandPai(1, t), this.gData.leftCount = e, this.gData.turnDir = i ? 0 : 1, i && (console.log("尾局分张"), GSData.i.game_state = -2), GSController.i.catchCard(1), GSController.i.updateCenterInfo(), GameSound.PlaySound("sound_card_hover")
    }, n.S2C_Bao = function (t) {
        console.log("换宝!"), this.gData.baoPai = t.bao, this.gData.leftCount = t.dui_num, GSController.i.playBao()
    }, n.S2C_FuncResult = function (t, e, i, n, a) {
        void 0 === a && (a = null), this.gData.isShowFunc = !1;
        var s = this.gData.getDir(i);
        this.gData.turnDir = s;
        var o = null;
        switch (t) {
            case 1:
                GameSound.PlaySound("chi_" + this.gData.getSexByPos(i)), this.gData.addFuncPai(5, s, t, e), 1 == s ? this.gData.removeOwnHandPais([n[0], n[1]]) : this.gData.removeOtherHandPai(s, 2), o = n[2], GameSound.PlaySound("sound_down");
                break;
            case 2:
                GameSound.PlaySound("cha_" + this.gData.getSexByPos(i)), this.gData.addFuncPai(4, s, t, e), 1 == s ? this.gData.removeOwnHandPais([e[0], e[2]]) : this.gData.removeOtherHandPai(s, 2), o = e[1], GameSound.PlaySound("sound_down");
                break;
            case 22:
                1 == e[0].number ? GameSound.PlaySound("yaogang_" + this.gData.getSexByPos(i)) : GameSound.PlaySound("jiugang_" + this.gData.getSexByPos(i)), this.gData.addFuncPai(3, s, t, e, e[0].number, !0), 1 == s ? this.gData.removeOwnHandPais([e[0], e[1], e[2]]) : this.gData.removeOtherHandPai(s, 3), GameSound.PlaySound("sound_down");
                break;
            case 23:
                console.log("旋风杠未解析");
                break;
            case 24:
                GameSound.PlaySound("gang_" + this.gData.getSexByPos(i)), this.gData.addFuncPai(1, s, t, e), 1 == s ? this.gData.removeOwnHandPais([e[0], e[1], e[2], e[3]]) : this.gData.removeOtherHandPai(s, 4), GameSound.PlaySound("sound_down");
                break;
            case 25:
                GameSound.PlaySound("gang_" + this.gData.getSexByPos(i));
                var r = e[0];
                this.gData.addFuncPai(2, s, t, e);
                var h = this.gData.removePengFunc(s, r) ? 1 : 3;
                1 == s ? 1 == h ? this.gData.removeOwnHandPais([r]) : this.gData.removeOwnHandPais([r, r, r]) : this.gData.removeOtherHandPai(s, h), 3 == h && (o = r), GameSound.PlaySound("sound_down");
                break;
            case 26:
                GameSound.PlaySound("xuanfenggang_" + this.gData.getSexByPos(i)), this.gData.addFuncPai(0, s, t, e, 0, !0), 1 == s ? this.gData.removeOwnHandPais([e[0], e[1], e[2]]) : this.gData.removeOtherHandPai(s, 3), GameSound.PlaySound("sound_down");
                break;
            case 27:
                GameSound.PlaySound("bugang_" + this.gData.getSexByPos(i)), e.length -= 3;
                for (var c = this.gData.getPai(s, 22, e[0].number), l = [1, 1, 1], u = 0; u < e.length; u++) l[e[u].type - 1]++;
                c.ever = l, 1 == s ? this.gData.removeOwnHandPais([e[0]]) : this.gData.removeOtherHandPai(s, 1), GameSound.PlaySound("sound_down");
                break;
            case 28:
                GameSound.PlaySound("bugang_" + this.gData.getSexByPos(i)), e.length -= 3;
                for (var c = this.gData.getPai(s, 26), l = [1, 1, 1], u = 0; u < e.length; u++) l[e[u].number - 1]++;
                c.ever = l, 1 == s ? this.gData.removeOwnHandPais([e[0]]) : this.gData.removeOtherHandPai(s, 1), GameSound.PlaySound("sound_down");
                break;
            case 4:
                break;
            default:
                console.log("未解析的功能菜单", t)
        }
        if (null != a) {
            for (var d in a) {
                var i = +d;
                this.gData.gangCurs[this.gData.getDir(i)] = a[d]
            }
            GSController.i.updateGangCur()
        }
        if (o && o.pos > 0) {
            var g = GSData.i.getDir(o.pos);
            this.gData.popPoolPai(g), GSController.i.removePoolCard(g)
        }
        GSController.i.setArrowDir(s), GSController.i.updateMJView(s), GSController.i.playEffect(s, t), 1 == s ? GSController.i.playTimeEffect(!0, !0) : GSController.i.playTimeEffect(!0, !1)
    }, n.S2C_PoolPai = function (t) {
        GameSound.PlaySound(t.data.type + "_" + t.data.number + "_" + this.gData.getSexByPos(t.data.pos)), GameSound.PlaySound("sound_throw"), this.gData.currPoolPai = t.data, this.gData.currPoolPai.dir = this.gData.getDir(t.data.pos), this.gData.pushPoolPai(this.gData.currPoolPai), this.gData.removeHandPai(this.gData.currPoolPai.dir, this.gData.currPoolPai), console.log("出牌人的方位:", this.gData.currPoolPai.dir), GSController.i.pushPoolCard(this.gData.currPoolPai.dir, this.gData.currPoolPai)
    }, n.S2C_FinalResult = function (t) {
        if (this.gData.result = t, 1 != this.gData.roomType) {
            UserDataModel.getInstance().currency += t.gain;
            var e = SceneManager.find("GameMainScene");
            e && e.update()
        }
        -2 == this.gData.game_state ? egret.setTimeout(this.delay_Final, this, 1200) : this.delay_Final();
        for (var i = 1; i <= GSConfig.playerCount; i++) {
            var n = GSController.i.gsView.headViews[i];
            n.tingVisible(!1)
        }
    }, n.delay_Final = function () {
        this.gData.game_state = 4, this.gData.roundStarted = !0;
        var t = this.gData.result.hupai;
        if (0 == t) this.gData.resultType = 3; else {
            this.gData.result.hupaiPos = t.pos_hu;
            var e = -1 != t.pos_hu.indexOf(this.gData.getPos(1) + "") ? 1 : 0;
            switch (1 == e ? this.gData.resultType = 1 : this.gData.resultType = 2, t.type) {
                case 17:
                    this.gData.result.dianPaoPos = t.pos, GameSound.PlaySound("dianpao_" + this.gData.getSexByPos(Number(t.pos_hu[0])));
                    break;
                case 29:
                    GameSound.PlaySound("zimo_" + this.gData.getSexByPos(Number(t.pos_hu[0])));
                    break;
                case 13:
                    GameSound.PlaySound("bao_" + this.gData.getSexByPos(Number(t.pos_hu[0])));
                    break;
                case 7:
                    GameSound.PlaySound("zimo_" + this.gData.getSexByPos(Number(t.pos_hu[0])))
            }
            for (var i = 0; 4 > i; i++) {
                var n = this.gData.result.person[i].left;
                this.gData.sortHandPai(n)
            }
            GSController.i.playEffect(e, 99)
        }
        GSController.i.hupaiShow()
    }, n.S2C_ContinueGame = function (t) {
        var e = this.gData.getDir(t.pos);
        this.gData.readyFlag |= 1 << e, GSController.i.visibleReadyIcon(), 1 == e && GSController.i.showStateView()
    }, n.S2C_RoomPlayers = function (t, e, i) {
        if (void 0 === i && (i = 1), "" == this.gData.rules) for (var n = 0; n < t.length; n++) this.gData.rules += GameConfig.rules[t[n]] + " ";
        for (var n = 0; n < e.length; n++) {
            var a = new RoomPlayer(e[n]);
            if (+a.uid == +i) switch (a.status) {
                case"leave":
                    EffectUtils.showTips(a.nick + " 离开了房间！", 1), GameSound.PlaySound("sound_other_player_leave");
                    break;
                case"offline":
                    EffectUtils.showTips(a.nick + " 离线了！", 1), GameSound.PlaySound("sound_other_player_leave");
                    break;
                case"online":
                    GameSound.PlaySound("sound_other_player_enter"), GSData.i.roomPlayerMap[a.uid] ? EffectUtils.showTips(a.nick + " 回来了！", 1) : EffectUtils.showTips(a.nick + " 加入了游戏！", 1)
            }
            if (this.gData.roomPlayerMap[a.uid] = a, a.uid == UserDataModel.getInstance().uid) {
                this.gData.ownPos = a.pos;
                var s = this.gData.ownPos, o = 1 + (this.gData.ownPos + 0) % 4, r = 1 + (this.gData.ownPos + 1) % 4,
                    h = 1 + (this.gData.ownPos + 2) % 4;
                this.gData.dir2Pos[1] = s, this.gData.dir2Pos[2] = o, this.gData.dir2Pos[3] = r, this.gData.dir2Pos[4] = h, this.gData.pos2Dir[s] = 1, this.gData.pos2Dir[o] = 2, this.gData.pos2Dir[r] = 3, this.gData.pos2Dir[h] = 4, this.gData.firstInRoom = !0
            }
            a.dir = this.gData.getDir(a.pos)
        }
        this.gData.roomPlayers = [];
        var c = null;
        for (var l in this.gData.roomPlayerMap) {
            var u = this.gData.roomPlayerMap[l], d = this.gData.getDir(u.pos);
            switch (u.dir || (u.dir = d), u.status) {
                case"leave":
                    this.gData.roomPlayers[u.pos] = null, c = l, 0 == this.gData.roundStarted && 1 == (this.gData.readyFlag >> d & 1) && (this.gData.readyFlag ^= 1 << d);
                    break;
                case"offline":
                case"online":
                    0 == this.gData.roundStarted && (this.gData.readyFlag |= 1 << d), this.gData.roomPlayers[u.pos] = u
            }
        }
        delete this.gData.roomPlayerMap[c], this.gData.roomOwnDir = this.gData.getDir(1), this.gData.roomOwnFlag = 1 << this.gData.roomOwnDir, this.gData.firstInRoom && (this.gData.firstInRoom = !1, GSController.i.startView()), this.gData.rebackData && (this.parseReback(), this.gData.rebackData = null), GSController.i.updateRoom(), Weixin.onMenuShareAppMessage(GSData.i.roomID + ""), Weixin.onMenuShareTimeline(GSData.i.roomID + "")
    }, n.parseReback = function () {
        switch (this.gData.rebackStatus) {
            case 1:
                this.gData.game_state = 1;
                break;
            case 3:
                this.gData.game_state = 3, this.parseRebackPai(), GSController.i.rebackGame(), 1 == this.gData.turnDir && SocketClientManager.getInstance().checkSelfSpecial();
                break;
            case 2:
                this.gData.game_state = 2;
                var t = this.gData.rebackData["continue"];
                if (t.length > 0) for (var e = 0; e < t.length; e++) {
                    var i = t[e], n = this.gData.getDir(i);
                    this.gData.readyFlag |= 1 << n
                }
                0 == (this.gData.readyFlag >> 1 & 1) && (GSController.i.scene.readyButton.visible = !0), GSController.i.startView()
        }
    }, n.checkOwnStart = function () {
    }, n.S2C_OwnCardInfo = function (t) {
        var e = t.data.pai.length;
        if (console.log("开局,牌长度:", t.data.pai.length), this.gData.baoPai = t.data.bao, this.gData.cur_round = t.data.cur_round, this.gData.max_round = t.data.max_round, this.gData.allPais[2].handPais = new Array(13), this.gData.allPais[3].handPais = new Array(13), this.gData.allPais[4].handPais = new Array(13), e >= 13) {
            this.gData.allPais[1].handPais = t.data.pai, 14 == t.data.pai.length && (this.gData.allPais[1].catchPai = this.gData.allPais[1].handPais.shift()), this.gData.zhuangPos = t.data.zhuang, this.gData.turnDir = this.gData.getDir(t.data.zhuang), this.gData.zhuangDir = this.gData.getDir(t.data.zhuang), this.gData.zhuangFlag = 1 << this.gData.zhuangDir, this.gData.leftCount = t.data.dui_num;
            for (var i in t.data.cur) {
                var n = +i;
                GSData.i.gangCurs[GSData.i.getDir(n)] = t.data.cur[i]
            }
            GSData.i.game_state = 3, GSController.i.startGame(), GSController.i.gsView.updateAllCount(this.gData)
        }
    }, n.S2C_DissRoom = function (t) {
        if (t) {
            var e = t.vote, i = +t.timestamp, n = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
            if (n) {
                Heart.getInstance().dissolutionTime = i + 300 - Date.now() / 1e3, console.log(i + 300, Date.now() / 1e3);
                for (var a in e) n.plist[a] = e[a];
                GameLayerManager.gameLayer().panelLayer.contains(n) ? n.refresh() : (n.show(), n.refresh())
            }
        }
    }, t
}();
egret.registerClass(GSDataProxy, "GSDataProxy");
var Person = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Person, "Person");
var RoomPlayer = function () {
    function t(t) {
        for (var e in t) this[e] = t[e]
    }

    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(RoomPlayer, "RoomPlayer");
var GameRes = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.getUI = function (e) {
        return t.uiSheet || (t.uiSheet = RES.getRes("gameui_json")), t.uiSheet.getTexture(e)
    }, t.getCard = function (e) {
        return t.cardSheet || (t.cardSheet = RES.getRes("card")), t.cardSheet.getTexture(e)
    }, t.createCenterButton = function (t, e, i, n, a, s) {
        void 0 === s && (s = "");
        var o = new egret.DisplayObjectContainer;
        o.anchorOffsetX = t, o.anchorOffsetY = e;
        var r = new mui.EButton(a, s);
        return r.x = i, r.y = n, o.addChild(r), o
    }, t
}();
egret.registerClass(GameRes, "GameRes");
var GameUtils = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.copyPai = function (t) {
        var e = CardView.getCardView();
        return e.alpha = t.alpha, e.scaleX = t.scaleX, e.scaleY = t.scaleY, e.x = t.x, e.y = t.y, e.dir = t.dir, e.style = t.style, e.pai = t.pai, e.count = t.count, e.reDraw(), e
    }, t.appear = function (t, e) {
        function i(t) {
            var e = new egret.Point;
            switch (t) {
                case 1:
                    e.x = a.group.stage.stageWidth / 2 - 2, e.y = a.group.stage.stageHeight - 200;
                    break;
                case 2:
                    e.x = a.group.stage.stageWidth - 300, e.y = a.group.stage.stageHeight / 2 - 20;
                    break;
                case 3:
                    e.x = a.group.stage.stageWidth / 2 - 2, e.y = 180;
                    break;
                case 4:
                    e.x = 300, e.y = a.group.stage.stageHeight / 2 - 20
            }
            return e
        }

        function n() {
            a.group.contains(this) && a.group.removeChild(this), a.isTweening = !1, a.disappear()
        }

        this.dir = t, this.pai = e, this.group || (this.group = new eui.Group, GameLayerManager.gameLayer().effectLayer.addChildAt(this.group, 0), this.group.width = this.group.stage.stageWidth, this.group.height = this.group.stage.stageHeight), this.group.removeChildren();
        var a = this, s = CardView.create(1, 1, e);
        s.scaleX = 1.2, s.scaleY = 1.2, s.x = i(t).x, s.y = i(t).y, this.group.addChild(s);
        var o = this.copyPai(s);
        this.group.addChild(o), this.isDisappear = !1, this.isTweening = !0, egret.Tween.get(o).to({
            scaleX: 1.8,
            scaleY: 1.8,
            alpha: 0
        }, 500).wait(500).call(n, o)
    }, t.disappear = function () {
        if (this.isDisappear && !this.isTweening && this.group && this.group.numElements) {
            var t = this.group.getElementAt(0);
            if (!t) return void this.group.removeChildren();
            var e = this;
            egret.Tween.get(t).to({alpha: 0}, 300).call(function () {
                e.group.contains(t) && e.group.removeChild(t)
            })
        }
    }, t.isTweening = !1, t.isDisappear = !1, t
}();
egret.registerClass(GameUtils, "GameUtils");
var Rule = function () {
    function t(t) {
        this.bgScaleX = 1, this.bgScaleY = 1, this.topRot = 0, this.topScaleX = 1, this.topScaleY = 1;
        for (var e in t) this[e] = t[e]
    }

    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Rule, "Rule");
var GSConfig = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.getPosByIndex = function (e, i, n) {
        var a = {}, s = t.posRule[e][i];
        switch (e) {
            case 1:
                a.x = n * s.spacH, a.y = 0;
                break;
            case 2:
                a.x = 0, a.y = 0 - n * s.spacH;
                break;
            case 3:
                a.x = 0 - n * s.spacH, a.y = 0;
                break;
            case 4:
                a.x = 0, a.y = n * s.spacH
        }
        return a
    }, t.getPoolPos = function (e, i) {
        var n = t.poolPos[e], a = t.posRule[e][4], s = i % t.poolReturnCount * a.spacH,
            o = (i / t.poolReturnCount ^ 0) * a.spacV, r = {};
        switch (e) {
            case 1:
                r.x = n.x + s, r.y = n.y - o, r.sx = r.x + 20, r.sy = r.y;
                break;
            case 2:
                r.x = n.x - o, r.y = n.y - s, r.sx = r.x, r.sy = r.y - 20;
                break;
            case 3:
                r.x = n.x - s, r.y = n.y + o, r.sx = r.x - 20, r.sy = r.y;
                break;
            case 4:
                r.x = n.x + o, r.y = n.y + s, r.sx = r.x, r.sy = r.y + 20
        }
        return r
    }, t.width = 960, t.height = 640, t.playerCount = 4, t.moveUpDis = 25, t.poolReturnCount = 10, t.headinitPos = {
        1: {
            x: 480,
            y: 476
        }, 2: {x: 827, y: 320}, 3: {x: 480, y: 110}, 4: {x: 150, y: 320}
    }, t.headTargetPos = {
        1: {x: 53, y: 460},
        2: {x: 910, y: 273},
        3: {x: 695, y: 82},
        4: {x: 53, y: 273}
    }, t.readyIconPos = {
        1: {x: 478, y: 400},
        2: {x: 750, y: 320},
        3: {x: 478, y: 230},
        4: {x: 228, y: 320}
    }, t.handPos = {
        1: {x: 60, y: 585, dx: 178, dy: 0, px: 60, py: 0},
        2: {x: 850, y: 500, dx: 0, dy: -88, px: 0, py: -45},
        3: {x: 625, y: 77, dx: -96, dy: 0, px: -35, py: 0},
        4: {x: 110, y: 124, dx: 0, dy: 90, px: 0, py: 45}
    }, t.dymnicHandPos = {1: {x: 0, y: 0}, 2: {x: 0, y: 0}, 3: {x: 0, y: 0}, 4: {x: 0, y: 0}}, t.poolPos = {
        1: {
            x: 224,
            y: 480
        }, 2: {x: 774, y: 425}, 3: {x: 620, y: 160}, 4: {x: 186, y: 167}
    }, t.catchPos = {
        1: {x: 0, y: 0, dx: 15, dy: 0},
        2: {x: 0, y: 0, dx: 0, dy: -15},
        3: {x: 0, y: 0, dx: -5, dy: 0},
        4: {x: 0, y: 0, dx: 0, dy: 15}
    }, t.diePaiPos = {
        1: {x: -113, y: -18},
        2: {x: 0, y: 38},
        3: {x: 60, y: -10},
        4: {x: 0, y: -60}
    }, t.funcPlayPos = {
        1: {x: 480, y: 480},
        2: {x: 770, y: 320},
        3: {x: 480, y: 150},
        4: {x: 190, y: 320}
    }, t.posRule = {
        1: {
            1: new Rule({bgosX: 32, bgosY: 40, toposX: 24, toposY: 20, spacH: 64, spacV: 79, showTop: !1}),
            2: new Rule({bgosX: 32, bgosY: 40, toposX: 24, toposY: 23, spacH: 56, spacV: 79, showTop: !0}),
            3: new Rule({
                bgosX: 34,
                bgosY: 44,
                toposX: 26,
                toposY: 40,
                topScaleX: .9,
                topScaleY: .9,
                spacH: 56,
                spacV: 70,
                showTop: !0
            }),
            4: new Rule({
                bgosX: 18,
                bgosY: 23,
                toposX: 23,
                toposY: 34,
                topScaleX: .5,
                topScaleY: .5,
                spacH: 30,
                spacV: 40,
                showTop: !0
            }),
            5: new Rule({
                bgosX: 32,
                bgosY: 40,
                bgScaleX: 1.1,
                bgScaleY: 1.1,
                toposX: 24,
                toposY: 23,
                spacH: 56,
                spacV: 79,
                showTop: !0
            })
        },
        2: {
            1: new Rule({bgosX: 19, bgosY: 44, bgScaleX: -1, topRot: -90, spacH: 24, spacV: 24, showTop: !1}),
            2: new Rule({bgosX: 23, bgosY: 18, bgScaleX: -1, topRot: -90, spacH: 24, spacV: 24, showTop: !1}),
            3: new Rule({
                bgosX: 23,
                bgosY: 18,
                bgScaleX: -1,
                toposX: 18,
                toposY: 37,
                topRot: -90,
                topScaleX: .4,
                topScaleY: .4,
                spacH: 25,
                spacV: 24,
                showTop: !0
            }),
            4: new Rule({
                bgosX: 23,
                bgosY: 18,
                bgScaleX: -1,
                toposX: 18,
                toposY: 37,
                topRot: -90,
                topScaleX: .4,
                topScaleY: .4,
                spacH: 25,
                spacV: 40,
                showTop: !0
            })
        },
        3: {
            1: new Rule({
                bgosX: 18,
                bgosY: 29,
                topRot: -180,
                topScaleX: .5,
                topScaleY: .5,
                spacH: 30,
                spacV: 36,
                showTop: !1
            }),
            2: new Rule({
                bgosX: 18,
                bgosY: 29,
                topRot: -180,
                topScaleX: .5,
                topScaleY: .5,
                spacH: 30,
                spacV: 36,
                showTop: !1
            }),
            3: new Rule({
                bgosX: 18,
                bgosY: 29,
                toposX: 30,
                toposY: 23,
                topRot: -180,
                topScaleX: .5,
                topScaleY: .5,
                spacH: 30,
                spacV: 34,
                showTop: !0
            }),
            4: new Rule({
                bgosX: 18,
                bgosY: 29,
                toposX: 30,
                toposY: 23,
                topRot: -180,
                topScaleX: .5,
                topScaleY: .5,
                spacH: 30,
                spacV: 39,
                showTop: !0
            })
        },
        4: {
            1: new Rule({bgosX: 19, bgosY: 44, topRot: 90, spacH: 24, spacV: 24, showTop: !1}),
            2: new Rule({bgosX: 23, bgosY: 18, topRot: 90, spacH: 24, spacV: 24, showTop: !1}),
            3: new Rule({
                bgosX: 23,
                bgosY: 18,
                toposX: 32,
                toposY: 38,
                topRot: 90,
                topScaleX: .4,
                topScaleY: .4,
                spacH: 25,
                spacV: 24,
                showTop: !0
            }),
            4: new Rule({
                bgosX: 23,
                bgosY: 18,
                toposX: 32,
                toposY: 38,
                topRot: 90,
                topScaleX: .4,
                topScaleY: .4,
                spacH: 25,
                spacV: 40,
                showTop: !0
            })
        }
    }, t.testPais = [{type: 3, number: 1}, {type: 3, number: 2}, {type: 3, number: 9}, {type: 3, number: 9}, {
        type: 1,
        number: 1
    }, {type: 1, number: 1}, {type: 1, number: 9}, {type: 1, number: 2}, {type: 2, number: 1}, {
        type: 2,
        number: 1
    }, {type: 2, number: 9}, {type: 2, number: 9}, {type: 4, number: 2}, {
        type: 4,
        number: 2
    }], t.funcSelects = [{key: 0, res: "F_guo"}, {key: 1, res: "F_chi"}, {key: 2, res: "F_peng"}, {
        key: 3,
        res: "F_gang"
    }, {key: 4, res: "F_ting"}, {
        key: 5,
        res: "F_hu"
    }], t.funcSelectRes = ["F_guo", "F_chi", "F_peng", "F_gang", "F_budan", "F_ting", "F_hu"], t.actionPVP = {
        1: 1,
        2: 2,
        4: 4,
        22: 3,
        24: 3,
        25: 3,
        26: 3,
        27: 3,
        28: 3,
        99: 5
    }, t.handLens = {2: !0, 5: !0, 8: !0, 11: !0, 14: !0}, t.huTypeMap = {
        6: "七对",
        7: "自摸",
        8: "一色三节高",
        9: "清龙",
        10: "三同刻",
        11: "三暗刻",
        12: "杠上开花",
        13: "碰碰胡",
        14: "混一色",
        15: "不求人",
        16: "缺一门",
        17: "点炮",
        18: "无字",
        20: "听牌",
        21: "四百搭",
        29: "天胡",
        30: "夹五",
        99: "胡",
        1: "四杠",
        2: "四暗刻",
        19: "三杠",
        5: "清一色"
    }, t
}();
egret.registerClass(GSConfig, "GSConfig");
var GSController = function (t) {
    function e() {
        t.call(this), this.activateCard = null, this.init()
    }

    __extends(e, t);
    var i = __define, n = e, a = n.prototype;
    return i(e, "i", function () {
        return e._i || (e._i = new e)
    }), a.initView = function () {
        var t = GameLayerManager.gameLayer().mainLayer;
        t.addChild(this.scene = new GSScene), this.gsView = this.scene.gsView, this.gsResultView = this.scene.gsResultView, this.gsView.bindInterface(TouchBehaviour.i), this.gsView.funcSelectView.bindInterface(TouchBehaviour.i), this.scene.bindInterface(TouchBehaviour.i), this.gsResultView.bindInterface(TouchBehaviour.i)
    }, a.init = function () {
        this.isAllowFuncClick = !0, this.allowPushCard = !0, GSUpdate.i.start(), GSStateMgr.i.init(), this.initView()
    }, a.startView = function () {
        GameLayerManager.gameLayer().openMainLayer(), this.showStateView()
    }, a.showStateView = function () {
        switch (GSData.i.game_state) {
            case 1:
                this.visibleTwoFuncButton(!0, !0), this.visibleFourFuncButton(!1), this.visibleReadyIcon(), this.visibleRoomOwn(), this.visibleZhuang(), this.gsView.visible = !0, this.gsView.baoPaiView.visible = !1, this.gsView.centerBoom.visible = !1, this.gsResultView.visible = !1, this.scene.waitText.visible = !0, this.scene.waitText.text = "等待其他玩家，请稍后...", this.scene.startButton.visible = !1, this.scene.inviteButton.visible = !1, this.scene.ruleText.visible = !0, this.gsView.readyStateHeadReset(), this.updateGangCur();
                break;
            case 2:
                this.gsResultView.visible = !1, this.visibleTwoFuncButton(!0, !1), this.visibleFourFuncButton(!1), this.visibleReadyIcon(), this.visibleRoomOwn(), this.visibleZhuang(), this.gsView.visible = !0, this.gsView.baoPaiView.visible = !1, this.gsView.centerBoom.visible = !1, this.gsResultView.visible = !1, this.scene.waitText.visible = !0, this.scene.waitText.text = "等待其他玩家，请稍后...", this.scene.startButton.visible = !1, this.scene.inviteButton.visible = !1, this.scene.ruleText.visible = !0, this.gsView.readyStateHeadReset(), this.updateGangCur();
                break;
            case 3:
                this.gsView.visible = !0, this.scene.waitText.visible = !1, this.scene.startButton.visible = !1, this.scene.inviteButton.visible = !1, this.scene.ruleText.visible = !0, this.visibleTwoFuncButton(!1, !1), this.visibleFourFuncButton(!0), this.gsView.hideReadyIcons(), this.visibleZhuang(), this.gsView.centerBoom.visible = !0, this.gsView.baoPaiView.visible = !0, this.gsView.playStateHeadReset(), this.updateGangCur(), this.scene.readyButton.visible = !1;
                break;
            case 4:
                GSData.i.readyFlag = 0, this.gsResultView.visible = !0, this.closeGSView();
                break;
            case 5:
                this.closeGSView(), this.gsResultView.visible = !1
        }
    }, a.closeGSView = function () {
        this.visibleTwoFuncButton(!1, !1), this.gsView.visible = !1, this.hideFuncSelectMenu(), this.gsView.clearTips(), this.gsView.clearMJView(), this.scene.ruleText.visible = !1, this.scene.readyButton.visible = !1, this.scene.waitText.visible = !1, GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips)
    }, a.closeResultView = function () {
        this.gsResultView.clear(), this.gsResultView.visible = !1
    }, a.visibleTwoFuncButton = function (t, e) {
        this.scene.jiesanButton.visible = t
    }, a.visibleFourFuncButton = function (t) {
        this.gsView.rightButtonCon.visible = this.gsView.rightTopButtonCon.visible = t
    }, a.updateGangCur = function () {
        for (var t = 1; 4 >= t; t++) this.gsView.headViews[t].numText.text = "" + GSData.i.gangCurs[t]
    }, a.updateRoom = function () {
        this.scene.updateRoomID(GSData.i.roomID), this.scene.updateRule(GSData.i.rules), this.gsView.updateRoom(), this.visibleReadyIcon(), this.visibleStartButton()
    }, a.visibleStartButton = function () {
        if (1 == GSData.i.game_state) {
            for (var t = !1, e = !0, i = 1; 4 >= i; i++) {
                var n = GSData.i.roomPlayers[i];
                null != n ? "online" != n.status && (e = !1) : (t = !0, e = !1)
            }
            1 == GSData.i.ownPos ? (t ? (this.scene.inviteButton.visible = !1, this.scene.waitText.visible = !1) : (this.scene.inviteButton.visible = !1, this.scene.waitText.visible = !0, this.scene.waitText.text = "等待其他玩家，请稍后..."), e ? (this.scene.waitText.visible = !1, this.scene.startButton.visible = !0) : this.scene.startButton.visible = !1) : e ? this.scene.waitText.text = "等待房主开始游戏，请稍后..." : this.scene.waitText.text = "等待其他玩家，请稍后..."
        }
    }, a.exit = function () {
        GSData.i.clear(), this.clear(), GameLayerManager.gameLayer().openSceneLayer()
    }, a.rebackGame = function () {
        this.clear(), this.showStateView(), this.gsView.updateBaoPai(GSData.i.baoPai), this.gsResultView.updateBaoPai(GSData.i.baoPai), this.setBoomDir(GSData.i.ownPos), this.setArrowDir(GSData.i.turnDir), this.updateCenterInfo(), this.updateRebackPais(), this.showFuncSelectMenu()
    }, a.startGame = function () {
        this.clear(), this.showStateView(), this.gsView.updateBaoPai(GSData.i.baoPai), this.gsResultView.updateBaoPai(GSData.i.baoPai), this.setBoomDir(GSData.i.ownPos), this.setArrowDir(GSData.i.zhuangDir), this.updateCenterInfo(), GSData.i.game_state = -1, GSStateMgr.i.setState(GSState.State_HeadToTarget), this.isAllowFuncClick = !1
    }, a.visibleReadyIcon = function () {
        if (1 == GSData.i.game_state || 2 == GSData.i.game_state) for (var t = 1; 4 >= t; t++) {
            var e = this.gsView.readyIcons[t], i = this.gsView.getHeadView(t).headIcon.killIcon;
            e.visible = 1 == (GSData.i.readyFlag >> t & 1), 1 == GSData.i.game_state && t > 1 && 1 == GSData.i.ownPos && 1 == GSData.i.roomType ? i.visible = e.visible : i.visible = !1
        }
    }, a.visibleZhuang = function () {
        for (var t = 1; t <= GSConfig.playerCount; t++) this.gsView.getHeadView(t).visibleZhuang(1 == (GSData.i.zhuangFlag >> t & 1))
    }, a.visibleRoomOwn = function () {
        for (var t = 1; t <= GSConfig.playerCount; t++) this.gsView.getHeadView(t).visibleRoomOwn(1 == (GSData.i.roomOwnFlag >> t & 1))
    }, a.playTimeEffect = function (t, e) {
        void 0 === e && (e = !1), t ? this.gsView.centerBoom.timeEffect.play(e) : this.gsView.centerBoom.timeEffect.reset()
    }, a.catchCard = function (t) {
        var e = this.gsView.MJViews[t], i = GSConfig.catchPos[t], n = GSData.i.getCatchPai(t),
            a = CardView.create(t, 1, n);
        a.index = GSData.i.getHandPais(t).length - 1, a.posView(i.x, i.y), e.addHandCard(a), this.setArrowDir(t), 1 == t ? (a.activate(), a.addClick(this.onCardClick, this), a.y = i.y - 30, egret.Tween.get(a).to({y: i.y}, 200).call(function () {
            SocketClientManager.getInstance().checkSelfSpecial()
        }), this.activateCard = null, this.playTimeEffect(!0, !0)) : this.playTimeEffect(!0, !1), -2 == GSData.i.game_state && this.playTimeEffect(!1, !1)
    }, a.updateCenterInfo = function () {
        this.gsView.centerBoom.updateLeftCount(GSData.i.leftCount), this.gsView.centerBoom.updateRoundCount(GSData.i.cur_round, GSData.i.max_round)
    }, a.playBao = function () {
    }, a.hupaiShow = function () {
        var t = this, e = GSData.i.result.hupai;
        if (0 != e) if (17 == e.type) {
            for (var i = 0; i < GSData.i.result.hupaiPos.length; i++) {
                var n = GSData.i.getDir(Number(GSData.i.result.hupaiPos[i])), a = GSData.i.getResultPersonLeft(n);
                a.push(e.pai)
            }
            var s = GSData.i.getDir(GSData.i.result.dianPaoPos);
            this.removePoolCard(s)
        } else {
            for (var o = GSData.i.getDir(Number(GSData.i.result.hupaiPos[0])), r = GSData.i.getResultPersonLeft(o), h = 0; h < r.length; h++) if (r[h].number == e.pai.number && r[h].type == e.pai.type) {
                r.splice(h, 1);
                break
            }
            r.push(e.pai)
        }
        for (var i = 1; 4 >= i; i++) {
            var c = this.gsView.MJViews[i];
            c.removeIndexPai();
            var r = GSData.i.getResultPersonLeft(i), l = GSConfig.dymnicHandPos[i];
            this.createIndexPais(c, l.x, l.y, i, 3, r, !0, !1)
        }
        egret.setTimeout(function (e) {
            t.intoResultView()
        }, this, 3e3)
    }, a.createIndexPais = function (t, e, i, n, a, s, o, r) {
        void 0 === o && (o = !0), void 0 === r && (r = !0);
        for (var h = 0; h < s.length; h++) {
            var c = CardView.create(n, a, s[h]);
            c.index = h;
            var l = GSConfig.getPosByIndex(n, a, h);
            c.posView(e + l.x, i + l.y), c.visible = o, t.addHandCard(c), 1 == n && r && (c.addClick(this.onCardClick, this), c.activate())
        }
        var u = GSConfig.catchPos[n];
        GSConfig.handLens[s.length] ? (u.x = c.pos.x + u.dx, u.y = c.pos.y + u.dy, c.posView(u.x, u.y)) : (l = GSConfig.getPosByIndex(n, a, h), u.x = e + l.x + u.dx, u.y = i + l.y + u.dy)
    }, a.intoResultView = function () {
        this.showStateView(), this.gsResultView.update()
    }, a.createAllHandPai = function () {
        for (var t = 1, e = 1; 4 >= e; e++) {
            var i = GSData.i.getHandPais(e), n = GSConfig.handPos[e], a = this.gsView.MJViews[e];
            this.createIndexPais(a, n.x, n.y, e, t, i, !1)
        }
    }, a.moveTo = function (t) {
        this.activateCard = t, egret.Tween.get(this.activateCard).to({y: this.activateCard.pos.y - 25}, 50)
    }, a.moveBack = function () {
        this.activateCard && (egret.Tween.get(this.activateCard).to({y: this.activateCard.pos.y}, 50), this.activateCard = null)
    }, a.onCardClick = function (t) {
        if (-1 != GSData.i.game_state && -2 != GSData.i.game_state) {
            var e = t.currentTarget;
            if (this.activateCard != e) this.moveBack(), this.moveTo(e); else if (1 == GSData.i.turnDir && GSConfig.handLens[GSData.i.getHandPais(1).length] && this.allowPushCard) {
                var i = this.activateCard.pai;
                SocketClientManager.getInstance().playCard(i), this.allowPushCard = !1, console.log("发送自己的打牌信息", i)
            } else GSData.i.gang_end || 1 != GSData.i.zhuangDir || EffectUtils.showTips("等待其他玩家杠牌，请稍后...", 5)
        }
    }, a.startPushTimeInterval = function () {
        this.interval = egret.setTimeout(this.stopPushTimeInterval, this, 1e3)
    }, a.stopPushTimeInterval = function () {
        egret.clearTimeout(this.interval), this.allowPushCard = !0
    }, a.removePoolCard = function (t) {
        var i = e.i.gsView.MJViews[t];
        i.removePoolCard()
    }, a.pushPoolCard = function (t, i) {
        var n = e.i.gsView.MJViews[t], a = CardView.create(t, 4, i), s = GSConfig.getPoolPos(t, i.poolIndex);
        a.posView(s.x, s.y), a.x = s.sx, a.y = s.sy, a.scaleX = a.scaleY = 1.5, egret.Tween.get(a).to({
            x: s.x,
            y: s.y,
            scaleX: 1,
            scaleY: 1
        }, 400, egret.Ease.backIn), n.addPoolCard(a), this.updateMJView(t), this.playTimeEffect(!1), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips, [t, i]), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point, [t, a])
    }, a.showChiSelectView = function () {
        var t = GSData.i.getFuncSelectByIndex(1);
        this.gsView.funcSelectView.updateGroupConViewByChi(t.group)
    }, a.showGangSelectView = function () {
        var t = GSData.i.getFuncSelectByIndex(3);
        this.gsView.funcSelectView.updateGroupConViewByGang(t.group)
    }, a.showBudanSelectView = function () {
        var t = GSData.i.getFuncSelectByIndex(4);
        this.gsView.funcSelectView.updateGroupConViewByBudan(t.group)
    }, a.showTingSelectView = function () {
        var t = GSData.i.getFuncSelectByIndex(5);
        this.gsView.updateConViewByTing(t.pai), this.allowPushCard = !0
    }, a.showFuncSelectMenu = function () {
        GSData.i.roundStartHasFunction && 3 == GSData.i.game_state && (this.moveBack(), this.gsView.funcSelectView.visible = !0, this.gsView.funcSelectView.updateFuncView(GSData.i.funcSelects), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Prompt, !0))
    }, a.showTitleView = function (t) {
        this.gsTitleView || (this.gsTitleView = new GSTotleView), this.gsTitleView.show(t)
    }, a.hideFuncSelectMenu = function () {
        GSData.i.roundStartHasFunction = !1, this.gsView.funcSelectView.visible = !1, this.gsView.funcSelectView.clearGroupConView(), GSData.i.isShowFunc = !1, GameDispatcher.ins.dispatchEvent(EventType.Trigger_Prompt, !1)
    }, a.addCardClick = function (t) {
        t.activate(), t.addClick(this.onCardClick, this)
    }, a.setBoomDir = function (t) {
        this.gsView.centerBoom.bg.rotation = 90 * t - 180
    }, a.setArrowDir = function (t) {
        this.gsView.centerBoom.setArrowDir(t)
    }, a.clear = function () {
        for (var t = 1; 4 >= t; t++) GSConfig.dymnicHandPos[t].x = GSConfig.handPos[t].x, GSConfig.dymnicHandPos[t].y = GSConfig.handPos[t].y;
        this.allowPushCard = !0, this.isAllowFuncClick = !0, this.activateCard = null
    }, a.playEffect = function (t, e) {
        this.gsView.playFuncEffect(t, e)
    }, a.updateRebackPais = function () {
        for (var t = 1; 4 >= t; t++) this.updateMJView(t, !0)
    }, a.updateMJView = function (t, e) {
        void 0 === e && (e = !1), 1 == t && (this.activateCard = null);
        var i = this.gsView.MJViews[t];
        i.removeAllHandCard();
        var n = GSConfig.handPos[t], a = n.x, s = n.y, i = this.gsView.MJViews[t],
            o = (GSConfig.catchPos[t], GSData.i.getHandPais(t)), r = GSData.i.getPoolPais(t),
            h = GSData.i.getFuncPais(t);
        if (h.length > 0) for (var c = 0; c < h.length; c++) {
            var l = h[c], u = l.action, d = l.pais;
            switch (u) {
                case 1:
                case 2:
                    for (var g = 0; g < d.length; g++) {
                        for (var f = d[g], p = f.pai.length, m = 0; p > m; m++) {
                            var v = CardView.create(t, 3, f.pai[m]), _ = GSConfig.getPosByIndex(t, 3, m);
                            v.posView(a + _.x, s + _.y), i.addHandCard(v)
                        }
                        a += n.dx, s += n.dy
                    }
                    break;
                case 22:
                    for (var g = 0; g < d.length; g++) {
                        for (var f = d[g], m = 0; 3 > m; m++) {
                            var v = CardView.create(t, 3, f.pai[m], f.ever[m]), _ = GSConfig.getPosByIndex(t, 3, m);
                            v.posView(a + _.x, s + _.y), i.addHandCard(v)
                        }
                        a += n.dx, s += n.dy
                    }
                    break;
                case 24:
                    for (var C, y = GSConfig.diePaiPos[t], g = 0; g < d.length; g++) {
                        for (var f = d[g], m = 0; 4 > m; m++) {
                            var w = 0, S = 0;
                            3 == m ? (1 == t && (C = 3) || (C = 2), w = y.x, S = y.y) : C = 2;
                            var v = CardView.create(t, C, f.pai[m]), _ = GSConfig.getPosByIndex(t, C, m);
                            v.posView(a + _.x + w, s + _.y + S), i.addHandCard(v)
                        }
                        a += n.dx, s += n.dy, 2 == t && v.parent.setChildIndex(v, v.parent.numChildren - 1)
                    }
                    break;
                case 25:
                    for (var y = GSConfig.diePaiPos[t], C = 3, g = 0; g < d.length; g++) {
                        for (var f = d[g], m = 0; 4 > m; m++) {
                            var w = 0, S = 0;
                            3 == m && (w = y.x, S = y.y);
                            var v = CardView.create(t, C, f.pai[m]), _ = GSConfig.getPosByIndex(t, C, m);
                            v.posView(a + _.x + w, s + _.y + S), i.addHandCard(v)
                        }
                        a += n.dx, s += n.dy, 2 == t && v.parent.setChildIndex(v, v.parent.numChildren - 1)
                    }
                    break;
                case 26:
                    for (var g = 0; g < d.length; g++) {
                        for (var f = d[g], m = 0; 3 > m; m++) {
                            var v = CardView.create(t, 3, f.pai[m], f.ever[m]), _ = GSConfig.getPosByIndex(t, 3, m);
                            v.posView(a + _.x, s + _.y), i.addHandCard(v)
                        }
                        a += n.dx, s += n.dy
                    }
            }
        }
        if (GSConfig.dymnicHandPos[t].x = a, GSConfig.dymnicHandPos[t].y = s, o.length > 0 && (this.createIndexPais(i, a, s, t, 1, o), e)) for (var c = 0; c < r.length; c++) {
            var v = CardView.create(t, 4, r[c]), _ = GSConfig.getPoolPos(t, c);
            v.posView(_.x, _.y), i.addPoolCard(v)
        }
    }, e
}(egret.EventDispatcher);
egret.registerClass(GSController, "GSController");
var GSUpdate = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.start = function () {
        this.updates = [], egret.sys.$ticker.$startTick(this.callBack, this), this.lastTime = egret.getTimer()
    }, i.callBack = function (t) {
        for (var e = t - this.lastTime, i = 0; i < this.updates.length; i++) {
            var n = this.updates[i];
            n.stop || (n.update(e, t), n.autoRemove && n.completed && this.updates.splice(i--, 1))
        }
        return this.lastTime = t, !1
    }, i.addUpdate = function (t) {
        -1 == this.updates.indexOf(t) && this.updates.push(t)
    }, i.removeUpdate = function (t) {
        this.updates.splice(this.updates.indexOf(t), 1)
    }, t.i = new t, t
}();
egret.registerClass(GSUpdate, "GSUpdate");
var BaseState = function () {
    function t() {
        this.stop = !0
    }

    var e = (__define, t), i = e.prototype;
    return i.play = function () {
        this.reset()
    }, i.exit = function () {
        this.stop = !0
    }, i.reset = function () {
        this.completed = !1, this.stop = !1
    }, i.update = function (t, e) {
    }, t
}();
egret.registerClass(BaseState, "BaseState", ["IState", "IUpdate"]);
var State_CardPutline = function (t) {
    function e() {
        t.apply(this, arguments), this.showDelayTime = 60, this.moveDownTime = 220, this.level = 0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this), GSController.i.createAllHandPai(), this.mjviews = GSController.i.gsView.MJViews
    }, n.update = function (t, e) {
        if (!this.completed) {
            if (1 == this.level && (this.showTime += t, this.showTime >= this.showDelayTime)) {
                GameSound.PlaySound("sound_card_hover");
                for (var i = 1; 4 >= i; i++) {
                    var n = this.mjviews[i].getHandCard(this.showIndex);
                    n.visible = !0, n.x = GSConfig.width >> 1, n.y = GSConfig.height >> 1, n.scaleX = n.scaleY = .1, egret.Tween.get(n).to({
                        x: n.pos.x,
                        y: n.pos.y,
                        scaleX: 1,
                        scaleY: 1
                    }, this.moveDownTime).call(this.tweenEnd, this, [n])
                }
                this.showTime = 0, this.showIndex++, this.showIndex >= 13 && this.delay(2, 500)
            }
            if (2 == this.level) {
                for (var i = 0; 13 > i; i++) {
                    var n = this.mjviews[1].getHandCard(i);
                    n.changeStyle(5)
                }
                this.delay(3, 300)
            }
            if (3 == this.level) {
                GSData.i.sortHandPai();
                for (var i = 0; 13 > i; i++) {
                    var n = this.mjviews[1].getHandCard(i);
                    n.changeStyle(1, !1), n.changePai(GSData.i.getHandPais(1)[i]), n.activate()
                }
                this.delay(4, 300)
            }
            4 == this.level && (this.exit(), GSData.i.game_state = 3, GSData.i.pushStartHandPai(), GSController.i.isAllowFuncClick = !0, GSController.i.catchCard(GSData.i.zhuangDir), GSController.i.scene.playFight(), GSController.i.showFuncSelectMenu())
        }
    }, n.delay = function (t, e) {
        var i = this;
        this.level = 0, egret.setTimeout(function (e) {
            i.level = t
        }, this, e)
    }, n.tweenEnd = function (t) {
        egret.Tween.removeTweens(t)
    }, n.reset = function () {
        t.prototype.reset.call(this), this.showIndex = 0, this.showTime = 0, this.level = 1
    }, e
}(BaseState);
egret.registerClass(State_CardPutline, "State_CardPutline");
var State_FuncSelect = function (t) {
    function e() {
        t.apply(this, arguments)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this), GSController.i.showFuncSelectMenu()
    }, n.update = function (t, e) {
        this.completed
    }, n.reset = function () {
        t.prototype.reset.call(this)
    }, e
}(BaseState);
egret.registerClass(State_FuncSelect, "State_FuncSelect");
var State_HeadToTarget = function (t) {
    function e() {
        t.apply(this, arguments)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this);
        for (var e = GSController.i.gsView, i = 1; i <= GSConfig.playerCount; i++) {
            var n = e.headViews[i], a = GSConfig.headTargetPos[i];
            egret.Tween.get(n).to({x: a.x, y: a.y}, 100).call(this.moveComplete, this)
        }
    }, n.moveComplete = function () {
        this.count++, this.count >= GSConfig.playerCount && (this.exit(), GSStateMgr.i.setState(GSState.State_CardPutline))
    }, n.update = function (t, e) {
        this.completed
    }, n.reset = function () {
        t.prototype.reset.call(this), this.count = 0
    }, e
}(BaseState);
egret.registerClass(State_HeadToTarget, "State_HeadToTarget");
var State_ReadyPlay = function (t) {
    function e() {
        t.apply(this, arguments)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this)
    }, n.update = function (t, e) {
        this.completed
    }, n.reset = function () {
        t.prototype.reset.call(this)
    }, e
}(BaseState);
egret.registerClass(State_ReadyPlay, "State_ReadyPlay");
var State_ToPlay = function (t) {
    function e() {
        t.apply(this, arguments)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this)
    }, n.update = function (t, e) {
        this.completed
    }, n.reset = function () {
        t.prototype.reset.call(this)
    }, e
}(BaseState);
egret.registerClass(State_ToPlay, "State_ToPlay");
var State_TurnCatch = function (t) {
    function e() {
        t.apply(this, arguments)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.play = function () {
        t.prototype.play.call(this)
    }, n.update = function (t, e) {
        this.completed
    }, n.reset = function () {
        t.prototype.reset.call(this)
    }, e
}(BaseState);
egret.registerClass(State_TurnCatch, "State_TurnCatch");
var GSState = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.State_HeadToTarget = 1, t.State_CardPutline = 2, t.State_TurnCatch = 3, t.State_ReadyPlay = 4, t.State_ToPlay = 5, t.State_FuncSelect = 6, t
}();
egret.registerClass(GSState, "GSState");
var GSStateMgr = function () {
    function t() {
        this.states = []
    }

    var e = (__define, t), i = e.prototype;
    return i.init = function () {
        this.put(GSState.State_HeadToTarget, new State_HeadToTarget), this.put(GSState.State_CardPutline, new State_CardPutline)
    }, i.put = function (t, e) {
        this.states[t] = e, GSUpdate.i.addUpdate(e)
    }, i.getStateIns = function (t) {
        return this.states[t]
    }, i.setState = function (t) {
        console.log("游戏进入状态", t);
        var e = this.getStateIns(t);
        e.play()
    }, t.i = new t, t
}();
egret.registerClass(GSStateMgr, "GSStateMgr");
var StateTrigger = function (t) {
    function e() {
        t.call(this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.update = function (t, e) {
    }, e
}(BaseUpdate);
egret.registerClass(StateTrigger, "StateTrigger");
var TouchBehaviour = function () {
    function t() {
    }

    var e = __define, i = t, n = i.prototype;
    return e(t, "i", function () {
        return t._i || (t._i = new t)
    }), n.onBGTap = function () {
        GSController.i.moveBack()
    }, n.onFuncSelect = function (t) {
        var e = GSData.i.funcSelects[t];
        switch (e.index) {
            case 0:
                SocketClientManager.getInstance().skipSpecial(), GSController.i.hideFuncSelectMenu();
                break;
            case 1:
                GSData.i.chiObj = e, GSController.i.funcSelectAction = 1, GSController.i.showChiSelectView();
                break;
            case 2:
                SocketClientManager.getInstance().doSpecial(2), GSController.i.hideFuncSelectMenu();
                break;
            case 3:
                GSController.i.funcSelectAction = 3, GSController.i.showGangSelectView();
                break;
            case 4:
                break;
            case 5:
                GSDataProxy.i.gData.isTing = !0, GSController.i.hideFuncSelectMenu(), GSController.i.showTingSelectView();
                break;
            case 6:
                SocketClientManager.getInstance().doSpecial(4), GSController.i.hideFuncSelectMenu()
        }
    }, n.onGroupSelect = function (t) {
        if (1 == GSController.i.funcSelectAction) {
            var e = GSData.i.getFuncSelectByIndex(1),
                i = [DataConvertUtils.getMahjongValue(e.group[t].pai[0]), DataConvertUtils.getMahjongValue(e.group[t].pai[1]), DataConvertUtils.getMahjongValue(e.group[t].pai[2])];
            SocketClientManager.getInstance().doSpecial(1, i)
        }
        if (3 == GSController.i.funcSelectAction) {
            var e = GSData.i.getFuncSelectByIndex(3),
                n = e.group[t].pai instanceof Array ? e.group[t].pai[0] : e.group[t].pai;
            e.group[t].action;
            SocketClientManager.getInstance().doSpecial(3, [], DataConvertUtils.getMahjongValue(n))
        }
        GSController.i.hideFuncSelectMenu()
    }, n.onShareGame = function () {
        Weixin.onClickShare(GSData.i.result.person)
    }, n.onContinue = function () {
        GSController.i.closeResultView(), GSController.i.jiesuanData ? (GSData.i.game_state = 5, GSController.i.showStateView(), GSController.i.showTitleView(GSController.i.jiesuanData)) : (GSData.i.roundReset(), SocketClientManager.getInstance().continueGame())
    }, n.onSettingTap = function () {
        StackManager.open(SettingDialog, "SettingDialog")
    }, n.onQuitTap = function () {
        this.onJiesanTap()
    }, n.onTalkTap = function () {
        StackManager.open(ChatDialog, "ChatDialog")
    }, n.onSiriBegin = function () {
        Weixin.startRecord(), Global.showVoice()
    }, n.onSiriEnd = function () {
        Weixin.stopRecord(), Global.hideVoice()
    }, n.onRebackContinue = function (t) {
        t.currentTarget.visible = !1, SocketClientManager.getInstance().continueGame()
    }, n.onKillTouch = function (t) {
        SocketClientManager.getInstance().kickUser(t)
    }, n.onJiesanTap = function () {
        if (2 == GSData.i.game_state || 3 == GSData.i.game_state) GameLayerManager.gameLayer().messagBox.showMsg(function (t) {
            if (t) {
                SocketClientManager.getInstance().dissolveRoom(1);
                var e = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
                e.isClick = !0
            }
        }, "您确定发起解散房间吗？\n（当所有在线玩家同意解散之后房间将解散）"); else {
            var t;
            t = 1 == GSData.i.roomOwnDir && 1 == GSData.i.roomType ? "您确定要解散房间吗？" : "您确定要离开房间吗？", GameLayerManager.gameLayer().messagBox.showMsg(function (t) {
                t && (SocketClientManager.getInstance().leaveRoom(GSData.i.roomID + ""), GSController.i.exit())
            }, t)
        }
    }, n.onWeixinTap = function () {
        SocketClientManager.getInstance().leaveRoom(GSData.i.roomID + ""), GSController.i.exit()
    }, n.onStartGame = function () {
        SocketClientManager.getInstance().startGame()
    }, n.onInvite = function () {
        Global.showShare(!0), Weixin.onMenuShareAppMessage(GSData.i.roomID + ""), Weixin.onMenuShareTimeline(GSData.i.roomID + "")
    }, n.onHeadTouch = function (t) {
        var e = GSData.i.getRoomPlayerByDir(t);
        if (e) {
            var i = StackManager.findDialog(RoleInfoDialog, "RoleInfoDialog");
            i && (i.show(), i.refreshRole(e))
        }
    }, t
}();
egret.registerClass(TouchBehaviour, "TouchBehaviour", ["IGameTapEvent"]);
var BaoPaiView = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.bg = new egret.Bitmap(GameRes.getUI("game_bao_bg")), this.baoText = new egret.Bitmap(GameRes.getUI("game_baopai")), this.bg.anchorOffsetX = this.bg.width >> 1, this.bg.anchorOffsetY = this.bg.height >> 1, this.baoText.anchorOffsetX = this.baoText.width >> 1, this.baoText.anchorOffsetY = this.baoText.height >> 1, this.baoText.y = 35, this.addChild(this.bg), this.addChild(this.baoText), this.cardView = CardView.create(1, 3, null), this.cardView.posView(0, -12), this.cardView.scaleX = this.cardView.scaleY = .75, this.addChild(this.cardView)
    }, n.updatePai = function (t) {
        null == t ? this.cardView.visible = !1 : this.cardView.visible = !0, this.cardView.changePai(t)
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(BaoPaiView, "BaoPaiView");
var CenterBoom = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.bg = new egret.Bitmap, this.bg.texture = GameRes.getUI("game_bg_time"), this.bg.anchorOffsetX = this.bg.width >> 1, this.bg.anchorOffsetY = this.bg.height >> 1, this.addChild(this.bg), this.arrow = new egret.Bitmap, this.arrow.texture = GameRes.getUI("game_hl_time"), this.arrow.anchorOffsetX = -18, this.arrow.anchorOffsetY = 37, this.addChild(this.arrow), this.leftView = new egret.DisplayObjectContainer, this.leftView.x = -97, this.leftView.y = -10;
        var t = new egret.Bitmap;
        t.texture = GameRes.getUI("bg_001");
        var e = new egret.TextField;
        e.text = "张", e.x = 28, e.size = 22, this.leftView.addChild(t), this.leftView.addChild(e), this.rightView = new egret.DisplayObjectContainer, this.rightView.x = 50, this.rightView.y = -10;
        var i = new egret.Bitmap;
        i.texture = GameRes.getUI("bg_001"), i.width *= 2;
        var n = new egret.TextField;
        n.text = "圈", n.size = 22, n.x = 50, this.rightView.addChild(i), this.rightView.addChild(n), this.leftCountText = new egret.TextField, this.leftCountText.x = 2, this.leftCountText.y = 3, this.leftCountText.text = "99", this.leftCountText.size = 18, this.leftView.addChild(this.leftCountText), this.roundCountText = new egret.TextField, this.roundCountText.x = 2, this.roundCountText.y = 3, this.roundCountText.text = "00/00", this.roundCountText.size = 18, this.rightView.addChild(this.roundCountText), this.addChild(this.leftView), this.addChild(this.rightView), this.visibleArrow(!1), egret.Tween.get(this.arrow, {loop: !0}).to({alpha: 0}, 300).to({alpha: 1}, 300), this.timeEffect = new TimeEffectView(this.shakeCallback), GSUpdate.i.addUpdate(this.timeEffect), this.addChild(this.timeEffect.view)
    }, n.shakeCallback = function () {
        Global.phoneVibrate(2e3), console.log("----shake----")
    }, n.updateLeftCount = function (t) {
        this.leftCountText.text = "" + t
    }, n.updateRoundCount = function (t, e) {
        this.roundCountText.text = t + "/" + e
    }, n.setArrowDir = function (t) {
        switch (this.visibleArrow(!0), t) {
            case 1:
                this.arrow.rotation = 90;
                break;
            case 2:
                this.arrow.rotation = 0;
                break;
            case 3:
                this.arrow.rotation = -90;
                break;
            case 4:
                this.arrow.rotation = 180
        }
    }, n.visibleArrow = function (t) {
        this.arrow.visible = t
    }, n.reset = function () {
        this.timeEffect.reset()
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(CenterBoom, "CenterBoom");
var FuncEffectView = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.back = new egret.Bitmap, this.top = new egret.Bitmap, this.addChild(this.back), this.addChild(this.top), this.back.visible = this.top.visible = !1
    }, n.reset = function () {
        this.back.visible = !1, this.back.scaleX = this.back.scaleY = 1, this.top.visible = !1, this.top.scaleX = this.top.scaleY = 1, this.top.alpha = 1
    }, n.play = function (t, e) {
        var i = this;
        void 0 === e && (e = !0), this.back.texture = t, this.top.texture = t, this.back.anchorOffsetX = this.top.anchorOffsetX = this.back.width >> 1, this.back.anchorOffsetY = this.top.anchorOffsetY = this.back.height >> 1, this.back.visible = !0, this.back.scaleX = this.back.scaleY = 3, egret.Tween.get(this.back).to({
            scaleX: 1,
            scaleY: 1
        }, 300, egret.Ease.backIn).call(function (t) {
            i.top.visible = !0, egret.Tween.get(i.top).to({scaleX: 3, scaleY: 3, alpha: 0}, 500).call(function (t) {
                e && i.reset()
            }, i)
        }, this)
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(FuncEffectView, "FuncEffectView");
var FuncSelectView = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.selectCon = new egret.DisplayObjectContainer, this.selectCon.x = 770, this.selectCon.y = 505, this.icons = [];
        for (var t = 7, e = 0; t > e; e++) {
            var i = new egret.Bitmap;
            i.x = 120 * -e, this.selectCon.addChild(i), i.touchEnabled = !0, i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
        }
        this.groupCon = new egret.DisplayObjectContainer, this.groupCon.x = 555, this.groupCon.y = 478, this.backMask = new egret.Shape, this.backMask.graphics.beginFill(0, .5), this.backMask.graphics.drawRect(0, 0, GSConfig.width, GSConfig.height), this.backMask.touchEnabled = !0, this.backMask.addEventListener(egret.TouchEvent.TOUCH_TAP, this.bgTap, this), this.addChild(this.selectCon), this.addChild(this.backMask), this.addChild(this.groupCon), this.backMask.visible = !1
    }, n.bgTap = function () {
        this.clearGroupConView()
    }, n.reTexture = function (t, e) {
        t.texture = GameRes.getUI(e), t.anchorOffsetX = t.width >> 1, t.anchorOffsetY = t.height >> 1
    }, n.updateGroupConViewByGang = function (t) {
        if (this.clearGroupConView(), 1 == t.length) return void this.face.onGroupSelect(0);
        this.backMask.visible = !0;
        for (var e = 0; e < t.length; e++) {
            var i = t[e].pai instanceof Array ? t[e].pai : [t[e].pai, t[e].pai, t[e].pai, t[e].pai],
                n = new egret.DisplayObjectContainer;
            n.name = "" + e, n.touchEnabled = !0, n.y = -100 * e, this.groupCon.addChild(n), n.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onGroupTap, this);
            for (var a = 0; a < i.length; a++) {
                var s = GSConfig.getPosByIndex(1, 3, a), o = CardView.create(1, 3, i[a]);
                o.posView(s.x, s.y), n.addChild(o)
            }
        }
    }, n.updateGroupConViewByChi = function (t) {
        if (this.clearGroupConView(), 1 == t.length) return void this.face.onGroupSelect(0);
        this.backMask.visible = !0;
        for (var e = 0; e < t.length; e++) {
            var i = new egret.DisplayObjectContainer;
            i.name = "" + e, i.touchEnabled = !0, i.y = -100 * e, this.groupCon.addChild(i), i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onGroupTap, this);
            var n = [t[e].pai[0], t[e].pai[1], t[e].pai[2]], a = GSData.i.currPoolPai.number;
            n.sort(function (t, e) {
                return t.number > e.number ? 1 : -1
            });
            for (var s = 0; s < n.length; s++) {
                var o = GSConfig.getPosByIndex(1, 3, s), r = CardView.create(1, 3, n[s]);
                r.posView(o.x, o.y), i.addChild(r), r.enabled = n[s].number != a
            }
        }
    }, n.updateGroupConViewByBudan = function (t) {
        if (this.clearGroupConView(), 1 == t.length) return void this.face.onGroupSelect(0);
        this.backMask.visible = !0;
        for (var e = 0; e < t.length; e++) {
            var i = new egret.DisplayObjectContainer;
            i.name = "" + e, i.touchEnabled = !0, i.y = -100 * e, this.groupCon.addChild(i), i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onGroupTap, this);
            var n = t[e].pai, a = CardView.create(1, 3, n);
            i.addChild(a)
        }
    }, n.clearGroupConView = function () {
        for (; this.groupCon.numChildren;) {
            var t = this.groupCon.removeChildAt(0);
            for (t.touchEnabled = !1, t.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onGroupTap, this); t.numChildren;) {
                var e = t.removeChildAt(0);
                CardView.returnCardView(e)
            }
        }
        this.backMask.visible = !1
    }, n.updateFuncView = function (t) {
        for (var e = 0; e < GSConfig.funcSelects.length; e++) {
            var i = this.selectCon.getChildAt(e), n = t[e];
            null != n ? (i.visible = !0, this.reTexture(i, GSConfig.funcSelectRes[n.index]), i.name = "" + e) : i.visible = !1
        }
    }, n.bindInterface = function (t) {
        this.face = t
    }, n.onGroupTap = function (t) {
        var e = t.currentTarget;
        this.face.onGroupSelect(+e.name)
    }, n.onTouchTap = function (t) {
        var e = t.currentTarget;
        this.face.onFuncSelect(+e.name)
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(FuncSelectView, "FuncSelectView");
var GSHeadIcon = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.headIcon = new egret.DisplayObjectContainer, this.nullImg = new egret.Bitmap(GameRes.getUI("game_head_null")), this.nullImg.anchorOffsetX = this.nullImg.width >> 1, this.nullImg.anchorOffsetY = (this.nullImg.height >> 1) + 1, this.headImg = new eui.Image, this.headImg.width = 100, this.headImg.height = 100, this.headImg.anchorOffsetX = 50, this.headImg.anchorOffsetY = 50, this.headImg.scaleX = this.headImg.scaleY = .78, this.offlineImg = new egret.Bitmap(GameRes.getUI("game_head_lixian")), this.offlineImg.anchorOffsetX = (this.offlineImg.width >> 1) + 1, this.offlineImg.anchorOffsetY = this.offlineImg.height >> 1, this.headIcon.addChild(this.nullImg), this.headIcon.addChild(this.headImg), this.headIcon.addChild(this.offlineImg), this.headIconMask = new egret.Shape, this.headIconMask.graphics.beginFill(0), this.headIconMask.graphics.drawRoundRect(0, 0, 72, 72, 30, 30), this.headIconMask.anchorOffsetX = this.headIconMask.anchorOffsetY = 36, this.headIcon.mask = this.headIconMask, this.head_kuang = new egret.Bitmap(RES.getRes("head_kuang_bg")), this.head_kuang.anchorOffsetX = (this.head_kuang.width >> 1) + 1.5, this.head_kuang.anchorOffsetY = (this.head_kuang.height >> 1) + .5, this.roomOwn_kuang = new egret.Bitmap(GameRes.getUI("game_head_room")), this.roomOwn_kuang.anchorOffsetX = (this.roomOwn_kuang.width >> 1) - 3.5, this.roomOwn_kuang.anchorOffsetY = (this.roomOwn_kuang.height >> 1) + 3.5, this.zhuangIcon = new egret.Bitmap(GameRes.getUI("game_zhuang")), this.zhuangIcon.anchorOffsetX = this.zhuangIcon.width >> 2, this.zhuangIcon.anchorOffsetY = this.zhuangIcon.height >> 1, this.zhuangIcon.x = -40, this.zhuangIcon.y = -40, this.killIcon = new egret.Bitmap(GameRes.getUI("JS_close")), this.killIcon.anchorOffsetX = this.killIcon.width >> 1, this.killIcon.anchorOffsetY = this.killIcon.height >> 1, this.killIcon.scaleX = this.killIcon.scaleY = .9, this.killIcon.x = 38, this.killIcon.y = -38, this.addChild(this.headIcon), this.addChild(this.headIconMask), this.addChild(this.head_kuang), this.addChild(this.roomOwn_kuang), this.addChild(this.zhuangIcon), this.addChild(this.killIcon), this.nullIcon(), this.killIcon.visible = !1
    }, n.nullIcon = function () {
        this.offlineImg.visible = !1, this.zhuangIcon.visible = !1, this.roomOwn_kuang.visible = !1, this.iconTexture = null, this.pic = "", this.headImg.source = "", this.killIcon.visible = !1
    }, n.setHeadPic = function (t) {
        if (this.pic != t && (this.pic = t, this.setHeadImg(null)), t) {
            this.headUrl = t;
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            e ? (this.iconTexture = e.texture, this.setHeadImg(e.texture)) : HttpManager.getInstance().addEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this)
        } else this.setHeadImg("head_001")
    }, n.loadHeadSuccHandler = function (t) {
        if (this.headUrl == t.eventData) {
            HttpManager.getInstance().removeEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this);
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            this.setHeadImg(e.texture)
        }
    }, n.setHeadImg = function (t) {
        this.headImg.source = t
    }, n.visibleRoomOwn = function (t) {
        this.roomOwn_kuang.visible = t && 1 == GSData.i.roomType
    }, n.visibleZhuang = function (t) {
        this.zhuangIcon.visible = t
    }, n.reset = function () {
        this.offlineImg.visible = !1
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(GSHeadIcon, "GSHeadIcon");
var GSHeadView = function (t) {
    function e(e) {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.headIcon = new GSHeadIcon, this.tingImg = new eui.Image, this.tingImg.texture = GameRes.getUI("ting_icon1"), this.tingImg.x = this.headIcon.x - this.tingImg.width / 2, this.tingImg.y = this.headIcon.y - this.headIcon.height / 2 - this.tingImg.height / 2, this.nameText = new egret.TextField, this.idText = new egret.TextField, this.numText = new egret.TextField, this.numText.textColor = 16776517, this.nameText.size = 20, this.idText.size = 20, this.numText.size = 24, this.nameText.bold = !0, this.idText.bold = !0, this.numText.bold = !0, this.addChild(this.headIcon), this.addChild(this.tingImg), this.addChild(this.nameText), this.addChild(this.idText), this.addChild(this.numText), this.nameText.width = 150, this.nameText.anchorOffsetX = 75, this.nameText.textAlign = egret.HorizontalAlign.CENTER, this.idText.width = 80, this.idText.anchorOffsetX = 40, this.idText.textAlign = egret.HorizontalAlign.CENTER, this.numText.width = 80, this.numText.anchorOffsetX = 40, this.numText.textAlign = egret.HorizontalAlign.CENTER, this.tingVisible(!1), this.waitView()
    }, n.visibleZhuang = function (t) {
        this.headIcon.visibleZhuang(t)
    }, n.visibleRoomOwn = function (t) {
        this.headIcon.visibleRoomOwn(t)
    }, n.nullPlayer = function () {
        this.nameText.text = this.idText.text = "", this.headIcon.nullIcon()
    }, n.waitView = function () {
        this.nameText.x = 0, this.nameText.y = 45, this.idText.x = 0, this.idText.y = 68, this.numText.x = 0, this.numText.y = 68
    }, n.tingVisible = function (t) {
        this.tingImg.visible = t
    }, n.reset = function () {
        this.headIcon.reset()
    }, e
}(egret.Sprite);
egret.registerClass(GSHeadView, "GSHeadView");
var GSResultView = function (t) {
    function e() {
        t.call(this), this.po = [144, 244, 340, 440], this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.bindInterface = function (t) {
        this.face = t
    }, n.initView = function () {
        var t = this;
        this.bg = new egret.Shape, this.bg.graphics.beginFill(0, .3), this.bg.graphics.drawRect(0, 0, GSConfig.width, 450), this.bg.y = GSConfig.height - 450 >> 1, this.addChild(this.bg), this.createLine(230), this.createLine(327), this.createLine(425), this.createLogCon(GSConfig.width >> 1, 76), this.shareButton = new mui.EButton("JS_share_button_png", "分享"), this.shareButton.x = 220, this.shareButton.y = 550, this.shareButton.textField.verticalCenter = -8, this.continueButton = new mui.EButton("JS_continue_button_png", "继续游戏"), this.continueButton.x = (this.width - this.continueButton.width) / 2 - this.continueButton.width / 2, this.continueButton.y = 550, this.continueButton.textField.verticalCenter = -8, this.addChild(this.shareButton), this.addChild(this.continueButton), this.shareButton.visible = !1, this.shareButton.addEventListener(egret.TouchEvent.TOUCH_TAP, function (e) {
            t.face.onShareGame()
        }, this), this.continueButton.addEventListener(egret.TouchEvent.TOUCH_TAP, function (e) {
            t.face.onContinue()
        }, this), this.personItems = [];
        for (var e = 0; 4 > e; e++) {
            var i = new PersonItem;
            i.y = this.po[e], this.addChild(i), this.personItems.push(i)
        }
        this.baoPaiView = new BaoPaiView, this.baoPaiView.x = 910, this.baoPaiView.y = 167, this.addChild(this.baoPaiView)
    }, n.updateBaoPai = function (t) {
        this.baoPaiView.updatePai(t)
    }, n.update = function () {
        this.showLogo(GSData.i.resultType);
        for (var t = GSData.i.result.person, e = (GSData.i.result.hupai.pai, 0); e < t.length; e++) {
            var i = t[e], n = this.personItems[e], a = i.pos, s = GSData.i.getDir(a);
            n.headIcon.setHeadPic(i.pic), n.headIcon.visibleRoomOwn(1 == (GSData.i.roomOwnFlag >> s & 1)), n.headIcon.visibleZhuang(GSData.i.result.zhuang == a), GSData.i.result.hupaiPos && -1 != GSData.i.result.hupaiPos.indexOf(a + "") ? (n.updateHuLogo(1), n.updatePai(i)) : GSData.i.result.dianPaoPos == a ? (n.updatePai(i), n.updateHuLogo(2)) : (n.updatePai(i), n.updateHuLogo(0))
        }
    }, n.createLogCon = function (t, e) {
        this.logoCon = new egret.DisplayObjectContainer, this.logoCon.x = t, this.logoCon.y = e, this.winTop = new egret.Bitmap(GameRes.getUI("JS_win")), this.winBG = new egret.Bitmap(GameRes.getUI("JS_win_bg")), this.loseTop = new egret.Bitmap(GameRes.getUI("JS_lose")), this.loseBG = new egret.Bitmap(GameRes.getUI("JS_lose_bg")), this.liujuTop = new egret.Bitmap(GameRes.getUI("JS_liuju")), this.winTop.anchorOffsetX = 142, this.winTop.anchorOffsetY = 40, this.winBG.anchorOffsetX = 216, this.winBG.anchorOffsetY = 220, this.loseTop.anchorOffsetX = 142, this.loseTop.anchorOffsetY = 60, this.loseBG.anchorOffsetX = 215, this.loseBG.anchorOffsetY = 224, this.liujuTop.anchorOffsetX = 146, this.liujuTop.anchorOffsetY = 58, this.logoCon.addChild(this.winBG), this.logoCon.addChild(this.loseBG), this.logoCon.addChild(this.winTop), this.logoCon.addChild(this.loseTop), this.logoCon.addChild(this.liujuTop), this.addChild(this.logoCon)
    }, n.drawLine = function (t) {
        this.drawShape.graphics.lineStyle(2, 16711680), this.drawShape.graphics.drawRect(t.x, t.y, t.width, t.height)
    }, n.createLine = function (t) {
        var e = new egret.Bitmap;
        e.texture = GameRes.getUI("JS_dot"), e.width = GSConfig.width, e.y = t, this.addChild(e)
    }, n.showLogo = function (t) {
        switch (t) {
            case 1:
                this.winTop.visible = !0, this.winBG.visible = !0, this.loseTop.visible = !1, this.loseBG.visible = !1, this.liujuTop.visible = !1, GameSound.PlaySound("sound_win");
                break;
            case 2:
                this.winTop.visible = !1, this.winBG.visible = !1, this.loseTop.visible = !0, this.loseBG.visible = !0, this.liujuTop.visible = !1, GameSound.PlaySound("sound_lost");
                break;
            case 3:
                this.winTop.visible = !1, this.winBG.visible = !1, this.loseTop.visible = !1, this.loseBG.visible = !0, this.liujuTop.visible = !0, GameSound.PlaySound("sound_huang")
        }
    }, n.clear = function () {
        for (var t = 0; t < this.personItems.length; t++) {
            var e = this.personItems[t];
            e.clear()
        }
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(GSResultView, "GSResultView");
var GSScene = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.bg = new egret.Bitmap, this.bg.texture = RES.getRes("game_bg"), this.bg.width = GameConfig.curWidth(), this.bg.height = GameConfig.curHeight(), this.gameLogo = new egret.Bitmap(GameRes.getUI("game_logo")), this.gameLogo.x = GSConfig.width - this.gameLogo.width >> 1, this.gameLogo.y = (GSConfig.height - this.gameLogo.height >> 1) - 110, this.addChild(this.bg), this.addChild(this.gameLogo), this.addChild(this.gsView = new GSView), this.addChild(this.gsResultView = new GSResultView), this.gsView.visible = !1, this.gsResultView.visible = !1, this.roomIDText = new egret.TextField, this.roomIDText.x = 15, this.roomIDText.y = 20, this.roomIDText.size = 18, this.addChild(this.roomIDText), this.inviteButton = GameRes.createCenterButton(111, 37, GSConfig.width >> 1, GSConfig.height >> 1, "game_invite_button", "邀请好友"), this.addChild(this.inviteButton), this.inviteButton.visible = !1, this.startButton = GameRes.createCenterButton(66, 29, 630, 480, "game_start_button", "开始"), this.addChild(this.startButton), this.jiesanButton = GameRes.createCenterButton(88, 33, 830, 200, "game_weixin_button", "退出房间"), this.addChild(this.jiesanButton), this.waitText = new egret.TextField, this.waitText.textAlign = egret.HorizontalAlign.CENTER, this.waitText.width = 400, this.waitText.anchorOffsetX = 200, this.waitText.x = GSConfig.width >> 1, this.waitText.y = (GSConfig.height >> 1) - 10, this.waitText.visible = !1, this.addChild(this.waitText), this.waitTipsText = new egret.TextField, this.waitTipsText.size = 20, this.waitTipsText.textAlign = egret.HorizontalAlign.CENTER, this.waitTipsText.width = 400, this.waitTipsText.anchorOffsetX = 200, this.waitTipsText.x = GSConfig.width >> 1, this.waitTipsText.y = (GSConfig.height >> 1) - 70, this.waitTipsText.text = "等待玩家进行操作，请稍后...", this.waitTipsText.visible = !1, this.addChild(this.waitTipsText), this.startButton.visible = this.inviteButton.visible = !1, this.readyButton = new mui.EButton("JS_continue_button_png", "继续游戏"), this.readyButton.x = 554, this.readyButton.y = 452, this.readyButton.textField.verticalCenter = -8, this.readyButton.visible = !1, this.addChild(this.readyButton), this.ruleText = new egret.TextField, this.ruleText.textColor = 12904098, this.ruleText.size = 14, this.ruleText.width = 360, this.ruleText.height = 20, this.ruleText.anchorOffsetX = this.ruleText.width >> 1, this.ruleText.anchorOffsetY = 30, this.ruleText.textAlign = egret.HorizontalAlign.CENTER, this.ruleText.x = GSConfig.width >> 1, this.ruleText.y = 285, this.addChild(this.ruleText), this.addChild(this.gameFight = new egret.Bitmap(GameRes.getUI("game_fight"))), this.addChild(this.gameFightTop = new egret.Bitmap(GameRes.getUI("game_fight"))), this.gameFight.anchorOffsetX = this.gameFight.width >> 1, this.gameFight.anchorOffsetY = this.gameFight.height >> 1, this.gameFight.x = GSConfig.width >> 1, this.gameFight.y = GSConfig.height >> 1, this.gameFightTop.anchorOffsetX = this.gameFightTop.width >> 1, this.gameFightTop.anchorOffsetY = this.gameFightTop.height >> 1, this.gameFightTop.x = GSConfig.width >> 1, this.gameFightTop.y = GSConfig.height >> 1, this.gameFight.visible = !1, this.gameFightTop.visible = !1, egret.Tween.get(this.startButton, {loop: !0}).to({alpha: .5}, 600).to({alpha: 1}, 600)
    }, n.playFight = function () {
        var t = this;
        this.gameFight.visible = !0, this.gameFightTop.visible = !0, this.gameFightTop.alpha = 1, this.gameFightTop.scaleX = this.gameFightTop.scaleY = 1, egret.Tween.get(this.gameFightTop).to({
            alpha: 0,
            scaleX: 2,
            scaleY: 2
        }, 300).to({}, 500).call(function (e) {
            t.gameFight.visible = !1, t.gameFightTop.visible = !1
        }, this), GameSound.PlaySound("sound_duijukaishi")
    }, n.updateRoomID = function (t) {
        var e = {1: "房卡模式", 2: "金币模式普通场", 3: "金币模式中级场", 4: "金币模式高级场"},
            i = UserDataModel.getInstance().roomCfg, n = {1: "roomcard", 2: "normal", 3: "middle", 4: "hight"},
            a = i[n[GSData.i.roomType]], s = a.baseScore;
        this.roomIDText.text = e[GSData.i.roomType] + " -> 房间号:" + t + " -> 底分:" + s
    }, n.updateRule = function (t) {
        this.ruleText.text = t
    }, n.bindInterface = function (t) {
        this.face = t, this.bg.touchEnabled = !0, this.bg.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.face.onBGTap, this.face), this.jiesanButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onJiesanTap, this.face), this.startButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onStartGame, this.face), this.inviteButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onInvite, this.face), this.readyButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onRebackContinue, this.face)
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(GSScene, "GSScene");
var GSTotlePerson = function (t) {
    function e(e) {
        t.call(this), this.showText = {0: "坐　庄：", 1: "胡　牌：", 2: "点　炮：", 3: "总　分："}, this.pserson = e
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this)
    }, n.loadHeadSuccHandler = function (t) {
        if (this.headUrl == t.eventData) {
            HttpManager.getInstance().removeEventListener(AppEvent.HEAD_ICON_LOAD_SUCC, this.loadHeadSuccHandler, this);
            var e = HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
            this._head.setHeadImg(e.texture)
        }
    }, n.refresh = function () {
        this.removeChildren();
        var t = this.pserson.nick, e = this.pserson.pic, i = +this.pserson.pos;
        this._head = new GSHeadIcon, this.addChild(this._head), this._head.x = 40, this._head.y = 60, this.headUrl = e, this._head.setHeadPic(this.headUrl);
        HeadIconCacheManager.getInstance().getUserIconByUrl(this.headUrl);
        this._name = new eui.Label, this.addChild(this._name), this._name.text = "" + t, this._name.size = 20, this._name.textAlign = "center", this._name.textColor = 16777215, this._name.fontFamily = GameConfig.FontFamily, this._name.y = 110, this._name.x = 40 - .5 * this._name.textWidth, this.iswin = new eui.Image, this.pserson.iswin ? this.iswin.visible = !0 : this.iswin.visible = !1, this.iswin.source = "sptWin", this.pao_img = new eui.Image, this.pserson.ispao ? this.pao_img.visible = !0 : this.pao_img.visible = !1, this.pao_img.source = "sptFangPao", 1 == +i && this._head.visibleRoomOwn(!0);
        var n = this.pserson.new_card;
        if (console.log(">>  " + n), n > 0) {
            this.card_group = new eui.Group;
            var a = new eui.HorizontalLayout;
            a.horizontalAlign = "center", a.verticalAlign = "middle", this.card_group.layout = a, this.addChild(this.card_group);
            var s = new eui.Image, o = new eui.Image;
            o.source = "money_icon";
            var r = new eui.Image;
            r.source = "card_cha", 1 == +i ? (this._head.visibleRoomOwn(!0), s.source = "card_jiangli2") : s.source = "card_jiangli1", this.card_group.addChild(s), this.card_group.addChild(o), this.card_group.addChild(r);
            for (var h = "" + n, c = 0; c < h.length; c++) {
                var l = h.charAt(c), u = new eui.Image;
                u.source = "card_" + l, this.card_group.addChild(u)
            }
        }
        var d = [], g = this.pserson.zhuang_num;
        d.push(g);
        var f = this.pserson.hu_num;
        d.push(f);
        var p = this.pserson.pao_num;
        d.push(p);
        var m = this.pserson.cur;
        d.push(m);
        for (var v = 0; v < d.length; v++) {
            var _ = new eui.Label;
            this.addChild(_), _.text = this.showText[v] + "" + d[v], _.size = 20, _.textColor = 16777215, _.fontFamily = GameConfig.FontFamily, _.x = 40 - .5 * _.textWidth, v == d.length - 1 ? (_.y = 140 + (_.textHeight + 20) * v + 20, this.iswin.y = _.y - 20, this.card_group && (this.card_group.y = _.y + 30)) : _.y = 140 + (_.textHeight + 20) * v, 2 == v && (this.pao_img.y = _.y - 20)
        }
        this.addChild(this.pao_img), this.addChild(this.iswin), this.iswin.x = -10, this.pao_img.x = -5, this.iswin.alpha = .6, this.pao_img.alpha = .6, this.card_group && (this.card_group.x = -45)
    }, e
}(eui.Component);
egret.registerClass(GSTotlePerson, "GSTotlePerson");
var GSTotleView = function (t) {
    function e() {
        t.call(this), this.spr = new egret.Sprite, this.roleList = [], this.fenList = [], this.width = GameConfig.curWidth(), this.height = GameConfig.curHeight(), this.addChild(this.spr), this.spr.graphics.clear(), this.spr.graphics.beginFill(0, .5), this.spr.graphics.drawRect(0, 100, GameConfig.curWidth(), GameConfig.curHeight() - 200)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.descImg = new eui.Image, this.descImg.source = "img_pjjs", this.addChild(this.descImg), this.descImg.horizontalCenter = 0, this.descImg.top = 30, this.ruleLabel = new eui.Label, this.addChild(this.ruleLabel), this.ruleLabel.horizontalCenter = 0, this.ruleLabel.top = 80, this.ruleLabel.bold = !0, this.ruleLabel.size = 20, this.ruleLabel.text = "" + GSData.i.rules, this._group = new eui.Group, this._group.right = this._group.left = this._group.bottom = this._group.top = 0;
        var e = new eui.HorizontalLayout;
        e.horizontalAlign = "center", e.gap = 70, e.paddingTop = 100, this._group.layout = e, this.addChild(this._group), this.logoImg = new eui.Image, this.addChild(this.logoImg), this.logoImg.source = "lymj_text", this.logoImg.top = 0, this.logoImg.right = 90, this.logoImg.width *= .5, this.logoImg.height *= .5, this.btn_close = new mui.EButton("JS_close"), this.addChild(this.btn_close), this.btn_close.top = 20, this.btn_close.right = 20, this.btn_close.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this), this.btn_fen = new mui.EButton("game_invite_button", "分  享"), this.addChild(this.btn_fen), this.btn_fen.horizontalCenter = 0, this.btn_fen.bottom = 20, this.btn_fen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onFen, this), this.btn_fen.textField.verticalCenter = -5, this.endTime = new eui.Label, this.addChild(this.endTime), this.endTime.size = 20, this.endTime.textAlign = "center", this.endTime.textColor = 16777215, this.endTime.fontFamily = GameConfig.FontFamily, this.endTime.right = 10, this.endTime.bottom = 70
    }, n.onFen = function () {
        Weixin.onClickShare(this.fenList)
    }, n.onClose = function () {
        var t = this.parent;
        t && t.contains(this) && (t.removeChild(this), GSController.i.jiesuanData = null, GSController.i.exit())
    }, n.show = function (t) {
        var e = GameLayerManager.gameLayer().mainLayer;
        if (this.top = this.right = this.bottom = this.left = 0, e.addChild(this), t) {
            this._group.removeChildren();
            var i = [];
            for (var n in t.persons) i.push(t.persons[n]);
            i.sort(function (t, e) {
                return +t.pos > +e.pos ? 1 : -1
            });
            for (var a = [], s = t.settlement, o = 0; o < i.length; o++) {
                var r = i[o], h = r.pos, c = +s[h], l = +r.pao_num;
                r.iswin = this.getMaxNum(s, c), r.cur = c;
                var u;
                this.roleList[o] ? (u = this.roleList[o], u.pserson = r) : (u = new GSTotlePerson(r), this.roleList.push(u)), a.push(l), this.fenList.push(r)
            }
            for (var d = 0; d < this.roleList.length; d++) {
                var g = this.roleList[d];
                +g.pserson.pao_num > 0 && (g.pserson.ispao = !0);
                for (var o = 0; o < a.length; o++) {
                    var f = a[o];
                    +g.pserson.pao_num < f && (g.pserson.ispao = !1)
                }
            }
            for (var p = 0; p < this.roleList.length; p++) {
                var m = this.roleList[p];
                this._group.addChild(m), m.refresh()
            }
            var v = new Date(Date.now()),
                _ = v.getFullYear() + "-" + (v.getMonth() + 1) + "-" + v.getDate() + " " + v.getHours() + ":" + v.getMinutes() + ":" + v.getSeconds();
            this.endTime.text = "" + _
        }
    }, n.getMaxNum = function (t, e) {
        var i = !0;
        if (0 >= e) return !1;
        for (var n in t) {
            var a = +t[n];
            if (a > e) {
                i = !1;
                break
            }
        }
        return i
    }, n.update = function () {
    }, e
}(eui.Component);
egret.registerClass(GSTotleView, "GSTotleView");
var GSView = function (t) {
    function e() {
        t.call(this), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.bindInterface = function (t) {
        this.face = t, this.settingButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onSettingTap, this.face), this.quitButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onQuitTap, this.face), this.talkButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.face.onTalkTap, this.face), this.siriButton.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.face.onSiriEnd, this), this.siriButton.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.face.onSiriBegin, this), this.siriButton.addEventListener(egret.TouchEvent.TOUCH_END, this.face.onSiriEnd, this), GameDispatcher.ins.addEventListener(EventType.Trigger_Play_Point, this.onUpdatePlayPoint, this), GameDispatcher.ins.addEventListener(EventType.Trigger_Play_Tips, this.onUpdatePlayTips, this), GameDispatcher.ins.addEventListener(EventType.Trigger_Prompt, this.onUpdateTips, this)
    }, n.onUpdatePlayPoint = function (t) {
        t && 2 == t.length ? this.showMark(t[1], 1 == t[0] || 3 == t[0] ? 2 : 0) : this.hideMark()
    }, n.onUpdatePlayTips = function (t) {
        t && 2 == t.length ? GameUtils.appear(t[0], t[1]) : (GameUtils.isDisappear = !0, GameUtils.disappear())
    }, n.onUpdateTips = function (t) {
        function e(t, e, i) {
            switch (void 0 === i && (i = -1), t) {
                case 1:
                    -1 == s.indexOf(e) && e.number != i && s.push(e);
                    break;
                case 2:
                    -1 == o.indexOf(e) && o.push(e)
            }
        }

        if (GSData.i.funcSelects && (this.clearTips(), 0 != t)) {
            for (var i, n = this.MJViews[1], a = 0; a < n.handCon.numChildren; a++) i = n.getHandCard(a), !i || i.index < 0 || (i.touchEnabled = !1);
            for (var s = [], o = [], r = 0; r < GSData.i.funcSelects.length; r++) {
                var h = GSData.i.funcSelects[r];
                if (0 != h.index && 6 != h.index) switch (h.index) {
                    case 1:
                        for (var a = 0; a < h.group.length; a++) for (var c = 0; c < h.group[a].pai.length; c++) e(1, h.group[a].pai[c], GSData.i.currPoolPai.number);
                        break;
                    case 2:
                        for (var a = 0; a < h.pai.length; a++) e(2, h.pai[a]);
                        break;
                    case 3:
                    case 4:
                        for (var a = 0; a < h.group.length; a++) switch (h.group[a].action) {
                            case 27:
                            case 28:
                                e(1, h.group[a].pai);
                                break;
                            default:
                                for (var c = 0; c < h.group[a].pai.length; c++) {
                                    var l = h.group[a].pai[c];
                                    switch (h.group[a].action) {
                                        case 22:
                                        case 26:
                                            e(1, l);
                                            break;
                                        default:
                                            e(2, l)
                                    }
                                }
                        }
                        break;
                    case 5:
                        for (var u = h.pai, c = 0; c < u.length; c++) {
                            var l = DataConvertUtils.getMahData(u[c].mahjongValue);
                            e(1, l)
                        }
                }
            }
            this.updateTips(1, s), this.updateTips(2, o)
        }
    }, n.updateTips = function (t, e) {
        function i(e) {
            for (var i, n = a.MJViews[1], s = 0; s < n.handCon.numChildren && (i = n.getHandCard(s), !i || i.index < 0 || i.pai.type != e.type || i.pai.number != e.number || (i.y = i.pos.y - GSConfig.moveUpDis, 1 != t)); s++) ;
        }

        for (var n, a = this, s = 0; s < e.length; s++) n = e[s], i(n)
    }, n.clearTips = function () {
        for (var t, e = this.MJViews[1], i = 0; i < e.handCon.numChildren; i++) t = e.getHandCard(i), !t || t.index < 0 || (t.y = t.pos.y, t.touchEnabled = !0)
    }, n.initView = function () {
        this.readyIcons = [], this.headViews = [], this.backUIContainer = new egret.DisplayObjectContainer, this.funcSelectView = new FuncSelectView, this.frontUIContainer = new egret.DisplayObjectContainer, this.frontEffectContainer = new egret.DisplayObjectContainer, this.addChild(this.backUIContainer), this.MJViews = [];
        for (var t = 1; 4 >= t; t++) {
            var e = new MJView(t);
            this.addChild(e), this.MJViews[t] = e
        }
        this.mark = new egret.Bitmap(RES.getRes("game_mark")), this.mark.anchorOffsetX = this.mark.width >> 1, this.mark.anchorOffsetY = this.mark.height, this.addChild(this.mark), this.hideMark(), this.addChild(this.funcSelectView), this.addChild(this.frontUIContainer), this.addChild(this.frontEffectContainer);
        for (var t = 1; t <= GSConfig.playerCount; t++) {
            var i = new GSHeadView(t);
            this.backUIContainer.addChild(i), this.headViews[t] = i, 1 == GSData.i.roomType ? (i.headIcon.killIcon.touchEnabled = !0, i.headIcon.killIcon.visible = !0, i.headIcon.killIcon.name = "" + t, i.headIcon.killIcon.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onKillTouch, this)) : (i.headIcon.killIcon.touchEnabled = !1, i.headIcon.killIcon.visible = !1), i.headIcon.headIcon.touchEnabled = !0, i.headIcon.headIcon.name = "" + t, i.headIcon.headIcon.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onHeadTouch, this)
        }
        this.centerBoom = new CenterBoom, this.centerBoom.x = GSConfig.width >> 1, this.centerBoom.y = GSConfig.height >> 1, this.backUIContainer.addChild(this.centerBoom);
        for (var t = 1; 4 >= t; t++) {
            var n = new egret.Bitmap(GameRes.getUI("game_ready"));
            n.anchorOffsetX = n.width >> 1, n.anchorOffsetY = n.height >> 1, n.x = GSConfig.readyIconPos[t].x, n.y = GSConfig.readyIconPos[t].y, this.addChild(n), this.readyIcons[t] = n
        }
        this.baoPaiView = new BaoPaiView, this.baoPaiView.x = 56, this.baoPaiView.y = 95, this.addChild(this.baoPaiView), this.funcEffect = new FuncEffectView, this.frontEffectContainer.addChild(this.funcEffect), this.baoEffect = new egret.Bitmap(GameRes.getUI("game_hanbao_BG")), this.baoEffect.anchorOffsetX = this.baoEffect.width >> 1, this.baoEffect.anchorOffsetY = this.baoEffect.height >> 1, this.baoEffect.x = GSConfig.width >> 1, this.baoEffect.y = 410, this.baoText = new egret.TextField, this.baoText.size = 30, this.baoText.bold = !0, this.baoText.text = "换宝牌了!", this.baoText.anchorOffsetX = this.baoText.textWidth >> 1, this.baoText.anchorOffsetY = this.baoText.textHeight >> 1, this.baoText.x = this.baoEffect.x, this.baoText.y = this.baoEffect.y, this.baoEffect.visible = this.baoText.visible = !1, GameLayerManager.gameLayer().effectLayer.addChild(this.baoEffect), GameLayerManager.gameLayer().effectLayer.addChild(this.baoText), this.rightTopButtonCon = new egret.DisplayObjectContainer, this.rightButtonCon = new egret.DisplayObjectContainer, this.rightTopButtonCon.x = GSConfig.width - 184, this.rightTopButtonCon.y = 18, this.rightButtonCon.x = GSConfig.width - 85, this.rightButtonCon.y = 412, this.addChild(this.rightTopButtonCon), this.addChild(this.rightButtonCon);
        var a = new egret.Bitmap(GameRes.getUI("game_buttons_bg"));
        this.settingButton = new mui.EButton("game_button_setting_png"), this.quitButton = new mui.EButton("game_button_quit_png"), this.settingButton.x = 10, this.quitButton.x = 82, this.rightTopButtonCon.addChild(a), this.rightTopButtonCon.addChild(this.settingButton), this.rightTopButtonCon.addChild(this.quitButton), this.talkButton = new mui.EButton("game_talk_png"), this.siriButton = new mui.EButton("game_siri_png"), this.siriButton.y = 72, this.rightButtonCon.addChild(this.talkButton)
    }, n.updateAllCount = function (t) {
    }, n.updateConViewByTing = function (t) {
        this.MJViews[1].setAllCardEnable(!1);
        for (var e = 0; e < t.length; e++) {
            var i = DataConvertUtils.getMahData(t[e].mahjongValue), n = this.MJViews[1].getHandCardByPai(i);
            n.y -= 25, n.activate()
        }
    }, n.drawLine = function () {
        this.draw = new egret.Shape, this.draw.graphics.lineStyle(2, 16776960);
        for (var t = 1; 4 >= t; t++) {
            var e = GSConfig.handPos[t];
            this.draw.graphics.moveTo(e.x, 0), this.draw.graphics.lineTo(e.x, GSConfig.height), this.draw.graphics.moveTo(0, e.y), this.draw.graphics.lineTo(GSConfig.width, e.y)
        }
        this.frontUIContainer.addChild(this.draw)
    }, n.updateRoom = function () {
        for (var t = 1; 4 >= t; t++) {
            var e = this.headViews[t], i = GSData.i.getRoomPlayerByDir(t);
            e.player = i, null != i ? ("offline" == i.status ? e.headIcon.offlineImg.visible = !0 : e.headIcon.offlineImg.visible = !1, e.nameText.text = i.nick, e.idText.text = i.uid, e.headIcon.setHeadPic(i.pic)) : e.nullPlayer()
        }
    }, n.getHeadView = function (t) {
        return this.headViews[t]
    }, n.hideReadyIcons = function () {
        for (var t = 1; 4 >= t; t++) this.readyIcons[t].visible = !1, this.headViews[t].headIcon.killIcon.visible = !1
    }, n.updateBaoPai = function (t) {
        this.baoPaiView.updatePai(t)
    }, n.clearMJView = function () {
        for (var t = 1; 4 >= t; t++) {
            var e = this.MJViews[t];
            e.clear()
        }
        this.centerBoom.reset()
    }, n.readyStateHeadReset = function () {
        for (var t = 1; 4 >= t; t++) {
            var e = this.headViews[t];
            e.scaleX = e.scaleY = 1, e.x = GSConfig.headinitPos[t].x, e.y = GSConfig.headinitPos[t].y, e.nameText.visible = !0, e.idText.visible = !0, e.numText.visible = !1
        }
    }, n.playStateHeadReset = function () {
        for (var t = 1; 4 >= t; t++) {
            var e = this.headViews[t];
            e.scaleX = e.scaleY = .8, e.x = GSConfig.headTargetPos[t].x, e.y = GSConfig.headTargetPos[t].y, e.nameText.visible = !0, e.idText.visible = !1, e.numText.visible = !0
        }
    }, n.headPlayPos = function () {
        for (var t = 1; t <= GSConfig.playerCount; t++) {
            var e = this.headViews[t];
            e.x = GSConfig.headTargetPos[t].x, e.y = GSConfig.headTargetPos[t].y
        }
    }, n.playFuncEffect = function (t, e) {
        if (GSConfig.funcPlayPos[t]) {
            var i = GameRes.getUI(GSConfig.funcSelects[GSConfig.actionPVP[e]].res);
            this.funcEffect.x = GSConfig.funcPlayPos[t].x, this.funcEffect.y = GSConfig.funcPlayPos[t].y, this.funcEffect.play(i)
        }
    }, n.playBaoEffect = function () {
        var t = this;
        this.baoEffect.visible = this.baoText.visible = !0, this.baoText.scaleX = this.baoText.scaleX = 3, egret.Tween.get(this.baoText).to({
            scaleX: 1,
            scaleY: 1
        }, 500).to({}, 1500).call(function (e) {
            t.baoEffect.visible = t.baoText.visible = !1
        }, this), GameSound.PlaySound("sound_ready")
    }, n.onKillTouch = function (t) {
        var e = t.currentTarget;
        this.face.onKillTouch(GSData.i.getPos(+e.name))
    }, n.onHeadTouch = function (t) {
        var e = t.currentTarget;
        this.face.onHeadTouch(+e.name)
    }, n.showMark = function (t, e, i) {
        void 0 === e && (e = 0), void 0 === i && (i = 0), this.mark && (egret.Tween.removeTweens(this.mark), this.mark.x = t.pos.x + e, this.mark.y = t.pos.y + i, egret.Tween.get(this.mark, {loop: !0}).to({
            y: this.mark.y - 20,
            scaleX: 1,
            scaleY: 1
        }, 300, egret.Ease.sineOut).to({
            y: this.mark.y,
            scaleX: 1.2,
            scaleY: .8
        }, 300, egret.Ease.sineIn), this.mark.visible = !0)
    }, n.hideMark = function () {
        this.mark && (this.mark.visible = !1)
    }, e
}(egret.Sprite);
egret.registerClass(GSView, "GSView");
var MJView = function (t) {
    function e(e) {
        t.call(this), this.dir = e, this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initView = function () {
        this.handCon = new egret.DisplayObjectContainer, this.poolCon = new egret.DisplayObjectContainer, this.addChild(this.handCon), this.addChild(this.poolCon)
    }, n.getHandCard = function (t) {
        for (var e = 0; e < this.handCon.numChildren; e++) {
            var i = this.handCon.getChildAt(e);
            if (i.index == t) return i
        }
    }, n.getHandCardByPai = function (t) {
        for (var e = 0; e < this.handCon.numChildren; e++) {
            var i = this.handCon.getChildAt(e);
            if (i.pai.type == t.type && i.pai.number == t.number && 3 != i.style) return i
        }
    }, n.setAllCardEnable = function (t) {
        for (var e = 0; e < this.handCon.numChildren; e++) {
            var i = this.handCon.getChildAt(e);
            t ? i.activate() : i.unactivate()
        }
    }, n.addHandCard = function (t) {
        this.lastCathchCard = t, 2 == this.dir && this.handCon.addChildAt(t, 0) || this.handCon.addChild(t)
    }, n.addPoolCard = function (t) {
        this.lastPoolCard = t, (1 == this.dir || 2 == this.dir) && this.poolCon.addChildAt(t, 0) || this.poolCon.addChild(t)
    }, n.removePoolCard = function () {
        this.poolCon.removeChild(this.lastPoolCard)
    }, n.removeAllHandCard = function () {
        for (; this.handCon.numChildren;) {
            var t = this.handCon.removeChildAt(0);
            CardView.returnCardView(t)
        }
    }, n.removeAllPoolCard = function () {
        for (; this.poolCon.numChildren;) {
            var t = this.poolCon.removeChildAt(0);
            CardView.returnCardView(t)
        }
    }, n.removeIndexPai = function () {
        for (var t = this.handCon.numChildren - 1; t >= 0; t--) {
            var e = this.handCon.getChildAt(t);
            e.index > -1 && (this.handCon.removeChild(e), CardView.returnCardView(e))
        }
    }, n.clear = function () {
        this.lastPoolCard = null, this.removeAllHandCard(), this.removeAllPoolCard()
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(MJView, "MJView");
var PersonItem = function (t) {
    function e() {
        t.call(this), this.so = {x: 150, y: 46}, this.huPos = {
            x: 838,
            y: 40
        }, this.dis = 105, this.hupaiDis = 44, this.o = {
            1: {ox: 127, oy: 0, w: 130},
            2: {ox: 200, oy: 0, w: 130},
            3: {ox: 451, oy: 0, w: 130},
            4: {ox: 652, oy: 0, w: 130},
            5: {ox: 703, oy: 30, w: 130},
            6: {ox: 703, oy: 50, w: 130}
        }, this.hupaiPos = new egret.Point, this.cardViews = [], this.init(), this.initView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.init = function () {
        this.currPos = new egret.Point(this.so.x, this.so.y)
    }, n.clear = function () {
        for (this.currPos.x = this.so.x, this.currPos.y = this.so.y; this.cardViews.length;) {
            var t = this.cardViews.shift();
            this.removeChild(t), CardView.returnCardView(t)
        }
    }, n.initView = function () {
        this.headIcon = new GSHeadIcon, this.headIcon.x = 83, this.headIcon.y = 39, this.addChild(this.headIcon), this.texts = [];
        for (var t = 1; 6 >= t; t++) {
            var e = new egret.TextField;
            e.size = 18, e.x = this.o[t].ox, e.y = this.o[t].oy, e.width = this.o[t].w, this.addChild(e), this.texts[t] = e
        }
        this.texts[3].width = 340, this.texts[3].textAlign = egret.HorizontalAlign.CENTER, this.texts[3].anchorOffsetX = this.texts[3].width >> 1, this.hulogo = new FuncEffectView, this.hulogo.x = this.huPos.x, this.hulogo.y = this.huPos.y, this.addChild(this.hulogo), this.diaoPaoLogo = new egret.Bitmap(GameRes.getUI("JS_fangpao")), this.diaoPaoLogo.anchorOffsetX = this.diaoPaoLogo.width >> 1, this.diaoPaoLogo.anchorOffsetY = this.diaoPaoLogo.height >> 1, this.diaoPaoLogo.x = this.hulogo.x, this.diaoPaoLogo.y = this.hulogo.y, this.addChild(this.diaoPaoLogo)
    }, n.updateHuLogo = function (t) {
        switch (t) {
            case 0:
                this.diaoPaoLogo.visible = !1, this.hulogo.reset();
                break;
            case 1:
                this.diaoPaoLogo.visible = !1, this.hulogo.reset(), this.hulogo.play(GameRes.getUI("JS_hulogo"), !1);
                break;
            case 2:
                this.hulogo.reset(), this.diaoPaoLogo.visible = !0
        }
    }, n.updatePai = function (t) {
        for (var e = t.hu_type, i = "", n = 0; n < e.length; n++) {
            var a = e[n];
            i += GSConfig.huTypeMap[a] + " "
        }
        this.texts[1].text = t.uid, this.texts[2].text = t.nick, this.texts[3].text = i, this.texts[4].text = "合计: " + (t.fan ? t.fan : 0) + "番", this.texts[5].text = "胡: " + t.cur, this.texts[6].text = "杠: " + t.gang, this.switchPai(1, t[1]), this.switchPai(2, t[2]), this.switchPai(24, t[24]), this.switchPai(25, t[25]), this.showLeft(t.left)
    }, n.showLeft = function (t) {
        for (var e = 0; e < t.length; e++) {
            var i = t[e], n = CardView.create(1, 4, i), a = GSConfig.getPosByIndex(1, 4, e);
            n.posView(this.currPos.x + a.x, this.currPos.y), this.addChild(n), this.cardViews.push(n)
        }
        GSConfig.handLens[t.length] && n.posView(n.pos.x + 10, this.currPos.y)
    }, n.addHuPai = function (t) {
        var e = CardView.create(1, 4, t);
        e.posView(this.hupaiPos.x, this.hupaiPos.y), this.addChild(e), this.cardViews.push(e)
    }, n.switchPai = function (t, e) {
        if (e) switch (t) {
            case 1:
            case 2:
                for (var i = 0; i < e.length; i++) {
                    for (var n = e[i], a = 0; a < n.length; a++) {
                        var s = n[a], o = CardView.create(1, 4, s), r = GSConfig.getPosByIndex(1, 4, a);
                        o.posView(this.currPos.x + r.x, this.currPos.y), this.addChild(o), this.cardViews.push(o)
                    }
                    this.currPos.x += this.dis
                }
                break;
            case 22:
                for (var i = 0; i < e.length; i++) {
                    var n = e[i].slice(-3);
                    e[i].length -= 3;
                    for (var h = e[i], c = [1, 1, 1], l = 0; l < h.length; l++) c[h[l].type - 1]++;
                    for (var a = 0; a < n.length; a++) {
                        var s = n[a], o = CardView.create(1, 4, s, c[a]), r = GSConfig.getPosByIndex(1, 4, a);
                        o.posView(this.currPos.x + r.x, this.currPos.y), this.addChild(o), this.cardViews.push(o)
                    }
                    this.currPos.x += this.dis
                }
                break;
            case 24:
                for (var i = 0; i < e.length; i++) {
                    for (var u, n = e[i], a = 0; 3 > a; a++) {
                        var s = n[a], o = CardView.create(1, 2, s);
                        o.scaleX = o.scaleY = .6;
                        var r = GSConfig.getPosByIndex(1, 4, a);
                        1 == a && (u = r), o.posView(this.currPos.x + r.x, this.currPos.y), this.addChild(o), this.cardViews.push(o)
                    }
                    o = CardView.create(1, 4, n[0]), o.posView(this.currPos.x + u.x, this.currPos.y - 10), this.addChild(o), this.cardViews.push(o), this.currPos.x += this.dis
                }
                break;
            case 25:
                for (var i = 0; i < e.length; i++) {
                    for (var u, n = e[i], a = 0; 3 > a; a++) {
                        var s = n[a], o = CardView.create(1, 4, s), r = GSConfig.getPosByIndex(1, 4, a);
                        1 == a && (u = r), o.posView(this.currPos.x + r.x, this.currPos.y), this.addChild(o), this.cardViews.push(o)
                    }
                    o = CardView.create(1, 4, n[0]), o.posView(this.currPos.x + u.x, this.currPos.y - 10), this.addChild(o), this.cardViews.push(o), this.currPos.x += this.dis
                }
                break;
            case 26:
                var n = e.slice(-3);
                e.length -= 3;
                for (var c = [1, 1, 1], i = 0; i < e.length; i++) c[e[i].number - 1]++;
                for (var i = 0; i < n.length; i++) {
                    var s = n[i], o = CardView.create(1, 4, s, c[i]), r = GSConfig.getPosByIndex(1, 4, i);
                    o.posView(this.currPos.x + r.x, this.currPos.y), this.addChild(o), this.cardViews.push(o)
                }
                this.currPos.x += this.dis
        }
    }, e
}(egret.DisplayObjectContainer);
egret.registerClass(PersonItem, "PersonItem");
var TimeEffectView = function () {
    function t(t) {
        this.callback = t, this.view = new egret.Bitmap, this.view.anchorOffsetX = 14, this.view.anchorOffsetY = 16, this.stop = !0
    }

    var e = (__define, t), i = e.prototype;
    return i.play = function (e) {
        this.shake = e, this.view.visible = !0, this.stop = !1, this.currCount = t.startCount, this.updateTime(), this.passTime = 0
    }, i.over = function () {
        this.stop = !0
    }, i.reset = function () {
        this.stop = !0, this.view.visible = !1
    }, i.update = function (t, e) {
        if (this.passTime += t, this.passTime >= 1e3) {
            if (this.passTime = 0, this.currCount--, this.currCount < 0) return this.over(), void (null != this.callback && this.shake && this.callback());
            this.updateTime()
        }
    }, i.updateTime = function () {
        this.view.texture = GameRes.getUI("time_" + this.currCount)
    }, t.startCount = 16, t
}();
egret.registerClass(TimeEffectView, "TimeEffectView", ["IUpdate"]);
var Main = function (t) {
    function e() {
        t.call(this);
        var e, i = "";
        if (window.hasOwnProperty("location")) {
            var n = location.search;
            if ("" != n) {
                var a = new egret.URLVariables(n);
                GameConfig.pushData(a.variables), i = a.variables.openid, "" != i && setCookie("wxopenid", i, 7)
            } else getCookie("wxopenid") && (GameConfig.openid = getCookie("wxopenid"))
        }
        if (e) {
            var s = NativeApi.getLocalData("codes");
            s && s == e && (e = null)
        }
        "" == i && is_weixin() && "" == getCookie("wxopenid") && HttpHandler.sendMsgCallBack("http://wx.upniao.com", "APPKEY=2801fc54e260574cbfbea92e91ed3709&notify_url=http://222.189.228.182:8337/notifyWxLogin&return_url=http://222.189.228.182:88/webplat/index.html", function (t) {
            console.log(t), 1 == t.c && (window.location.href = t.d)
        }, egret.URLRequestMethod.POST, this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createChildren = function () {
        t.prototype.createChildren.call(this), this.stage.orientation = egret.OrientationMode.AUTO;
        var e = new AssetAdapter;
        this.stage.registerImplementation("eui.IAssetAdapter", e), this.stage.registerImplementation("eui.IThemeAdapter", new ThemeAdapter), this.addChild(GameLayerManager.gameLayer()), RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.loadConfig("resource" + GlobalData.getInstance().resourceCode + "/default.res.json", "resource" + GlobalData.getInstance().resourceCode + "/"), GameParse.Initialization()
    }, n.onConfigComplete = function (t) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        var e = new eui.Theme("resource" + GlobalData.getInstance().resourceCode + "/default.thm.json", this.stage);
        e.addEventListener(eui.UIEvent.COMPLETE, this.onThemeLoadComplete, this)
    }, n.onThemeLoadComplete = function () {
        NativeApi.setLocalData("codes", GameConfig.code), GlobalData.getInstance().player = new Player, SceneManager.open(LoginScene, "LoginScene"), NativeApi.getLocalData("music_volume") ? GameMusic._volume = +NativeApi.getLocalData("music_volume") : NativeApi.setLocalData("music_volume", 1), NativeApi.getLocalData("sound_volume") ? GameSound._volume = +NativeApi.getLocalData("sound_volume") : NativeApi.setLocalData("sound_volume", 1), NativeApi.getLocalData("switch") || NativeApi.setLocalData("switch", 1)
    }, e
}(eui.UILayer);
egret.registerClass(Main, "Main");
var Player = function () {
    function t() {
        this.pic = "", this.ip = "192.168.2.1", this.agent = 0, this.sex = 0, this.drop_rate = 0, this.game_times = 1, this.playerInfo = []
    }

    var e = (__define, t), i = e.prototype;
    return i.update = function (t) {
        if (t) {
            for (var e in t) this[e] = t[e];
            this.sex = 1 == this.sex ? 1 : 0
        }
    }, t
}();
egret.registerClass(Player, "Player");
var UserDataModel = function () {
    function t() {
        this.bannerList = [], this.ip = "192.168.1.1", this.game_times = 1, this.drop_rate = 0, this.roomCfg = null
    }

    var e = (__define, t), i = e.prototype;
    return t.getInstance = function () {
        return null == this._instance && (this._instance = new t), this._instance
    }, i.setUserData = function (t) {
        this.uid = t.uid, this.uname = t.uname, this.nick = t.name, this.level = t.level, this.currency = t.currency, this.roomcard = t.roomcard, this.lastSignInTime = t.lastSignTime, this.lotRemainNumber = t.lotRemainNum, this.pic = t.iconUrl, this["package"] = t["package"], this.clubList = t.clubList, this.friendList = t.friendList, this.msgList = t.msgList, this.recordData = t.recordData, this.sexNum = t.sex, this.signature = t.signature, this.activityData = t.activityData, this.bgImgList = t.bgImgList, this.clubNum = t.clubNum
    }, t
}();
egret.registerClass(UserDataModel, "UserDataModel");
var GameParse;
!function (t) {
    function e() {
        for (var t in MessageID) var e = egret.getDefinitionByName(t)
    }

    t.Initialization = e
}(GameParse || (GameParse = {}));
var MessageID;
!function (t) {
    t._1 = 1, t.S1 = 1, t._2 = 2, t.S2 = 2, t._3 = 3, t.S3 = 3, t._4 = 4, t.S4 = 4, t._5 = 5, t.S5 = 5, t._6 = 6, t.S6 = 6, t._7 = 7, t.S7 = 7, t._8 = 8, t.S8 = 8, t._9 = 9, t.S9 = 9, t._10 = 10, t.S10 = 10, t._11 = 11, t.S11 = 11, t._12 = 12, t.S12 = 12, t._13 = 13, t.S13 = 13, t._14 = 14, t.S14 = 14, t._15 = 15, t.S15 = 15, t._16 = 16, t.S16 = 16, t._17 = 17, t.S17 = 17, t._18 = 18, t.S18 = 18, t._19 = 19, t.S19 = 19, t._20 = 20, t.S20 = 20, t._21 = 21, t.S21 = 21, t._22 = 22, t.S22 = 22, t._23 = 23, t.S23 = 23, t._24 = 24, t.S24 = 24, t._25 = 25, t.S25 = 25
}(MessageID || (MessageID = {}));
var _1 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return t || (t = GameConfig.users ? {
            channel: "test",
            openid: "" + GameConfig.users,
            openkey: "123456788",
            nick: "测试员",
            pic: "" + GlobalData.getInstance().player.pic,
            sex: "0"
        } : {
            channel: "" + GameConfig.platformType(),
            length: GameConfig.code.length,
            code: GameConfig.code
        }), JSON.stringify(t)
    }, t
}();
egret.registerClass(_1, "_1");
var _10 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return console.log("10  请求开始游戏!"), JSON.stringify(t)
    }, t
}();
egret.registerClass(_10, "_10");
var _11 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_11, "_11");
var _12 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_12, "_12");
var _13 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_13, "_13");
var _14 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_14, "_14");
var _15 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return t.action && (console.log(t.action), t.pai && console.log(t.pai)), JSON.stringify(t)
    }, t
}();
egret.registerClass(_15, "_15");
var _16 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return console.log(t), JSON.stringify(t)
    }, t
}();
egret.registerClass(_16, "_16");
var _17 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return console.log(t), JSON.stringify(t)
    }, t
}();
egret.registerClass(_17, "_17");
var _18 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_18, "_18");
var _19 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_19, "_19");
var _2 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return t ? JSON.stringify(t) : void 0
    }, t
}();
egret.registerClass(_2, "_2");
var _20 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_20, "_20");
var _21 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_21, "_21");
var _22 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_22, "_22");
var _23 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_23, "_23");
var _24 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_24, "_24");
var _25 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_25, "_25");
var _3 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return t ? JSON.stringify(t) : void 0
    }, t
}();
egret.registerClass(_3, "_3");
var _4 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return console.log(t), JSON.stringify(t)
    }, t
}();
egret.registerClass(_4, "_4");
var _5 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_5, "_5");
var _6 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_6, "_6");
var _7 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return t || (t = {sequence: 7, args: {}}), JSON.stringify(t)
    }, t
}();
egret.registerClass(_7, "_7");
var _8 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_8, "_8");
var _9 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.writeData = function (t) {
        return JSON.stringify(t)
    }, t
}();
egret.registerClass(_9, "_9");
var S1 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && t.data && (GlobalData.getInstance().sendLogin = !1, GlobalData.getInstance().connCount = 0, GlobalData.getInstance().player.update(t.data), SceneManager.find("LoginScene").onIn())
    }, t
}();
egret.registerClass(S1, "S1");
var S10 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
    }, t
}();
egret.registerClass(S10, "S10");
var S11 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            console.log("同步牌的信息", t);
            var e = +t.data.action;
            if (e > 0) switch (e) {
                case 100:
                    GSDataProxy.i.S2C_OwnCardInfo(t);
                    break;
                case 200:
                    GSDataProxy.i.S2C_OwnCatch(t.data.pai[0], t.data.dui_num, t.data.hasOwnProperty("fen")), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Prompt, !1);
                    break;
                case 300:
                    GSDataProxy.i.S2C_Bao(t.data);
                    break;
                default:
                    GSDataProxy.i.S2C_FuncResult(t.data.action, t.data.pai, t.data.turn, t.data.cur), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips)
            }
        }
    }, t
}();
egret.registerClass(S11, "S11");
var S12 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && +t.code <= 0 && GSController.i.exit()
    }, t
}();
egret.registerClass(S12, "S12");
var S13 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            console.log("game over", t), GSController.i.jiesuanData = t.data;
            var e = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
            e && GameLayerManager.gameLayer().panelLayer.contains(e) && (GSController.i.closeResultView(), GSController.i.closeGSView(), GSController.i.visibleTwoFuncButton(!1, !1), GSController.i.showTitleView(GSController.i.jiesuanData), e.clear())
        }
    }, t
}();
egret.registerClass(S13, "S13");
var S14 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            var e = t.data.vote, i = +t.data.timestamp,
                n = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
            if (n) {
                Heart.getInstance().dissolutionTime = i + 300 - Date.now() / 1e3, console.log(i + 300, Date.now() / 1e3);
                for (var a in e) n.plist[a] = e[a];
                GameLayerManager.gameLayer().panelLayer.contains(n) ? n.refresh() : (n.show(), n.refresh())
            }
        }
    }, t
}();
egret.registerClass(S14, "S14");
var S15 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && console.log("S15:", t.data)
    }, t
}();
egret.registerClass(S15, "S15");
var S16 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            console.log("牌局结算:", t);
            var e = t.data;
            GSDataProxy.i.S2C_FinalResult(e), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point)
        }
    }, t
}();
egret.registerClass(S16, "S16");
var S17 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && (console.log("17", t), GSDataProxy.i.S2C_ContinueGame(t.data))
    }, t
}();
egret.registerClass(S17, "S17");
var S18 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        Heart.getInstance().nettime = 0, console.log("砰！")
    }, t
}();
egret.registerClass(S18, "S18");
var S19 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        var e = StackManager.findDialog(RecordDialog, "RecordDialog");
        e && GameLayerManager.gameLayer().panelLayer.contains(e) && (e.obj = t.data, e.refreshList())
    }, t
}();
egret.registerClass(S19, "S19");
var S2 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && t.data && (GlobalData.getInstance().player.cur = +t.data.cur, console.log("创建成功,房间ID为：" + t.data.roomid, t), GSData.i.roomID = t.data.roomid, StackManager.closeDialog("CreateDialog"))
    }, t
}();
egret.registerClass(S2, "S2");
var S20 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        console.log(t.data);
        var e = StackManager.findDialog(RecordDialog, "RecordDialog");
        e && GameLayerManager.gameLayer().panelLayer.contains(e) && (e.xobj = t.data, e.refreshXList())
    }, t
}();
egret.registerClass(S20, "S20");
var S21 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
    }, t
}();
egret.registerClass(S21, "S21");
var S22 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        0 == +t.code
    }, t
}();
egret.registerClass(S22, "S22");
var S23 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        EffectUtils.showTips("你被房主踢出了房间！"), GSController.i.exit()
    }, t
}();
egret.registerClass(S23, "S23");
var S24 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t.data) {
            GlobalData.getInstance().player.update(t.data);
            var e = SceneManager.find("GameMainScene");
            e && e.update()
        }
    }, t
}();
egret.registerClass(S24, "S24");
var S25 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (console.log("25 广播消息", t), t.data.message) {
            var e = t.data.message, i = +e.type;
            switch (i) {
                case 1:
                    var n = e.chat, a = +n.id, s = +n.sex;
                    Global.showPao(n), GameSound.PlaySound("chat_" + s + "_" + a);
                    break;
                case 2:
                    var o = e.voice, r = o.id;
                    Weixin.downloadVoice(r)
            }
        }
    }, t
}();
egret.registerClass(S25, "S25");
var S3 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && (0 == +t.code && StackManager.closeDialog("JoinDialog"), console.log("加入房子返回", t))
    }, t
}();
egret.registerClass(S3, "S3");
var S4 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && (console.log("收到池中打出的牌", t), GSDataProxy.i.S2C_PoolPai(t))
    }, t
}();
egret.registerClass(S4, "S4");
var S5 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && (console.log("断线重连", t), GSDataProxy.i.S2C_RebackData(t.data))
    }, t
}();
egret.registerClass(S5, "S5");
var S6 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && (t && t.sequence && console.log("解散房间！"), GameLayerManager.gameLayer().messagBox.showMsg(function (t) {
            GSController.i.exit()
        }, "房间解散了，请进入其他房间！", null, null, !0))
    }, t
}();
egret.registerClass(S6, "S6");
var S7 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        t && t.data && t.data.agent && (GlobalData.getInstance().player.agent = +t.data.agent, EffectUtils.showTips("恭喜！绑定成功！", 5), StackManager.open(ShopDialog, "ShopDialog"), StackManager.closeDialog("BindDialog"))
    }, t
}();
egret.registerClass(S7, "S7");
var S8 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            console.log("同步房间人员信息", t), GSDataProxy.i.S2C_RoomPlayers(t.data.rules, t.data.infos);
            for (var e = t.data.infos, i = 0; i < e.length; i++) GlobalData.getInstance().player.playerInfo.push(e[i])
        }
    }, t
}();
egret.registerClass(S8, "S8");
var S9 = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.parseData = function (t) {
        if (t) {
            var e = +t.data.type;
            switch (e) {
                case 1:
                    break;
                case 2:
                    var i = +t.data.data.pos;
                    console.log("轮到谁抓牌:", i);
                    var n = t.data.data.dui_num, a = t.data.data.gang_end;
                    GSDataProxy.i.S2C_TurnDir(i, n, a), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips);
                    break;
                case 3:
                    var s = t.data.data;
                    console.log("显示功能菜单:", s), GSDataProxy.i.S2C_Function(s);
                    break;
                case 4:
                    console.log("同步其他方功能牌", t), GSDataProxy.i.S2C_FuncResult(t.data.data.action, t.data.data.pai, t.data.data.turn, t.data.data.cur), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips);
                    break;
                case 5:
                    console.log("删除手牌", t), GSDataProxy.i.S2C_DeletePai(t.data.data.pos, t.data.data.pai);
                    break;
                case 6:
                    var o = GSData.i.getDir(t.data.data.pos);
                    GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips, [GSData.i.getDir(o), t.data.data.pai])
            }
        }
    }, t
}();
egret.registerClass(S9, "S9");
var HttpHandler = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.sendMsgCallBack = function (t, e, i, n, a) {
        var s = new egret.URLLoader;
        s.dataFormat = egret.URLLoaderDataFormat.TEXT;
        var o = new egret.URLRequest(t);
        o.method = n, o.method = n, o.data = new egret.URLVariables(e), s.load(o), s.addEventListener(egret.Event.COMPLETE, function (t) {
            var e = t.target, n = e.data, s = JSON.parse(n.toString());
            i.call(a, s)
        }, this)
    }, t
}();
egret.registerClass(HttpHandler, "HttpHandler");
var SocketManager = function () {
    function t() {
        this.Agree = {}
    }

    var e = (__define, t), i = e.prototype;
    return t.getInstance = function () {
        return this.instance || (this.instance = new t), this.instance
    }, i.getCoreConn = function () {
        return this.core_conn || (this.core_conn = new SocketHandler(GameConfig.address_center.ip, GameConfig.address_center.port, 1)), this.core_conn.isConnected() || this.core_conn.createConn(), this.core_conn
    }, i.getGameConn = function () {
        return this.game_conn || (GameConfig.users ? this.game_conn = new SocketHandler(GameConfig.address_test.ip, GameConfig.address_test.port, 2) : this.game_conn = new SocketHandler(GameConfig.address_game.ip, GameConfig.address_game.port, 2)), this.game_conn.isConnected() || this.game_conn.createConn(), this.game_conn
    }, i.clean = function (t) {
        switch (t) {
            case 1:
                this.core_conn && this.core_conn.clean(), this.core_conn = null;
                break;
            case 2:
                this.game_conn && this.game_conn.clean(), this.game_conn = null
        }
    }, t
}();
egret.registerClass(SocketManager, "SocketManager");
var SocketHandler = function () {
    function t(t, e, i) {
        this.waitSend = [], this.ip = t, this.port = e, this.type = i
    }

    var e = (__define, t), i = e.prototype;
    return i.createConn = function () {
        this.clean()
    }, i.onConnect = function () {
        this.socket.connect(this.ip, this.port), this.status = 1, console.log("请求链接！" + this.type)
    }, i.onSuccess = function () {
        console.log("链接成功！" + this.type), this.status = 2;
        for (var t = 0; t < this.waitSend.length; t++) this.waitSend[t] && this.send(this.waitSend[t].mId, this.waitSend[t].obj);
        this.waitSend = []
    }, i.onBeClose = function () {
        switch (console.log("连接断开" + this.type), this.status = 3, this.type) {
            case 1:
                break;
            case 2:
        }
        GlobalData.getInstance().connCount++
    }, i.onClose = function () {
        console.log("主动断开连接！" + this.type), this.socket.close(), this.status = 3
    }, i.clean = function () {
        console.log("清空连接" + this.type), this.socket && (this.socket.removeEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this), this.socket.removeEventListener(egret.Event.CONNECT, this.onSuccess, this), this.socket.removeEventListener(egret.Event.CLOSE, this.onBeClose, this), this.socket = null)
    }, i.isConnected = function () {
        return 1 == this.status ? !0 : 2 == this.status ? this.socket.connected : !1
    }, i.getStatus = function () {
        return this.status
    }, i.setStatus = function (t) {
        this.status = t, 3 == this.status && SocketManager.getInstance().clean(this.type)
    }, i.onReceiveMessage = function () {
        var t = JSON.parse(this.socket.readUTF());
        +t.code > 0 && (GlobalData.getInstance().msgList[t.code] ? EffectUtils.showTips("" + GlobalData.getInstance().msgList[t.code], 5) : EffectUtils.showTips("未知错误 code：" + t.code, 5));
        var e = t.sequence, i = "S" + e, n = SocketManager.getInstance().Agree[i];
        n ? (console.log("the response messageID:" + i + " data is: ", t.data), n.parseData(t)) : console.log("can't find the response messageID:" + i + " data is: ", t.data)
    }, i.send = function (t, e) {
        if (void 0 === e && (e = null), !this.socket.connected) return void this.waitSend.push({mId: t, obj: e});
        var i = SocketManager.getInstance().Agree["_" + t];
        i ? (e && 1 != t && (e.sequence = t), this.socket.writeUTF(i.writeData(e))) : console.log("can't find the request messageID:_" + t)
    }, t
}();
egret.registerClass(SocketHandler, "SocketHandler");
var HttpManager = function (t) {
    function e() {
        t.call(this), this._httpServer = HttpServer.getInstance(), this._httpServer.addEventListener(AppEvent.HTTP_DATA_EVENT, this.responseHandle, this)
    }

    __extends(e, t);
    var i = __define, n = e, a = n.prototype;
    return e.getInstance = function () {
        return this._instance || (this._instance = new e), this._instance
    }, i(a, "userName", function () {
        return this._userName
    }), i(a, "userId", function () {
        return this._userId
    }), a.initSearchBar = function (t) {
        this._searchBar = t, this._seachTF = t.seach_TF
    }, i(a, "seachTF", function () {
        return this._seachTF
    }), a.setSearchBarVisible = function (t) {
        this._searchBar.visible = t
    }, i(a, "serverUrl", function () {
        return this._serverUrl
    }), a.initData = function () {
        this._serverUrl = RES.getRes("app_json").server
    }, i(a, "goodsList", function () {
        return this._goodsList
    }), a.titleTxt = function (t) {
        this._titleTxt = t
    }, a.title = function (t) {
        this._titleTxt.text = t
    }, a.responseHandle = function (t) {
        var i = t.eventData, n = i.action;
        switch (n) {
            case"onLogin":
                if (0 == i.status) {
                    var a = i.data;
                    UserDataModel.getInstance().setUserData(a), UserDataModel.getInstance().roomCfg = i.roomcfg, this.dispatchEvent(new AppEvent(AppEvent.LOGIN_SUCC))
                } else console.log(i.msg), TipsUtils.showTipsFromCenter(i.msg);
                break;
            case"addUser":
                0 == i.status ? this.dispatchEvent(new AppEvent(AppEvent.ADDUSER_SUCC)) : (console.log(i.msg), TipsUtils.showTipsFromCenter(i.msg));
                break;
            case"getRecordData":
                0 == i.status ? this.dispatchEvent(new AppEvent(AppEvent.GET_USER_RECORD_SUCC, i.recordData)) : (console.log(i.msg), TipsUtils.showTipsFromCenter(i.msg));
                break;
            case"getWxUserData":
                if (0 == i.status) {
                    var a = i.data;
                    UserDataModel.getInstance().setUserData(a), UserDataModel.getInstance().roomCfg = i.roomcfg, this.dispatchEvent(new AppEvent(AppEvent.LOGIN_SUCC))
                } else setTimeout(function () {
                    e.getInstance().getWxUserData(GameConfig.openid)
                }, 1e3)
        }
    }, a.login = function (t, e) {
        var i = {};
        i.uname = t, i.password = (new md5).hex_md5(e), this._httpServer.send(this._serverUrl + "onLogin", i)
    }, a.addUser = function (t, e) {
        var i = {};
        i.uname = t, i.password = e, this._httpServer.send(this._serverUrl + "addUser", i)
    }, a.getUserRecord = function (t) {
        var e = {};
        e.uid = t, this._httpServer.send(this._serverUrl + "getRecordData", e)
    }, a.getWxUserData = function (t) {
        var e = {};
        e.openid = t, this._httpServer.send(this._serverUrl + "getWxUserData", e)
    }, a.sceneSwitch = function (t, e, i, n, a) {
        void 0 === n && (n = 0), void 0 === a && (a = !0), egret.Tween.get(t).to({
            x: a ? i : n,
            alpha: !a
        }, 200), egret.Tween.get(e).to({x: a ? n : -i, alpha: a}, 200)
    }, e
}(egret.EventDispatcher);
egret.registerClass(HttpManager, "HttpManager");
var HttpServer = function (t) {
    function e() {
        t.call(this), this._pool = [], this._http = new egret.URLLoader, this._http.dataFormat = egret.URLLoaderDataFormat.TEXT, this._http.addEventListener(egret.Event.COMPLETE, this.response, this), this._http.addEventListener(egret.IOErrorEvent.IO_ERROR, this.ioError, this)
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.response = function (t) {
        this.stopTimer();
        var e = JSON.parse(this._http.data);
        this.dispatchEvent(new AppEvent(AppEvent.HTTP_DATA_EVENT, e)), this.next()
    }, n.next = function () {
        this._pool.shift(), this._currentRequest = null, this._pool.length && (this._currentRequest = this._pool[0], this._http.load(this._currentRequest))
    }, n.ioError = function (t) {
        console.log("IOError >>> " + this._currentRequest.url), this.next()
    }, e.getInstance = function () {
        return this._instance || (this._instance = new e), this._instance
    }, n.send = function (t, e) {
        var i = new egret.URLRequest;
        i.url = t, i.method = egret.URLRequestMethod.POST, i.data = new egret.URLVariables(UrlUtils.decode(e)), this._pool.push(i), 1 == this._pool.length && (this._currentRequest = i, this._http.load(i)), this.startTimer()
    }, n.startTimer = function () {
        this.stopTimer(), this._timer = new egret.Timer(1e3, 15), this._timer.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.timerCompleteHandler, this), this._timer.start()
    }, n.timerCompleteHandler = function (t) {
        console.log("请求超时")
    }, n.stopTimer = function () {
        null != this._timer && (this._timer.stop(), this._timer.removeEventListener(egret.TimerEvent.TIMER_COMPLETE, this.timerCompleteHandler, this), this._timer = null)
    }, e
}(egret.EventDispatcher);
egret.registerClass(HttpServer, "HttpServer");
var SocketClientManager = function (t) {
    function e() {
        t.call(this), this._reconnectFailCount = 0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return e.getInstance = function () {
        return null == this._instance && (this._instance = new e), this._instance
    }, n.init = function () {
        var t = this, e = RES.getRes("app_json").socketServer;
        this._socket = io.connect(e, {
            reconnect: !0,
            "force new connection": !1
        }), this._socket.on("connect_failed", function (t) {
            console.log("连接失败")
        }), this._socket.on("error", function (t) {
            console.log("连接服务器出错")
        }), this._socket.on("reconnecting", function (e) {
            t._reconnectFailCount++, TipsUtils.showTipsFromCenter("连接已断开，正在尝试重新连接..."), t._reconnectFailCount >= 1e3 && alert("连接服务器失败，请检查您当前的网络")
        }), this._socket.on("reconnect", function (e) {
            TipsUtils.clearEffectAll(), TipsUtils.showTipsFromCenter("重新连接成功！"), t._reconnectFailCount = 0, t._socket.emit("onReconect", UserDataModel.getInstance().uid)
        }), this.initAllSocketNotify(), this._socket.emit("initSocket", UserDataModel.getInstance().uid, UserDataModel.getInstance().uname)
    }, n.initAllSocketNotify = function () {
        var t = this;
        this._socket.on("getip", function (t) {
            UserDataModel.getInstance().ip = t
        }), this._socket.on("initRoom", function (t) {
            console.log(t), GSData.i.roomID = t.roomId, GSData.i.roomType = t.roomType, GSData.i.max_round = t.maxRound, e.getInstance().dispatchEvent(new AppEvent(AppEvent.SOCKET_ROOM_DATA_EVENT))
        }), this._socket.on("onUserIn", function (t) {
            GSDataProxy.i.S2C_RoomPlayers(t.rules, t.infos, t.uid)
        }), this._socket.on("onUserLeave", function (t) {
            GSDataProxy.i.S2C_RoomPlayers(t.rules, t.infos, t.uid)
        }), this._socket.on("startGame", function (t) {
            var e = t.data.mahjongList;
            t.data.pai = [];
            for (var i = 0; i < e.length; i++) if (e[i] > 0) for (var n = 0; n < e[i]; n++) {
                var a = DataConvertUtils.getMahData(i);
                t.data.pai.push(a)
            }
            t.data.pai.sort(function (t, e) {
                return Math.random() > .5
            }), GSDataProxy.i.S2C_OwnCardInfo(t)
        }), this._socket.on("doSelfSpecial", function (t) {
            GSDataProxy.i.S2C_Function(t.data)
        }), this._socket.on("onPlayCard", function (t) {
            var e = {};
            e.data = {};
            var i = DataConvertUtils.getMahData(t.mahjongValue);
            e.data.type = i.type, e.data.number = i.number, e.data.pos = t.deskStation, GSDataProxy.i.S2C_PoolPai(e)
        }), this._socket.on("updateSpecialList", function (t) {
            GSController.i.scene.waitTipsText.visible = !1, GSDataProxy.i.S2C_FuncResult(t.action, t.pai, t.turn, t.chiPai, t.cur), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips)
        }), this._socket.on("deletepai", function (t, e) {
            GSDataProxy.i.S2C_DeletePai(t, e)
        }), this._socket.on("getCard", function (t) {
            GSController.i.scene.waitTipsText.visible = !1, GSDataProxy.i.S2C_OwnCatch(t.pai, t.dui_num), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Prompt, !1)
        }), this._socket.on("otherGetCard", function (t) {
            GSController.i.scene.waitTipsText.visible = !1, GSDataProxy.i.S2C_TurnDir(t.pos, t.dui_num, t.gang_end), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips)
        }), this._socket.on("userTing", function (t) {
            GSDataProxy.i.S2C_UserTing(t)
        }), this._socket.on("joinFail", function (t) {
            EffectUtils.showTips(t, 5, !1)
        }), this._socket.on("createFail", function (t) {
            EffectUtils.showTips(t, 5, !1)
        }), this._socket.on("allowPushCard", function () {
            if (GSController.i.allowPushCard = !0, GSData.i.isTing) {
                var t = GSController.i.gsView.MJViews[1].lastCathchCard.pai;
                e.getInstance().playCard(t), GSController.i.allowPushCard = !1, GSController.i.startPushTimeInterval()
            }
        }), this._socket.on("showResult", function (t) {
            GSController.i.scene.waitTipsText.visible = !1, GSDataProxy.i.S2C_FinalResult(t), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Tips), GameDispatcher.ins.dispatchEvent(EventType.Trigger_Play_Point)
        }), this._socket.on("gameover", function (t, e, i) {
            GSController.i.jiesuanData = t;
            var n = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
            n && GameLayerManager.gameLayer().panelLayer.contains(n) && n.clear(), GSController.i.closeResultView(), GSController.i.closeGSView(), GSController.i.visibleTwoFuncButton(!1, !1), GSController.i.showTitleView(GSController.i.jiesuanData), e && i ? EffectUtils.showTips("由于您的金币不足，退出了房间！") : e && !i && EffectUtils.showTips("由于房间内有玩家金币不足，牌局解散了！")
        }), this._socket.on("onUserContinue", function (t) {
            GSDataProxy.i.S2C_ContinueGame(t)
        }), this._socket.on("onUserChat", function (t) {
            var e = +t.type;
            switch (e) {
                case 1:
                    var i = t.chat, n = +i.id, a = +i.sex;
                    Global.showPao(i), GameSound.PlaySound("chat_" + a + "_" + n);
                    break;
                case 2:
                    var s = t.voice, o = s.id;
                    Weixin.downloadVoice(o)
            }
        }), this._socket.on("onKicked", function () {
            EffectUtils.showTips("你被房主踢出了房间！"), GSController.i.exit()
        }), this._socket.on("reback", function (e) {
            GSDataProxy.i.S2C_RebackData(e), t.joinRoom(GSData.i.roomID + "")
        }), this._socket.on("onDissRoom", function (t) {
            GSDataProxy.i.S2C_DissRoom(t)
        }), this._socket.on("roomDissovled", function () {
            GameLayerManager.gameLayer().messagBox.showMsg(function (t) {
                GSController.i.exit(), GSController.i.closeGSView();
                var e = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
                e && GameLayerManager.gameLayer().panelLayer.contains(e) && (GSController.i.closeResultView(), GSController.i.closeGSView(), GSController.i.visibleTwoFuncButton(!1, !1), e.clear())
            }, "房间解散了，请进入其他房间！", null, null, !0)
        }), this._socket.on("showTips", function () {
            GSController.i.scene.waitTipsText.visible = !0
        })
    }, n.joinRoom = function (t) {
        void 0 === t && (t = "");
        var e = {};
        e.currency = UserDataModel.getInstance().currency, e.nickName = UserDataModel.getInstance().nick, e.uid = UserDataModel.getInstance().uid, e.iconUrl = UserDataModel.getInstance().pic, e.sexNum = UserDataModel.getInstance().sexNum, e.uname = UserDataModel.getInstance().uname, this._socket.emit("joinRoom", e, t)
    }, n.createRoom = function (t) {
        void 0 === t && (t = null);
        var e = {};
        e.currency = UserDataModel.getInstance().currency, e.nickName = UserDataModel.getInstance().nick, e.uid = UserDataModel.getInstance().uid, e.iconUrl = UserDataModel.getInstance().pic, e.sexNum = UserDataModel.getInstance().sexNum, e.uname = UserDataModel.getInstance().uname, this._socket.emit("createRoom", e, t)
    }, n.startGame = function () {
        this._socket.emit("startGame"), 2 == GSData.i.max_round ? UserDataModel.getInstance().roomcard -= 4 : 4 == GSData.i.max_round ? UserDataModel.getInstance().roomcard -= 6 : UserDataModel.getInstance().roomcard -= 12;
        var t = SceneManager.find("GameMainScene");
        t && t.update()
    }, n.leaveRoom = function (t) {
        this._socket.emit("leaveRoom", GSData.i.getPos(1))
    }, n.playCard = function (t) {
        var e = DataConvertUtils.getMahjongValue(t);
        this._socket.emit("playCard", e, GSData.i.isTing)
    }, n.checkSelfSpecial = function () {
        this._socket.emit("checkSelfSpecial")
    }, n.skipSpecial = function () {
        this._socket.emit("skipSpecial")
    }, n.doSpecial = function (t, e, i) {
        void 0 === e && (e = []), void 0 === i && (i = -1);
        var n = {type: t, eatList: e, gangValue: i};
        this._socket.emit("doSpecial", n)
    }, n.continueGame = function () {
        this._socket.emit("continueGame")
    }, n.sendChat = function (t) {
        this._socket.emit("userChat", t)
    }, n.kickUser = function (t) {
        this._socket.emit("kickUser", t)
    }, n.dissolveRoom = function (t) {
        this._socket.emit("dissolveRoom", t)
    }, n.enterNormalRoom = function (t) {
        var e = {};
        e.currency = UserDataModel.getInstance().currency, e.nickName = UserDataModel.getInstance().nick, e.uid = UserDataModel.getInstance().uid, e.iconUrl = UserDataModel.getInstance().pic, e.sexNum = UserDataModel.getInstance().sexNum, e.uname = UserDataModel.getInstance().uname, this._socket.emit("enternormalRoom", t, e)
    }, e._instance = null, e
}(egret.EventDispatcher);
egret.registerClass(SocketClientManager, "SocketClientManager");
var GameMusic;
!function (t) {
    function e(e, i, n) {
        void 0 === i && (i = 0), void 0 === n && (n = 0);
        var a = +NativeApi.getLocalData("switch");
        if (0 != a) {
            var s, o, r = t.SoundDict;
            if (t.CloseAllSound(), r[e]) s = r[e].s, o = r[e].c; else if (s = RES.getRes("" + e), !s) return void t.loadMusic(e);
            o = s.play(n, i), o.volume = t._volume, r[e] = {s: s, c: o}
        }
    }

    function i() {
        var e = t.SoundDict;
        for (var i in e) {
            var n = e[i].c;
            n && n.stop()
        }
    }

    function n(e) {
        if (t.SoundDict[e]) {
            var i = t.SoundDict[e].c;
            i && i.stop()
        }
    }

    function a(e) {
        RES.getResAsync(e, function () {
            t.PlaySound(e)
        }, this)
    }

    function s(e) {
        void 0 === e && (e = 0), t._volume = e;
        var i = t.SoundDict;
        for (var n in i) {
            var a = i[n].c;
            a && a.position > 0 && (a.volume = e)
        }
    }

    t.SoundDict = {}, t._volume = 1, t.PlaySound = e, t.CloseAllSound = i, t.CloseSound = n, t.loadMusic = a, t.setSoundVolume = s
}(GameMusic || (GameMusic = {}));
var GameSound;
!function (t) {
    function e(e, i, n) {
        void 0 === i && (i = 1), void 0 === n && (n = 0);
        var a = +NativeApi.getLocalData("switch");
        if (0 != a) {
            var s, o, r = t.SoundDict;
            if (r[e]) s = r[e].s, o = r[e].c; else if (s = RES.getRes("" + e), !s) return void t.loadMusic(e);
            o = s.play(n, i), o.volume = t._volume, r[e] = {s: s, c: o}
        }
    }

    function i() {
        var e = t.SoundDict;
        for (var i in e) {
            var n = e[i].c;
            n && n.stop()
        }
    }

    function n(e) {
        if (t.SoundDict[e]) {
            var i = t.SoundDict[e].c;
            i && i.stop()
        }
    }

    function a(e) {
        RES.getResAsync(e, function () {
            t.PlaySound(e)
        }, this)
    }

    function s(e) {
        void 0 === e && (e = 0), t._volume = e;
        var i = t.SoundDict;
        for (var n in i) {
            var a = i[n].c;
            a && a.position > 0 && (a.volume = e)
        }
    }

    t.SoundDict = {}, t._volume = 1, t.PlaySound = e, t.CloseAllSound = i, t.CloseSound = n, t.loadMusic = a, t.setSoundVolume = s
}(GameSound || (GameSound = {}));
var Test = function () {
    function t(t) {
        this.gPos = {
            0: {x: 35, y: 600, zspc: 10},
            1: {x: 847, y: 441, zspc: 10},
            2: {x: 744, y: 57, zspc: 10},
            3: {x: 95, y: 136, zspc: 10}
        }, this.zPos = {
            0: {x: 0, y: 600},
            1: {x: 847, y: 0},
            2: {x: 0, y: 57},
            3: {x: 95, y: 0}
        }, this.cards_0 = [], this.cards_1 = [], this.cards_2 = [], this.cards_3 = [], this.animations = [], this.roundMe = !0, this.container = t, this.container.addEventListener(egret.Event.ENTER_FRAME, this.update, this), this.lastTime = egret.getTimer(), Card.bindGame(this), this.test()
    }

    var e = (__define, t), i = e.prototype;
    return i.update = function () {
        var t = egret.getTimer() - this.lastTime;
        if (this.animations.length > 0) for (var e = 0; e < this.animations.length; e++) {
            var i = this.animations[e];
            i.update(t), i.completed && (this.animations.splice(e, 1), e--)
        }
        this.lastTime = egret.getTimer()
    }, i.test = function () {
        var t = new egret.Shape;
        t.graphics.beginFill(43775), t.graphics.drawRect(0, 0, 960, 640), this.container.addChild(t), this.initPosCards(0, 13), this.initPosCards(1, 13), this.initPosCards(2, 13), this.initPosCards(3, 13), this.catchCard(0)
    }, i.catchCard = function (t) {
        switch (t) {
            case 0:
                var e = Card.create(t, 1), i = this.zPos[t];
                e.posView(i.x, i.y), e.activateTouch(!0), this.container.addChild(e.view), this.cards_0.push(e), e["catch"]()
        }
    }, i.initPosCards = function (t, e) {
        void 0 === e && (e = 14);
        var i, n, a, s = this.gPos[t];
        switch (t) {
            case 0:
                for (i = 0; 13 > i; i++) {
                    var o = Card.create(t, 1);
                    n = s.x + o.hSpacing * i, o.posView(n, s.y), o.activateTouch(!0), this.container.addChild(o.view), this.cards_0.push(o)
                }
                this.zPos[t].x = s.x + o.hSpacing * i + s.zspc;
                break;
            case 1:
                for (a = this.container.numChildren, i = 0; 13 > i; i++) {
                    var o = Card.create(t, 1);
                    n = s.y - o.hSpacing * i, o.posView(s.x, n), this.container.addChildAt(o.view, a), this.cards_1.push(o)
                }
                this.zPos[t].y = s.y - o.hSpacing * i + s.zspc;
                break;
            case 2:
                for (i = 0; 13 > i; i++) {
                    var o = Card.create(t, 1);
                    n = s.x - o.hSpacing * i, o.posView(n, s.y), this.container.addChild(o.view), this.cards_2.push(o)
                }
                this.zPos[t].x = s.x - o.hSpacing * i + s.zspc;
                break;
            case 3:
                for (i = 0; 13 > i; i++) {
                    var o = Card.create(t, 1);
                    n = s.y + o.hSpacing * i, o.posView(s.x, n), this.container.addChild(o.view), this.cards_3.push(o)
                }
                this.zPos[t].y = s.y + o.hSpacing * i + s.zspc
        }
    }, i.onClickCard = function (t) {
        if (null == Card.focusCard) t.moveUp(), Card.focusCard = t; else {
            if (Card.focusCard == t && this.roundMe) return console.log("出牌"), void (Card.focusCard = null);
            if (Card.focusCard.viewByPos(), Card.focusCard == t) return void (Card.focusCard = null);
            t.moveUp(), Card.focusCard = t
        }
    }, t
}();
egret.registerClass(Test, "Test", ["IGame"]);
var ThemeAdapter = function () {
    function t() {
    }

    var e = (__define, t), i = e.prototype;
    return i.getTheme = function (t, e, i, n) {
        function a(t) {
            e.call(n, t)
        }

        function s(e) {
            e.resItem.url == t && (RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, s, null), i.call(n))
        }

        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, s, null), RES.getResByUrl(t, a, this, RES.ResourceItem.TYPE_TEXT)
    }, t
}();
egret.registerClass(ThemeAdapter, "ThemeAdapter", ["eui.IThemeAdapter"]);
var ConversionUtil = function () {
    function t() {
        this.CLASS_NAME = "ConversionUtil"
    }

    var e = (__define, t), i = e.prototype;
    return t.bitsToBytes = function (t) {
        return t / 8
    }, t.bitsToKilobits = function (t) {
        return t / 1024
    }, t.bitsToKilobytes = function (t) {
        return t / 8192
    }, t.bytesToBits = function (t) {
        return 8 * t
    }, t.bytesToKilobits = function (t) {
        return t / 128
    }, t.bytesToKilobytes = function (t) {
        return t / 1024
    }, t.kilobitsToBits = function (t) {
        return 1024 * t
    }, t.kilobitsToBytes = function (t) {
        return 128 * t
    }, t.kilobitsToKilobytes = function (t) {
        return t / 8
    }, t.kilobytesToBits = function (t) {
        return 8192 * t
    }, t.kilobytesToBytes = function (t) {
        return 1024 * t
    }, t.kilobytesToKilobits = function (t) {
        return 8 * t
    }, t.millisecondsToSeconds = function (t) {
        return t / 1e3
    }, t.millisecondsToMinutes = function (t) {
        return this.secondsToMinutes(this.millisecondsToSeconds(t))
    }, t.millisecondsToHours = function (t) {
        return this.minutesToHours(this.millisecondsToMinutes(t))
    }, t.millisecondsToDays = function (t) {
        return this.hoursToDays(this.millisecondsToHours(t))
    }, t.secondsToMilliseconds = function (t) {
        return 1e3 * t
    }, t.secondsToMinutes = function (t) {
        return t / 60
    }, t.secondsToHours = function (t) {
        return this.minutesToHours(this.secondsToMinutes(t))
    }, t.secondsToDays = function (t) {
        return this.hoursToDays(this.secondsToHours(t))
    }, t.minutesToMilliseconds = function (t) {
        return this.secondsToMilliseconds(this.minutesToSeconds(t))
    }, t.minutesToSeconds = function (t) {
        return 60 * t
    }, t.minutesToHours = function (t) {
        return t / 60
    }, t.minutesToDays = function (t) {
        return this.hoursToDays(this.minutesToHours(t))
    }, t.hoursToMilliseconds = function (t) {
        return this.secondsToMilliseconds(this.hoursToSeconds(t))
    }, t.hoursToSeconds = function (t) {
        return this.minutesToSeconds(this.hoursToMinutes(t))
    }, t.hoursToMinutes = function (t) {
        return 60 * t
    }, t.hoursToDays = function (t) {
        return t / 24
    }, t.daysToMilliseconds = function (t) {
        return this.secondsToMilliseconds(this.daysToSeconds(t))
    }, t.daysToSeconds = function (t) {
        return this.minutesToSeconds(this.daysToMinutes(t))
    }, t.daysToMinutes = function (t) {
        return this.hoursToMinutes(this.daysToHours(t))
    }, t.daysToHours = function (t) {
        return 24 * t
    }, t.degreesToRadians = function (t) {
        return t * (Math.PI / 180)
    }, t.radiansToDegrees = function (t) {
        return t * (180 / Math.PI)
    }, i.toString = function () {
        return this.CLASS_NAME
    }, t
}();
egret.registerClass(ConversionUtil, "ConversionUtil");
var DateUtil = function () {
    function t() {
        this.CLASS_NAME = "DateUtil"
    }

    var e = (__define, t), i = e.prototype;
    return t.formatDate = function (t, e) {
        for (var i, n = "", a = "", s = -1, o = e.length; ++s < o;) if (a = e.substr(s, 1), "^" == a) n += e.substr(++s, 1); else switch (a) {
            case"d":
                n += NumberUtil.addLeadingZero(t.getDate());
                break;
            case"D":
                n += this.getDayAbbrAsString(t.getDay());
                break;
            case"j":
                n += t.getDate().toString();
                break;
            case"l":
                n += this.getDayAsString(t.getDay());
                break;
            case"N":
                i = t.getDay(), 0 == i && (i = 7), n += i.toString();
                break;
            case"S":
                n += NumberUtil.getOrdinalSuffix(t.getDate());
                break;
            case"w":
                n += t.getDay().toString();
                break;
            case"z":
                n += NumberUtil.addLeadingZero(this.getDayOfTheYear(t)).toString();
                break;
            case"W":
                n += NumberUtil.addLeadingZero(this.getWeekOfTheYear(t)).toString();
                break;
            case"F":
                n += this.getMonthAsString(t.getMonth());
                break;
            case"m":
                n += NumberUtil.addLeadingZero(t.getMonth() + 1);
                break;
            case"M":
                n += this.getMonthAbbrAsString(t.getMonth());
                break;
            case"n":
                n += (t.getMonth() + 1).toString();
                break;
            case"t":
                n += this.getDaysInMonth(t.getMonth(), t.getFullYear()).toString();
                break;
            case"L":
                n += this.isLeapYear(t.getFullYear()) ? "1" : "0";
                break;
            case"o":
            case"Y":
                n += t.getFullYear().toString();
                break;
            case"y":
                n += t.getFullYear().toString().substr(-2);
                break;
            case"a":
                n += this.getMeridiem(t.getHours()).toLowerCase();
                break;
            case"A":
                n += this.getMeridiem(t.getHours());
                break;
            case"B":
                n += NumberUtil.format(this.getInternetTime(t), null, 3);
                break;
            case"g":
                i = t.getHours(), 0 == i ? i = 12 : i > 12 && (i -= 12), n += i.toString();
                break;
            case"G":
                n += t.getHours().toString();
                break;
            case"h":
                i = t.getHours(), 0 == i ? i = 12 : i > 12 && (i -= 12), n += NumberUtil.addLeadingZero(i);
                break;
            case"H":
                n += NumberUtil.addLeadingZero(t.getHours());
                break;
            case"i":
                n += NumberUtil.addLeadingZero(t.getMinutes());
                break;
            case"s":
                n += NumberUtil.addLeadingZero(t.getSeconds());
                break;
            case"I":
                n += this.isDaylightSavings(t) ? "1" : "0";
                break;
            case"O":
                n += this.getFormattedDifferenceFromUTC(t);
                break;
            case"P":
                n += this.getFormattedDifferenceFromUTC(t, ":");
                break;
            case"e":
            case"T":
                n += this.getTimezone(t);
                break;
            case"Z":
                n += Math.round(this.getDifferenceFromUTCInSeconds(t)).toString();
                break;
            case"c":
                n += t.getFullYear() + "-" + NumberUtil.addLeadingZero(t.getMonth() + 1) + "-" + NumberUtil.addLeadingZero(t.getDate()) + "T" + NumberUtil.addLeadingZero(t.getHours()) + ":" + NumberUtil.addLeadingZero(t.getMinutes()) + ":" + NumberUtil.addLeadingZero(t.getSeconds()) + this.getFormattedDifferenceFromUTC(t, ":");
                break;
            case"r":
                n += this.getDayAbbrAsString(t.getDay()) + ", " + t.getDate() + " " + this.getMonthAbbrAsString(t.getMonth()) + " " + t.getFullYear() + " " + NumberUtil.addLeadingZero(t.getHours()) + ":" + NumberUtil.addLeadingZero(t.getMinutes()) + ":" + NumberUtil.addLeadingZero(t.getSeconds()) + " " + this.getFormattedDifferenceFromUTC(t);
                break;
            case"U":
                i = Math.round(t.getTime() / 1e3), n += i.toString();
                break;
            default:
                n += e.substr(s, 1)
        }
        return n
    }, t.iso8601ToDate = function (t) {
        var e = t.toUpperCase().split("T"), i = e[0].split("-"), n = e.length <= 1 ? [] : e[1].split(":"),
            a = ObjectUtil.isEmpty(i[0]) ? 0 : parseInt(i[0]), s = ObjectUtil.isEmpty(i[1]) ? 0 : parseInt(i[1]) - 1,
            o = ObjectUtil.isEmpty(i[2]) ? 1 : parseInt(i[2]), r = ObjectUtil.isEmpty(n[0]) ? 0 : parseInt(n[0]),
            h = ObjectUtil.isEmpty(n[1]) ? 0 : parseInt(n[1]), c = 0, l = 0;
        if (void 0 != n[2]) {
            var u, d = n[2].length;
            if (n[2].indexOf("+") > -1 ? d = n[2].indexOf("+") : n[2].indexOf("-") > -1 ? d = n[2].indexOf("-") : n[2].indexOf("Z") > -1 && (d = n[2].indexOf("Z")), isNaN(d) && (u = n[2].slice(0, d), c = Math.floor(u), l = 1e3 * (u % 1 / 1)), d != n[2].length) {
                var g = n[2].slice(d), f = this.getDifferenceFromUTCInHours(new Date(a, s, o));
                switch (g.charAt(0)) {
                    case"+":
                    case"-":
                        r -= f + g.slice(0);
                        break;
                    case"Z":
                        r -= f
                }
            }
        }
        return new Date(a, s, o, r, h, c, l)
    }, t.getMonthAsString = function (t) {
        var e = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return e[t]
    }, t.getMonthAbbrAsString = function (t) {
        return this.getMonthAsString(t).substr(0, 3)
    }, t.getDayAsString = function (t) {
        var e = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        return e[t]
    }, t.getDayAbbrAsString = function (t) {
        return this.getDayAsString(t).substr(0, 3)
    }, t.getDaysInMonth = function (t, e) {
        return new Date(t, ++e, 0).getDate()
    }, t.getMeridiem = function (t) {
        return 12 > t ? "AM" : "PM"
    }, t.getTimeBetween = function (t, e) {
        return e.getTime() - t.getTime()
    }, t.getCountdownUntil = function (t, e) {
        var i = ConversionUtil.millisecondsToDays(this.getTimeBetween(t, e)), n = ConversionUtil.daysToHours(i % 1),
            a = ConversionUtil.hoursToMinutes(n % 1), s = ConversionUtil.minutesToSeconds(a % 1),
            o = ConversionUtil.secondsToMilliseconds(s % 1), r = {
                days: parseInt(i.toString()),
                hours: parseInt(n.toString()),
                minutes: parseInt(a.toString()),
                seconds: parseInt(s.toString()),
                milliseconds: parseInt(o.toString())
            };
        return r
    }, t.getDifferenceFromUTCInSeconds = function (t) {
        return ConversionUtil.minutesToSeconds(t.getTimezoneOffset())
    }, t.getDifferenceFromUTCInHours = function (t) {
        return ConversionUtil.minutesToHours(t.getTimezoneOffset())
    }, t.getFormattedDifferenceFromUTC = function (t, e) {
        void 0 === e && (e = "");
        var i = -t.getTimezoneOffset() < 0 ? "-" : "+";
        return i + NumberUtil.addLeadingZero(Math.floor(this.getDifferenceFromUTCInHours(t))) + e + NumberUtil.addLeadingZero(t.getTimezoneOffset() % 60)
    }, t.getTimezone = function (t) {
        var e = ["IDLW", "NT", "HST", "AKST", "PST", "MST", "CST", "EST", "AST", "ADT", "AT", "WAT", "GMT", "CET", "EET", "MSK", "ZP4", "ZP5", "ZP6", "WAST", "WST", "JST", "AEST", "AEDT", "NZST"],
            i = Math.round(12 + -(t.getTimezoneOffset() / 60));
        return this.isDaylightSavings(t) && i--, e[i]
    }, t.isLeapYear = function (t) {
        return 29 == this.getDaysInMonth(t, 1)
    }, t.isDaylightSavings = function (t) {
        for (var e, i = 12, n = t.getTimezoneOffset(); i--;) if (e = new Date(t.getFullYear(), i, 1).getTimezoneOffset(), e != n) return e > n;
        return !1
    }, t.getInternetTime = function (t) {
        var e = (t.getUTCHours() + 1 + ConversionUtil.minutesToHours(t.getUTCMinutes()) + ConversionUtil.secondsToHours(t.getUTCSeconds())) / .024;
        return e > 1e3 ? e - 1e3 : e
    }, t.getDayOfTheYear = function (t) {
        var e = new Date(t.getFullYear(), 0, 1);
        return (t.getTime() - e.getTime()) / 864e5
    }, t.getWeekOfTheYear = function (t) {
        var e = new Date(t.getFullYear(), 0, 1), i = 9 - e.getDay(),
            n = new Date(t.getFullYear(), 0, i > 7 ? i - 7 : i),
            a = new Date(t.getFullYear(), t.getMonth(), t.getDate()),
            s = ConversionUtil.millisecondsToDays(a.getTime() - n.getTime()) / 7 + 1;
        return 0 == s ? this.getWeekOfTheYear(new Date(t.getFullYear() - 1, 11, 31)) : s
    }, t.equals = function (t, e) {
        return t.valueOf() == e.valueOf()
    }, i.toString = function () {
        return this.CLASS_NAME
    }, t
}();
egret.registerClass(DateUtil, "DateUtil");
var EffectUtils;
!function (t) {
    function e(t, e) {
        if (void 0 === e && (e = 1e3), null == this.rotationArr && (this.rotationArr = []), !this.rotationArr[t.hashCode]) {
            null != this.rotationArr[t.hashCode] && this.rotationArr[t.hashCode] || (this.rotationArr[t.hashCode] = !0);
            var i = this, n = t.width, a = t.height;
            t.anchorOffsetX = .5 * n, t.anchorOffsetY = .5 * a, t.x += .5 * n, t.y += .5 * a;
            var s = function () {
                i.rotationArr[t.hashCode] && null != t && (t.rotation = 0, egret.Tween.get(t).to({rotation: 360}, e).call(s, i))
            };
            s()
        }
    }

    function i(t) {
        null == this.rotationArr && (this.rotationArr = []), this.rotationArr[t.hashCode] = !1
    }

    function n(t, e) {
        void 0 === e && (e = 1e3), new BitmapBlink(t, e)
    }

    function a(t) {
        void 0 === t && (t = 1);
        var e = GameConfig.curPanel, i = 40, n = e.x, a = e.y;
        1 == t ? (egret.Tween.get(e).to({x: e.x - 10}, i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x + 20}, i)
        }, this, 2 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x - 20}, i)
        }, this, 3 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x + 20}, i)
        }, this, 4 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: n}, i)
        }, this, 5 * i)) : (egret.Tween.get(e).to({x: e.x - 10, y: e.y}, i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x + 20, y: e.y}, i)
        }, this, 2 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x, y: e.y + 15}, i)
        }, this, 3 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x, y: e.y - 20}, i)
        }, this, 4 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: e.x, y: e.y + 10}, i)
        }, this, 5 * i), egret.setTimeout(function () {
            egret.Tween.get(e).to({x: n, y: a}, i)
        }, this, 6 * i))
    }

    function s(t, e, i) {
        switch (void 0 === t && (t = ""), void 0 === e && (e = 1), void 0 === i && (i = !1), e) {
            case 1:
                TipsUtils.showTipsDownToUp(t, i);
                break;
            case 2:
                TipsUtils.showTipsLeftOrRight(t, i, !0);
                break;
            case 3:
                TipsUtils.showTipsLeftOrRight(t, i, !1);
                break;
            case 4:
                TipsUtils.showTipsFromCenter(t, i);
                break;
            case 5:
                TipsUtils.showTipsBigToSmall(t, i);
                break;
            default:
                TipsUtils.showTipsBigToSmall(t, i)
        }
    }

    function o(t, e) {
        void 0 === e && (e = 1);
        var i = this;
        if (!i.isPlayEffectPlay) {
            i.isPlayEffectPlay = !0;
            var n = function () {
                i.isPlayEffectPlay = !1
            }, a = function () {
                1 == e ? egret.Tween.get(t).to({
                    scaleX: 1,
                    scaleY: 1,
                    x: t.x - t.width / 4,
                    y: t.y - t.height / 4
                }, 500, egret.Ease.elasticOut).call(n, i) : 2 == e ? egret.Tween.get(t).to({
                    scaleX: 1,
                    scaleY: 1,
                    x: t.x - t.width / 4,
                    y: t.y - t.height / 4
                }, 500, egret.Ease.backOut).call(n, i) : 3 == e && egret.Tween.get(t).to({
                    scaleX: 1,
                    scaleY: 1,
                    x: t.x - t.width / 4,
                    y: t.y - t.height / 4
                }, 100).call(n, i)
            };
            egret.Tween.get(t).to({
                scaleX: .5,
                scaleY: .5,
                x: t.x + t.width / 4,
                y: t.y + t.height / 4
            }, 100, egret.Ease.sineIn).call(a, this)
        }
    }

    function r(t) {
        var e = function () {
            if (null != t) {
                var i = function () {
                    t.scaleX = 1, t.scaleY = 1, egret.Tween.get(t).to({alpha: 1}, 1e3).call(e, self)
                };
                t.alpha = 1, egret.Tween.get(t).to({scaleX: 1.5, scaleY: 1.5, alpha: 0}, 1e3).call(i, self)
            }
        };
        e()
    }

    function h(t, e, i) {
        void 0 === i && (i = 20);
        var n = function () {
            if (null != t) {
                var a = function () {
                    egret.Tween.get(t).to({rotation: -i}, e).call(n, this)
                };
                egret.Tween.get(t).to({rotation: i}, e).call(a, this)
            }
        };
        n()
    }

    function c(t, e, i) {
        void 0 === e && (e = ""), void 0 === i && (i = 200);
        for (var n = e.split(""), a = n.length, s = 0; a > s; s++) egret.setTimeout(function () {
            t.appendText(n[Number(this)])
        }, s, i * s)
    }

    t.rotationEffect = e, t.removeRotationEffect = i, t.blinkEffect = n, t.shakeScreen = a, t.showTips = s;
    t.playEffect = o, t.playScaleEffect = r, t.rockObj = h, t.typerEffect = c
}(EffectUtils || (EffectUtils = {}));
var Global;
!function (t) {
    function e(t) {
        void 0 === t && (t = 2e3), navigator.vibrate && navigator.vibrate(t)
    }

    function i(t) {
        if (void 0 === t && (t = []), !this.ipwarmisshow && t && !(t.length <= 0)) {
            for (var e = !1, i = 0; i < t.length; i++) {
                var n = t[i];
                if (n) {
                    for (var a = 0; a < t.length; a++) {
                        var s = t[a];
                        if (s && +n.uid != +s.uid && n.ip == s.ip) {
                            e = !0;
                            break
                        }
                    }
                    if (e) break
                }
            }
            if (e) {
                this.ipwarmisshow = !0, this.ipwarmGroup || (this.ipwarmGroup = new eui.Group, this.ipwarmGroup.width = GameConfig.curWidth(), this.ipwarmGroup.height = 50, this.ipwarmGroup.touchEnabled = !1, this.ipwarmGroup.touchChildren = !1), this.ipwarmSprite || (this.ipwarmSprite = new egret.Sprite, this.ipwarmSprite.graphics.clear(), this.ipwarmSprite.graphics.beginFill(0, .5), this.ipwarmSprite.graphics.drawRoundRect(0, 0, this.ipwarmGroup.width, this.ipwarmGroup.height, 30, 30), this.ipwarmSprite.graphics.endFill(), this.ipwarmGroup.addChild(this.ipwarmSprite)), this.ipwarmLabel || (this.ipwarmLabel = new eui.Label, this.ipwarmLabel.horizontalCenter = 0, this.ipwarmLabel.verticalCenter = 0, this.ipwarmLabel.textAlign = "center", this.ipwarmLabel.size = 20, this.ipwarmLabel.fontFamily = GameConfig.FontFamily, this.ipwarmLabel.text = "注意：有玩家IP地址相同，请点击玩家头像查看", this.ipwarmGroup.addChild(this.ipwarmLabel));
                var o = GameLayerManager.gameLayer();
                o.addChild(this.ipwarmGroup), this.ipwarmGroup.y = GameConfig.curHeight();
                var r = this;
                egret.Tween.get(r.ipwarmGroup, {loop: !1}).to({y: GameConfig.curHeight() - r.ipwarmGroup.height + 5}, 1e3).to({}, 5e3).to({y: GameConfig.curHeight()}, 1e3).call(function () {
                    o.removeChild(r.ipwarmGroup), r.ipwarmisshow = !1
                }, r)
            }
        }
    }

    function n(t) {
        function e() {
            s && h.contains(s) && (h.removeChild(s), s = null)
        }

        var i = this, n = +t.id, a = t.uid, s = new ChatPao, o = StackManager.findDialog(ChatDialog, "ChatDialog"),
            r = o.chat, h = GameLayerManager.gameLayer().mainLayer;
        h.addChild(s), s._txt.text = r[n].text;
        var c = GSData.i.roomPlayerMap[a], l = GSConfig.headTargetPos[c.dir], u = l.x, d = l.y;
        switch (+c.dir) {
            case 1:
                d -= 120, u -= 30, s._biao.x = 21;
                break;
            case 2:
                s._biao.x = 301, u -= 306, d -= 120;
                break;
            case 3:
                s._biao.x = 301, d -= 70, u -= 366;
                break;
            case 4:
                d -= 120, u -= 30, s._biao.x = 21
        }
        s.x = u, s.y = d, egret.setTimeout(e, i, 3e3)
    }

    function a(e) {
        void 0 === e && (e = !1);
        var i = GameLayerManager.gameLayer().loadLayer;
        e ? (this.share_img || (this.share_img = new eui.Image), this.share_sprite || (this.share_sprite = new egret.Sprite), this.share_img.source = "share_img", i.addChild(t.share_sprite), i.addChild(t.share_img), this.share_sprite.graphics.clear(), this.share_sprite.graphics.beginFill(0, .8), this.share_sprite.graphics.drawRect(0, 0, GameConfig.curWidth(), GameConfig.curHeight()), this.share_sprite.graphics.endFill(), this.share_img.right = 0, this.share_img.bottom = 20) : (this.share_img && i.contains(this.share_img) && i.removeChild(this.share_img), this.share_sprite && i.contains(this.share_sprite) && (this.share_sprite.graphics.clear(), i.removeChild(this.share_sprite)))
    }

    function s() {
        t.waitPanel && GameLayerManager.gameLayer().maskLayer.contains(t.waitPanel) || (t.waitPanel = new WaitPanel(1), GameLayerManager.gameLayer().maskLayer.removeChildren(), GameLayerManager.gameLayer().maskLayer.addChild(t.waitPanel))
    }

    function o() {
        null != t.waitPanel && GameLayerManager.gameLayer().maskLayer.contains(t.waitPanel) && GameLayerManager.gameLayer().maskLayer.removeChild(t.waitPanel)
    }

    function r(t) {
        var e = new egret.HtmlTextParser;
        return e.parser(t)
    }

    function h(t, e, i, n, a, s, o, r) {
        return void 0 === t && (t = 3394815), void 0 === e && (e = .8), void 0 === i && (i = 35), void 0 === n && (n = 35), void 0 === a && (a = 2), void 0 === s && (s = 3), void 0 === o && (o = !1), void 0 === r && (r = !1), [new egret.GlowFilter(t, e, i, n, a, s, o, r)]
    }

    function c() {
        var t = [.3, .6, 0, 0, 0, .3, .6, 0, 0, 0, .3, .6, 0, 0, 0, 0, 0, 0, 1, 0];
        return [new egret.ColorMatrixFilter(t)]
    }

    function l(t, e) {
        return void 0 === t && (t = 1), void 0 === e && (e = 1), [new egret.BlurFilter(t, e)]
    }

    function u(t, e, i, n, a, s, o, r, h, c) {
        return void 0 === t && (t = 6), void 0 === e && (e = 45), void 0 === i && (i = 0), void 0 === n && (n = .7), void 0 === a && (a = 16), void 0 === s && (s = 16), void 0 === o && (o = .65), void 0 === r && (r = 1), void 0 === h && (h = !1), void 0 === c && (c = !1), [new egret.DropShadowFilter(t, e, i, n, a, s, o, r, h, c)]
    }

    function d(e, i) {
        void 0 === e && (e = 20), void 0 === i && (i = 16777215), t.hornPanel || (t.hornPanel = new HornPanel);
        var n = GameLayerManager.gameLayer().hornGroup;
        if (n) {
            if (n.contains(t.hornPanel)) return;
            var a = SceneManager.find("GameMainScene");
            if (!a) return;
            GameLayerManager.gameLayer().sceneLayer.contains(a) && GameLayerManager.gameLayer().sceneLayer.visible ? n.top = 120 : n.top = 20, t.hornPanel.playEff(n, e, i)
        }
    }

    function g() {
        this._voiceImg || (this._voiceImg = new eui.Image), this._voiceImg.source = "voice_icon", this._voiceImg.horizontalCenter = 0, this._voiceImg.verticalCenter = 0, GameLayerManager.gameLayer().effectLayer.addChild(this._voiceImg)
    }

    function f() {
        this.voiceStop = !0, this._voiceImg && GameLayerManager.gameLayer().effectLayer.contains(this._voiceImg) && GameLayerManager.gameLayer().effectLayer.removeChild(this._voiceImg)
    }

    function p(t) {
        if (!(t >= 1e3)) return "00:00:00";
        var e = Math.floor(t / 1e3), i = Math.floor(e / 3600), n = Math.floor(e / 60), a = Math.floor(e % 60);
        n %= 60;
        var s = "";
        if (10 > i && (s += "0"), i > 24) {
            var o = 0;
            o = Math.floor(i / 24), i -= 24 * o, s += o + "天 "
        }
        return s += i.toString() + ":", 10 > n && (s += "0"), s += n.toString() + ":", 10 > a && (s += "0"), s += a.toString()
    }

    t.ipwarmisshow = !1, t.phoneVibrate = e, t.showIP = i, t.showPao = n, t.showShare = a, t.showWaritPanel = s, t.hideWaritPanel = o, t.getTextFlow = r, t.getGlowFilter = h, t.getColorFlilter = c, t.getBlurFliter = l, t.getDropShadowFilter = u, t.showHorn = d, t.showVoice = g, t.hideVoice = f, t.getStringBySeconds = p
}(Global || (Global = {}));
var HeadIconCacheManager = function () {
    function t() {
        this._iconTextureList = {}, this._loaderList = {}
    }

    var e = (__define, t), i = e.prototype;
    return t.getInstance = function () {
        return null == this._instance && (this._instance = new t), this._instance
    }, i.getUserIconByUrl = function (t) {
        if (t != HttpManager.getInstance().serverUrl) {
            if (null == this._iconTextureList[t] && null == this._loaderList[t]) {
                var e = new egret.ImageLoader;
                e.addEventListener(egret.Event.COMPLETE, this.onLoadComplete, this), e.load(t), this._loaderList[t] = e
            }
            return this._iconTextureList[t]
        }
    }, i.onLoadComplete = function (t) {
        var e, i = t.target;
        for (var n in this._loaderList) if (this._loaderList[n] == i) {
            e = n;
            break
        }
        var a = i.data, s = new egret.Texture;
        s.bitmapData = a;
        var o = new egret.Bitmap(s);
        o.cacheAsBitmap = !0, this._iconTextureList[e] = o, HttpManager.getInstance().dispatchEvent(new AppEvent(AppEvent.HEAD_ICON_LOAD_SUCC, e))
    }, t
}();
egret.registerClass(HeadIconCacheManager, "HeadIconCacheManager");
var Heart = function () {
    function t() {
        this.second = 0, this.nettime = 0, this.testHorn = 0, this.loginTime = 0, this.dissolutionTime = 0, this.timer = new egret.Timer(100), this.timer.addEventListener(egret.TimerEvent.TIMER, this.onTimer, this), this.timer.start()
    }

    var e = (__define, t), i = e.prototype;
    return t.getInstance = function () {
        return null == this.instance && (this.instance = new t), this.instance
    }, i.onTimer = function (t) {
        if (this.second++, this.second >= 10) {
            if (this.second = 0, this.testHorn++, this.testHorn >= 120) {
                this.testHorn = 0;
                var e = Math.floor(Math.random() * GlobalData.getInstance().gamewarmList.length);
                GlobalData.getInstance().hornList.push(GlobalData.getInstance().gamewarmList[e])
            }
            if (GlobalData.getInstance().hornList.length > 0 && Global.showHorn(20, 4258047), this.dissolutionTime > 0) {
                this.dissolutionTime--;
                var i = StackManager.findDialog(DissolutionDialog, "DissolutionDialog");
                i && GameLayerManager.gameLayer().panelLayer.contains(i) && i.onTimes(this.dissolutionTime)
            }
        }
    }, t.instance = null, t
}();
egret.registerClass(Heart, "Heart");
var HornPanel = function (t) {
    function e() {
        t.call(this), this.textList = [], this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this), this.skinName = "HornSkin", this.touchChildren = !0
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.onComplete = function () {
    }, n.createChildren = function () {
        t.prototype.createChildren.call(this);
        var e = this;
        e._sprite = new egret.Sprite, e._sprite.width = 630, e._sprite.height = 38, e._sprite.x = 78, e.addChild(e._sprite), e._shape = new egret.Shape, e._shape.graphics.clear(), e._shape.graphics.beginFill(0, 1), e._shape.graphics.drawRect(0, 0, 630, 38), e._shape.graphics.endFill(), e._shape.x = 78, e._shape.y = 0, e.addChild(e._shape), e._sprite.mask = e._shape
    }, n.playEff = function (t, e, i) {
        var n = this;
        t.addChild(n), n.horizontalCenter = 0, n.width = 0, n._horn.visible = !1, egret.Tween.get(n).to({width: 718}, 300, egret.Ease.sineOut).call(function () {
            n._horn.visible = !0, n.playHorn(t, e, i), n.addEventListener(egret.Event.ENTER_FRAME, n.onFrame, n)
        }, n), n._group = t, n._color = i, n._size = e
    }, n.playHorn = function (t, e, i) {
        var n = this, a = GlobalData.getInstance().hornList, s = a.shift(), o = new eui.Label;
        o.text = s, o.textAlign = "center", o.verticalAlign = "middle", o.fontFamily = GameConfig.FontFamily, o.size = e, o.textColor = i, o.x = n.width, o.bold = !0, n._sprite.addChild(o), o.y = .5 * n.height - .5 * o.textHeight, n.textList.push(o)
    }, n.onFrame = function (t) {
        var e = this;
        if (e.textList.length <= 0) return void e.endPlay(e._group);
        var i = GlobalData.getInstance().hornList, n = e.textList[0];
        n.x <= -n.textWidth && (e._sprite.removeChild(n), e.textList.shift(), n = null);
        for (var a = 0; a < e.textList.length; a++) {
            var s = e.textList[a];
            s.x -= 2, a == e.textList.length - 1 && s.x <= -s.textWidth + 400 && i.length > 0 && e.playHorn(e._group, e._size, e._color)
        }
    }, n.endPlay = function (t) {
        var e = this;
        e._horn.visible = !1, e.removeEventListener(egret.Event.ENTER_FRAME, e.onFrame, e), egret.Tween.get(e).to({width: 0}, 300, egret.Ease.sineOut).call(function () {
            t.contains(e) && t.removeChild(e)
        }, e)
    }, e
}(eui.Component);
egret.registerClass(HornPanel, "HornPanel");
var md5 = function () {
    function t() {
        this.hexcase = 0, this.b64pad = ""
    }

    var e = (__define, t), i = e.prototype;
    return i.hex_md5 = function (t) {
        return this.rstr2hex(this.rstr_md5(this.str2rstr_utf8(t)))
    }, i.b64_md5 = function (t) {
        return this.rstr2b64(this.rstr_md5(this.str2rstr_utf8(t)))
    }, i.any_md5 = function (t, e) {
        return this.rstr2any(this.rstr_md5(this.str2rstr_utf8(t)), e)
    }, i.hex_hmac_md5 = function (t, e) {
        return this.rstr2hex(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)))
    }, i.b64_hmac_md5 = function (t, e) {
        return this.rstr2b64(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)))
    }, i.any_hmac_md5 = function (t, e, i) {
        return this.rstr2any(this.rstr_hmac_md5(this.str2rstr_utf8(t), this.str2rstr_utf8(e)), i)
    }, i.md5_vm_test = function () {
        return "900150983cd24fb0d6963f7d28e17f72" == this.hex_md5("abc").toLowerCase()
    }, i.rstr_md5 = function (t) {
        return this.binl2rstr(this.binl_md5(this.rstr2binl(t), 8 * t.length))
    }, i.rstr_hmac_md5 = function (t, e) {
        var i = this.rstr2binl(t);
        i.length > 16 && (i = this.binl_md5(i, 8 * t.length));
        for (var n = Array(16), a = Array(16), s = 0; 16 > s; s++) n[s] = 909522486 ^ i[s], a[s] = 1549556828 ^ i[s];
        var o = this.binl_md5(n.concat(this.rstr2binl(e)), 512 + 8 * e.length);
        return this.binl2rstr(this.binl_md5(a.concat(o), 640))
    }, i.rstr2hex = function (t) {
        try {
            this.hexcase
        } catch (e) {
            this.hexcase = 0
        }
        for (var i, n = this.hexcase ? "0123456789ABCDEF" : "0123456789abcdef", a = "", s = 0; s < t.length; s++) i = t.charCodeAt(s), a += n.charAt(i >>> 4 & 15) + n.charAt(15 & i);
        return a
    }, i.rstr2b64 = function (t) {
        try {
            this.b64pad
        } catch (e) {
            this.b64pad = ""
        }
        for (var i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = "", a = t.length, s = 0; a > s; s += 3) for (var o = t.charCodeAt(s) << 16 | (a > s + 1 ? t.charCodeAt(s + 1) << 8 : 0) | (a > s + 2 ? t.charCodeAt(s + 2) : 0), r = 0; 4 > r; r++) n += 8 * s + 6 * r > 8 * t.length ? this.b64pad : i.charAt(o >>> 6 * (3 - r) & 63);
        return n
    }, i.rstr2any = function (t, e) {
        var i, n, a, s, o, r = e.length, h = Array(Math.ceil(t.length / 2));
        for (i = 0; i < h.length; i++) h[i] = t.charCodeAt(2 * i) << 8 | t.charCodeAt(2 * i + 1);
        var c = Math.ceil(8 * t.length / (Math.log(e.length) / Math.log(2))), l = Array(c);
        for (n = 0; c > n; n++) {
            for (o = Array(), s = 0, i = 0; i < h.length; i++) s = (s << 16) + h[i], a = Math.floor(s / r), s -= a * r, (o.length > 0 || a > 0) && (o[o.length] = a);
            l[n] = s, h = o
        }
        var u = "";
        for (i = l.length - 1; i >= 0; i--) u += e.charAt(l[i]);
        return u
    }, i.str2rstr_utf8 = function (t) {
        for (var e, i, n = "", a = -1; ++a < t.length;) e = t.charCodeAt(a), i = a + 1 < t.length ? t.charCodeAt(a + 1) : 0, e >= 55296 && 56319 >= e && i >= 56320 && 57343 >= i && (e = 65536 + ((1023 & e) << 10) + (1023 & i), a++), 127 >= e ? n += String.fromCharCode(e) : 2047 >= e ? n += String.fromCharCode(192 | e >>> 6 & 31, 128 | 63 & e) : 65535 >= e ? n += String.fromCharCode(224 | e >>> 12 & 15, 128 | e >>> 6 & 63, 128 | 63 & e) : 2097151 >= e && (n += String.fromCharCode(240 | e >>> 18 & 7, 128 | e >>> 12 & 63, 128 | e >>> 6 & 63, 128 | 63 & e));
        return n
    }, i.str2rstr_utf16le = function (t) {
        for (var e = "", i = 0; i < t.length; i++) e += String.fromCharCode(255 & t.charCodeAt(i), t.charCodeAt(i) >>> 8 & 255);
        return e
    }, i.str2rstr_utf16be = function (t) {
        for (var e = "", i = 0; i < t.length; i++) e += String.fromCharCode(t.charCodeAt(i) >>> 8 & 255, 255 & t.charCodeAt(i));
        return e
    }, i.rstr2binl = function (t) {
        for (var e = Array(t.length >> 2), i = 0; i < e.length; i++) e[i] = 0;
        for (var i = 0; i < 8 * t.length; i += 8) e[i >> 5] |= (255 & t.charCodeAt(i / 8)) << i % 32;
        return e
    }, i.binl2rstr = function (t) {
        for (var e = "", i = 0; i < 32 * t.length; i += 8) e += String.fromCharCode(t[i >> 5] >>> i % 32 & 255);
        return e
    }, i.binl_md5 = function (t, e) {
        t[e >> 5] |= 128 << e % 32, t[(e + 64 >>> 9 << 4) + 14] = e;
        for (var i = 1732584193, n = -271733879, a = -1732584194, s = 271733878, o = 0; o < t.length; o += 16) {
            var r = i, h = n, c = a, l = s;
            i = this.md5_ff(i, n, a, s, t[o + 0], 7, -680876936), s = this.md5_ff(s, i, n, a, t[o + 1], 12, -389564586), a = this.md5_ff(a, s, i, n, t[o + 2], 17, 606105819), n = this.md5_ff(n, a, s, i, t[o + 3], 22, -1044525330), i = this.md5_ff(i, n, a, s, t[o + 4], 7, -176418897), s = this.md5_ff(s, i, n, a, t[o + 5], 12, 1200080426), a = this.md5_ff(a, s, i, n, t[o + 6], 17, -1473231341), n = this.md5_ff(n, a, s, i, t[o + 7], 22, -45705983), i = this.md5_ff(i, n, a, s, t[o + 8], 7, 1770035416), s = this.md5_ff(s, i, n, a, t[o + 9], 12, -1958414417), a = this.md5_ff(a, s, i, n, t[o + 10], 17, -42063), n = this.md5_ff(n, a, s, i, t[o + 11], 22, -1990404162), i = this.md5_ff(i, n, a, s, t[o + 12], 7, 1804603682), s = this.md5_ff(s, i, n, a, t[o + 13], 12, -40341101), a = this.md5_ff(a, s, i, n, t[o + 14], 17, -1502002290), n = this.md5_ff(n, a, s, i, t[o + 15], 22, 1236535329), i = this.md5_gg(i, n, a, s, t[o + 1], 5, -165796510), s = this.md5_gg(s, i, n, a, t[o + 6], 9, -1069501632), a = this.md5_gg(a, s, i, n, t[o + 11], 14, 643717713), n = this.md5_gg(n, a, s, i, t[o + 0], 20, -373897302), i = this.md5_gg(i, n, a, s, t[o + 5], 5, -701558691), s = this.md5_gg(s, i, n, a, t[o + 10], 9, 38016083), a = this.md5_gg(a, s, i, n, t[o + 15], 14, -660478335), n = this.md5_gg(n, a, s, i, t[o + 4], 20, -405537848), i = this.md5_gg(i, n, a, s, t[o + 9], 5, 568446438), s = this.md5_gg(s, i, n, a, t[o + 14], 9, -1019803690), a = this.md5_gg(a, s, i, n, t[o + 3], 14, -187363961), n = this.md5_gg(n, a, s, i, t[o + 8], 20, 1163531501), i = this.md5_gg(i, n, a, s, t[o + 13], 5, -1444681467), s = this.md5_gg(s, i, n, a, t[o + 2], 9, -51403784), a = this.md5_gg(a, s, i, n, t[o + 7], 14, 1735328473), n = this.md5_gg(n, a, s, i, t[o + 12], 20, -1926607734), i = this.md5_hh(i, n, a, s, t[o + 5], 4, -378558), s = this.md5_hh(s, i, n, a, t[o + 8], 11, -2022574463), a = this.md5_hh(a, s, i, n, t[o + 11], 16, 1839030562), n = this.md5_hh(n, a, s, i, t[o + 14], 23, -35309556), i = this.md5_hh(i, n, a, s, t[o + 1], 4, -1530992060), s = this.md5_hh(s, i, n, a, t[o + 4], 11, 1272893353), a = this.md5_hh(a, s, i, n, t[o + 7], 16, -155497632), n = this.md5_hh(n, a, s, i, t[o + 10], 23, -1094730640), i = this.md5_hh(i, n, a, s, t[o + 13], 4, 681279174), s = this.md5_hh(s, i, n, a, t[o + 0], 11, -358537222), a = this.md5_hh(a, s, i, n, t[o + 3], 16, -722521979), n = this.md5_hh(n, a, s, i, t[o + 6], 23, 76029189), i = this.md5_hh(i, n, a, s, t[o + 9], 4, -640364487), s = this.md5_hh(s, i, n, a, t[o + 12], 11, -421815835), a = this.md5_hh(a, s, i, n, t[o + 15], 16, 530742520), n = this.md5_hh(n, a, s, i, t[o + 2], 23, -995338651), i = this.md5_ii(i, n, a, s, t[o + 0], 6, -198630844), s = this.md5_ii(s, i, n, a, t[o + 7], 10, 1126891415), a = this.md5_ii(a, s, i, n, t[o + 14], 15, -1416354905), n = this.md5_ii(n, a, s, i, t[o + 5], 21, -57434055), i = this.md5_ii(i, n, a, s, t[o + 12], 6, 1700485571), s = this.md5_ii(s, i, n, a, t[o + 3], 10, -1894986606), a = this.md5_ii(a, s, i, n, t[o + 10], 15, -1051523), n = this.md5_ii(n, a, s, i, t[o + 1], 21, -2054922799), i = this.md5_ii(i, n, a, s, t[o + 8], 6, 1873313359), s = this.md5_ii(s, i, n, a, t[o + 15], 10, -30611744), a = this.md5_ii(a, s, i, n, t[o + 6], 15, -1560198380), n = this.md5_ii(n, a, s, i, t[o + 13], 21, 1309151649), i = this.md5_ii(i, n, a, s, t[o + 4], 6, -145523070), s = this.md5_ii(s, i, n, a, t[o + 11], 10, -1120210379), a = this.md5_ii(a, s, i, n, t[o + 2], 15, 718787259), n = this.md5_ii(n, a, s, i, t[o + 9], 21, -343485551), i = this.safe_add(i, r), n = this.safe_add(n, h), a = this.safe_add(a, c), s = this.safe_add(s, l)
        }
        return [i, n, a, s]
    }, i.md5_cmn = function (t, e, i, n, a, s) {
        return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(e, t), this.safe_add(n, s)), a), i)
    }, i.md5_ff = function (t, e, i, n, a, s, o) {
        return this.md5_cmn(e & i | ~e & n, t, e, a, s, o)
    }, i.md5_gg = function (t, e, i, n, a, s, o) {
        return this.md5_cmn(e & n | i & ~n, t, e, a, s, o)
    }, i.md5_hh = function (t, e, i, n, a, s, o) {
        return this.md5_cmn(e ^ i ^ n, t, e, a, s, o)
    }, i.md5_ii = function (t, e, i, n, a, s, o) {
        return this.md5_cmn(i ^ (e | ~n), t, e, a, s, o)
    }, i.safe_add = function (t, e) {
        var i = (65535 & t) + (65535 & e), n = (t >> 16) + (e >> 16) + (i >> 16);
        return n << 16 | 65535 & i
    }, i.bit_rol = function (t, e) {
        return t << e | t >>> 32 - e
    }, t
}();
egret.registerClass(md5, "md5");
var NativeApi;
!function (t) {
    function e(t, e) {
        egret.localStorage.setItem(t, e)
    }

    function i(t) {
        return egret.localStorage.getItem(t)
    }

    function n(t) {
        egret.localStorage.removeItem(t)
    }

    function a() {
        egret.localStorage.clear()
    }

    function s() {
    }

    function o() {
    }

    function r(t) {
        window.open("tel:" + t, "_self")
    }

    function h(t) {
        window.open("sms:" + t, "_self")
    }

    function c() {
        return window.location.href
    }

    t.setLocalData = e, t.getLocalData = i, t.deleteLocalData = n, t.clearLocalData = a, t.getMic = s, t.getScreen = o, t.callPhone = r, t.sendMessage = h, t.getCurUrl = c, t.curAngle = +window.orientation
}(NativeApi || (NativeApi = {}));
var NumberUtil = function () {
    function t() {
        this.CLASS_NAME = "NumberUtil"
    }

    var e = (__define, t), i = e.prototype;
    return t.isEqual = function (t, e, i) {
        return void 0 === i && (i = 0), Math.abs(t - e) <= Math.abs(i)
    }, t.min = function (t, e) {
        return isNaN(t) && isNaN(e) || null == t && null == e ? 0 / 0 : null == t || null == e ? null == e ? t : e : isNaN(t) || isNaN(e) ? isNaN(e) ? t : e : Math.min(t, e)
    }, t.max = function (t, e) {
        return isNaN(t) && isNaN(e) || null == t && null == e ? 0 / 0 : null == t || null == e ? null == e ? t : e : isNaN(t) || isNaN(e) ? isNaN(e) ? t : e : Math.max(t, e)
    }, t.randomWithinRange = function (t, e) {
        return t + Math.random() * (e - t)
    }, t.randomIntegerWithinRange = function (t, e) {
        return void 0 === e && (e = 0), Math.floor(Math.random() * (1 + e - t) + t)
    }, t.isEven = function (t) {
        return 0 == (1 & t)
    }, t.isOdd = function (e) {
        return !t.isEven(e)
    }, t.isNumber = function (t) {
        return "number" == typeof t && !isNaN(t)
    }, t.isInteger = function (t) {
        return t % 1 == 0
    }, t["int"] = function (t) {
        return t >> 0
    }, t.isPrime = function (e) {
        if (1 == e || 2 == e) return !0;
        if (t.isEven(e)) return !1;
        for (var i = Math.sqrt(e), n = 3; i >= n; n++) if (e % n == 0) return !1;
        return !0
    }, t.roundDecimalToPlace = function (t, e) {
        void 0 === e && (e = 0);
        var i = Math.pow(10, e);
        return Math.round(t * i) / i
    }, t.loopIndex = function (t, e) {
        return void 0 === e && (e = 0), 0 > t && (t = e + t % e), t >= e ? t % e : t
    }, t.isBetween = function (t, e, i) {
        return !(t < Math.min(e, i) || t > Math.max(e, i))
    }, t.constrain = function (t, e, i) {
        return Math.min(Math.max(t, Math.min(e, i)), Math.max(e, i))
    }, t.createStepsBetween = function (t, e, i) {
        i++;
        for (var n = 0, a = [], s = (e - t) / i; ++n < i;) a.push(n * s + t);
        return a
    }, t.map = function (t, e, i, n, a) {
        return n + (a - n) * ((t - e) / (i - e))
    }, t.getWeightedAverage = function (t, e, i) {
        return t + (e - t) / i
    }, t.format = function (t, e, i, n) {
        void 0 === e && (e = ","), void 0 === i && (i = 0), void 0 === n && (n = "0");
        var a = t % 1, s = Math.floor(t).toString(), o = s.length;
        if (0 != i && i > o) {
            i -= o;
            for (var r = n || "0"; i--;) s = r + s
        }
        if (null != e && s.length > 3) {
            for (var h = Math.floor(s.length / 3), c = s.length % 3, l = s.split(""), u = -1; ++u < h;) l.splice(c + 4 * u, 0, e);
            0 == c && l.shift(), s = l.join("")
        }
        return 0 != a && (s += a.toString().substr(1)), s
    }, t.formatCurrency = function (e, i, n) {
        void 0 === i && (i = !0), void 0 === n && (n = ",");
        var a = e % 1, s = t.format(Math.floor(e), n);
        return (0 != a || i) && (s += a.toFixed(2).substr(1)), s
    }, t.getOrdinalSuffix = function (t) {
        if (void 0 === t && (t = 0), t >= 10 && 20 >= t) return "th";
        if (0 == t) return "";
        switch (t % 10) {
            case 3:
                return "rd";
            case 2:
                return "nd";
            case 1:
                return "st";
            default:
                return "th"
        }
    }, t.getShort = function (t) {
        var e, i = "";
        return t > 99999999 ? (e = Math.round(t / 1e7), i = e / 10 + "亿") : t > 9999 ? (e = Math.round(t / 1e3), i = e / 10 + "万") : i = "" + t, i
    }, t.addLeadingZero = function (t) {
        return 10 > t ? "0" + t : t.toString()
    }, t.spell = function (t) {
        if (void 0 === t && (t = 0), t > 999999999) throw new Error("值太大越界了.");
        if (0 == t) return "Zero";
        var e = ["", " Thousand", " Million", " Billion"],
            i = ["Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"],
            n = ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Sever", "Eight", "Nine"],
            a = ["Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"],
            s = t.toString().length, o = 0, r = 0, h = Math.ceil(s / 3), c = s - 3 * h, l = "", u = "",
            d = function (t) {
                var e = "";
                return 3 == t.length && "000" != t.substr(0, 3) && ("0" != t.substr(0, 1) && (e += n[t.substr(0, 1)] + " Hundred", "00" != t.substr(1, 2) && (e += " And ")), t = t.substring(1)), 2 == t.length && ("0" == t.substr(0, 1) ? t = t.substring(1) : "1" == t.substr(0, 1) ? e += a[t.substr(1, 2)] : (e += i[t.substr(0, 1)], "0" != t.substr(1, 1) && (e += "-"), t = t.substring(1))), 1 == t.length && "0" != t.substr(0, 1) && (e += n[t.substr(0, 1)]), e
            };
        for (o = c; s > o; o += 3) {
            ++r, u = o >= 0 ? t.toString().substring(o, o + 3) : t.toString().substring(0, c + 3);
            var g = d(u);
            "" != g && ("" != l && (l += ","), l += d(u) + e[h - r])
        }
        return l
    }, t.convertNum = function (t) {
        var e = t.toString();
        if (-1 != e.toLocaleUpperCase().indexOf("E")) {
            var i = new RegExp("^((\\d+.?\\d+)[Ee]{1}(\\d+))$", "ig"), n = i.exec(e), a = 0, s = 0;
            if (null != n && (a = parseFloat(n[2]), s = parseFloat(n[3])), 0 != a && 0 != s) {
                var o = Math.pow(10, s);
                a *= o
            }
            return a
        }
        return parseFloat(t)
    }, i.toString = function () {
        return this.CLASS_NAME
    }, t
}();
egret.registerClass(NumberUtil, "NumberUtil");
var ObjectUtil = function () {
    function t() {
        this.CLASS_NAME = "ObjectUtil"
    }

    var e = (__define, t), i = e.prototype;
    return t.contains = function (t, e) {
        for (var i in t) if (t.hasOwnProperty(i) && t[i] == e) return !0;
        return !1
    }, t.clone = function (e, i) {
        return void 0 === i && (i = !1), e instanceof Array ? t.arrayClone(e, i) : "function" == typeof e ? t.functionClone(e, i) : e instanceof Date ? t.dateClone(e, i) : e instanceof Object ? t.objectClone(e, i) : e
    }, t.propClone = function (e) {
        return e instanceof Array ? t.arrayPrototypeClone(e) : "function" == typeof e ? t.functionPrototypeClone(e) : e instanceof Date ? t.datePrototypeClone(e) : e instanceof Object ? t.objectPrototypeClone(e) : e
    }, t.objectClone = function (t, e) {
        void 0 === e && (e = !1);
        var i = {};
        for (var n in t) i[n] = e ? arguments.callee(t[n]) : t[n];
        return i
    }, t.objectPrototypeClone = function (t) {
        var e = function () {
        };
        e.prototype = t;
        var i = new e;
        return i
    }, t.arrayClone = function (t, e) {
        void 0 === e && (e = !1);
        for (var i = [], n = t.length; n--;) i[n] = e ? arguments.callee(t[n]) : t[n];
        return i
    }, t.arrayPrototypeClone = function (t) {
        Array.prototype;
        Array.prototype = t;
        var e = [];
        return Array.prototype = t, e
    }, t.functionClone = function (t, e) {
        void 0 === e && (e = !1);
        var i = Function("return " + t)();
        for (var n in t) i[n] = e ? arguments.callee(t[n]) : t[n];
        return i
    }, t.functionPrototypeClone = function (t) {
        Function.prototype;
        Function.prototype = t;
        var e = new Function("return " + this)();
        return Function.prototype = t, e
    }, t.dateClone = function (t, e) {
        void 0 === e && (e = !1);
        var i = new Date;
        i.setTime(t.getTime());
        for (var n in t) i[n] = e ? arguments.callee(t[n]) : t[n];
        return i
    }, t.datePrototypeClone = function (t) {
        var e = Date.prototype;
        Date.prototype = t;
        var i = new Date;
        return i.setTime(t.getTime()), Date.prototype = e, i
    }, t.getKeys = function (t) {
        var e = [];
        for (var i in t) t.hasOwnProperty(i) && e.push(i);
        return e
    }, t.isMethod = function (t, e) {
        return t.hasOwnProperty(e) ? t[e] instanceof Function : !1
    }, t.isUndefined = function (t) {
        return this.isNull(t) || void 0 === t || "undefined" == typeof t
    }, t.isNull = function (t) {
        return null === t || "null" == typeof t || 0 == t
    }, t.isEmpty = function (t) {
        if (void 0 == t) return !0;
        if ("number" == typeof t) return isNaN(t) || 0 == t;
        if (t instanceof Array || "string" == typeof t) return 0 == t.length;
        if (t instanceof Object) {
            for (var e in t) if (t.hasOwnProperty(e)) return !1;
            return !0
        }
        return !1
    }, i.toString = function () {
        return this.CLASS_NAME
    }, t
}();
egret.registerClass(ObjectUtil, "ObjectUtil");
var RegUtils;
!function (t) {
    function e(t) {
        var e = /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/;
        return e.test(t) ? !0 : (alert("您输入的Email地址格式不正确！"), !1)
    }

    function i(t) {
        if (s(t)) return !1;
        var e = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g;
        return e.test(t) && Number(RegExp.$1) < 256 && Number(RegExp.$2) < 256 && Number(RegExp.$3) < 256 && Number(RegExp.$4) < 256 ? !0 : !1
    }

    function n(t) {
        var e = "/^1[3|4|5|7|8][0-9]d{4,8}$/", i = new RegExp(e);
        return i.test(t) ? !0 : !1
    }

    function a(t) {
        var e = /^[0][1-9]{2,3}-[0-9]{5,10}$/, i = /^[1-9]{1}[0-9]{5,8}$/, n = "您输入的电话号码不正确!";
        return t.length > 9 ? e.test(t) ? !0 : (alert(n), !1) : i.test(t) ? !0 : (alert(n), !1)
    }

    function s(t) {
        if ("" == t) return !0;
        var e = "^[ ]+$", i = new RegExp(e);
        return i.test(t)
    }

    function o(t) {
        var e = /^[-]{0,1}[0-9]{1,}$/;
        return e.test(t)
    }

    function r(t) {
        var e = "^[0-9]+$", i = new RegExp(e);
        return -1 != t.search(i) ? !0 : !1
    }

    function h(t) {
        var e = "^[0-9]+[.][0-9]{0,3}$", i = new RegExp(e);
        return i.test(t) ? !0 : !1
    }

    function c(t, e) {
        var i = " ", n = -1;
        if (0 == e || 1 == e) {
            for (; " " == i;) ++n, i = t.substr(n, 1);
            t = t.substring(n)
        }
        if (0 == e || 2 == e) {
            for (i = " ", n = t.length; " " == i;) --n, i = t.substr(n, 1);
            t = t.substring(0, n + 1)
        }
        return t
    }

    t.checkEmail = e, t.isIP = i, t.checkMobile = n, t.checkPhone = a, t.isNull = s, t.isInteger = o, t.isNumber = r, t.isMoney = h, t.cTrim = c
}(RegUtils || (RegUtils = {}));
var TipsManager;
!function (t) {
    function e(t, e, i) {
        void 0 === e && (e = ""), void 0 === i && (i = 0), null == this._dict && (this._dict = []), t.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.showTips, this), t.addEventListener(egret.TouchEvent.TOUCH_END, this.removeTips, this), t.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.removeTips, this), null == this._dict[t.hashCode] && (this._dict[t.hashCode] = [], this._dict[t.hashCode].descStr = e, this._dict[t.hashCode].effectType = i)
    }

    function i(t) {
        var e = t.currentTarget, i = "", n = 0;
        if (null == this._tips) {
            null != this._dict[e.hashCode] && (i = this._dict[e.hashCode].descStr, n = this._dict[e.hashCode].effectType), this._tips = new TipsPanel(this._dict[e.hashCode].descStr), GameLayerManager.gameLayer().effectLayer.contains(this._tips) || GameLayerManager.gameLayer().effectLayer.addChild(this._tips);
            var a = e.parent.localToGlobal(e.x, e.y);
            switch (a.x = a.x + e.width / 2, a.y = a.y - this._tips.getHeight(), a.x + this._tips.getWidth() > GameConfig.curWidth() ? a.x = GameConfig.curWidth() - this._tips.getWidth() : a.x < 0 && (a.x = 0), a.y + this._tips.getHeight() > GameConfig.curHeight() ? a.y = GameConfig.curHeight() - this._tips.getHeight() : a.y < 0 && (a.y = 0), this._tips.x = a.x, this._tips.y = a.y, n) {
                case 0:
                    this._tips.alpha = 0, egret.Tween.get(this._tips).to({alpha: 1}, 300);
                    break;
                case 1:
                    this._tips.alpha = 0, this._tips.y += this._tips.getHeight(), egret.Tween.get(this._tips).to({
                        alpha: 1,
                        y: this._tips.y - this._tips.getHeight()
                    }, 500, egret.Ease.backOut);
                    break;
                case 2:
                    this._tips.alpha = 0, this._tips.x -= this._tips.getWidth(), egret.Tween.get(this._tips).to({
                        alpha: 1,
                        x: this._tips.x + this._tips.getWidth()
                    }, 500, egret.Ease.backOut);
                    break;
                case 3:
                    this._tips.alpha = 0, this._tips.x += this._tips.getWidth(), egret.Tween.get(this._tips).to({
                        alpha: 1,
                        x: this._tips.x - this._tips.getWidth()
                    }, 500, egret.Ease.backOut)
            }
        }
    }

    function n(t) {
        var e = (t.currentTarget, this);
        if (null != e._tips) {
            var i = function () {
                GameLayerManager.gameLayer().effectLayer.contains(e._tips) && (GameLayerManager.gameLayer().effectLayer.removeChild(e._tips), e._tips = null)
            };
            egret.Tween.get(e._tips).to({alpha: 0}, 300).call(i, e)
        }
    }

    t.addTips = e, t.showTips = i, t.removeTips = n
}(TipsManager || (TipsManager = {}));
var TipsPanel = function (t) {
    function e(e) {
        void 0 === e && (e = ""), t.call(this), this.descStr = "", this.descStr = e, this.initUI()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.initUI = function () {
        this.bg = new egret.Bitmap, this.bg.texture = RES.getRes("money_bg"), this.addChild(this.bg), this.bg.touchEnabled = !0, this.bg.alpha = .6, this.descTF = new egret.TextField, this.addChild(this.descTF), this.descTF.textColor = 16777215, this.descTF.size = 20, this.descTF.x = 5, this.descTF.textAlign = "center", this.descTF.text = this.descStr;
        var t = new egret.Rectangle(13, 13, 25, 6);
        this.bg.scale9Grid = t, this.bg.width = this.descTF.width + 10, this.bg.height = this.descTF.height + 10, this.descTF.y = this.bg.height / 2 - this.descTF.height / 2 + 2
    }, n.getHeight = function () {
        return this.bg.height
    }, n.getWidth = function () {
        return this.bg.width
    }, e
}(eui.Component);
egret.registerClass(TipsPanel, "TipsPanel");
var UrlUtils = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.decode = function (t) {
        var e, i = [];
        if (null != t) {
            var n = null;
            for (n in t) i.push(n + "=" + t[n]);
            e = i.join("&")
        }
        return e
    }, t
}();
egret.registerClass(UrlUtils, "UrlUtils");
var BitmapBlink = function (t) {
    function e(e, i, n) {
        void 0 === n && (n = !0), t.call(this), this._target = e, this._time = i, n && this.start()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.start = function () {
        this._currTime = egret.getTimer(), this._target.addEventListener(egret.Event.ENTER_FRAME, this.runDown, this)
    }, n.runDown = function (t) {
        this._target.alpha -= .045, this.checkOver() || this._target.alpha <= .6 && (this._target.removeEventListener(egret.Event.ENTER_FRAME, this.runDown, this), this._target.addEventListener(egret.Event.ENTER_FRAME, this.runUp, this))
    }, n.runUp = function (t) {
        this._target.alpha += .045, this.checkOver() || this._target.alpha >= 1 && (this._target.removeEventListener(egret.Event.ENTER_FRAME, this.runUp, this), this._target.addEventListener(egret.Event.ENTER_FRAME, this.runDown, this))
    }, n.checkOver = function () {
        var t = egret.getTimer();
        return t - this._currTime >= this._time ? (this.destroy(), !0) : !1
    }, n.destroy = function () {
        this._target.alpha = 1, this._target.removeEventListener(egret.Event.ENTER_FRAME, this.runDown, this), this._target.removeEventListener(egret.Event.ENTER_FRAME, this.runUp, this), this.dispatchEventWith(egret.Event.COMPLETE, !1, this._target), this._target = null
    }, e
}(egret.EventDispatcher);
egret.registerClass(BitmapBlink, "BitmapBlink");
var DataConvertUtils = function () {
    function t() {
    }

    var e = (__define, t);
    e.prototype;
    return t.getMahData = function (t) {
        var e = {};
        return e.type = Math.floor(t / 9) + 1, e.number = t % 9 + 1, e
    }, t.getMahjongValue = function (t) {
        var e = 9 * (t.type - 1) + (t.number - 1);
        return e
    }, t
}();
egret.registerClass(DataConvertUtils, "DataConvertUtils");
var TipsUtils;
!function (t) {
    function e(t, e) {
        void 0 === t && (t = ""), void 0 === e && (e = !1);
        var i = new egret.TextField;
        i.size = 24, i.y = GameConfig.curHeight() / 2, e ? i.textColor = GameConfig.TextColors.red : i.textColor = GameConfig.TextColors.green, i.alpha = 0, i.text = t, i.strokeColor = 0, i.x = GameConfig.curWidth() / 2 - i.width / 2, i.stroke = 2, i.bold = !0, i.textAlign = egret.HorizontalAlign.CENTER, i.fontFamily = GameConfig.FontFamily, i.touchEnabled = !1, GameLayerManager.gameLayer().loadLayer.contains(i) || GameLayerManager.gameLayer().loadLayer.addChild(i);
        var n = function () {
            GameLayerManager.gameLayer().loadLayer.contains(i) && (GameLayerManager.gameLayer().loadLayer.removeChild(i), i = null)
        }, a = function () {
            egret.Tween.get(i).to({alpha: 0}, 500).call(n, this)
        };
        i.visible = !0, egret.Tween.get(i).to({y: i.y - 120, alpha: 1}, 800, egret.Ease.backOut).call(a, this)
    }

    function i(t, e, i) {
        void 0 === t && (t = ""), void 0 === e && (e = !1), void 0 === i && (i = !0);
        var n = new egret.TextField;
        n.size = 24, n.y = GameConfig.curHeight() / 2, e ? n.textColor = GameConfig.TextColors.red : n.textColor = GameConfig.TextColors.green, n.alpha = 0, n.text = t, n.strokeColor = 0, i ? n.x = -n.width : n.x = GameConfig.curWidth(), n.stroke = 2, n.bold = !0, n.textAlign = egret.HorizontalAlign.CENTER, n.fontFamily = GameConfig.FontFamily, n.touchEnabled = !1, GameLayerManager.gameLayer().loadLayer.contains(n) || GameLayerManager.gameLayer().loadLayer.addChild(n), i ? egret.Tween.get(n).to({
            x: GameConfig.curWidth() / 2 - n.width / 2 - 50,
            alpha: 1
        }, 300, egret.Ease.sineInOut) : egret.Tween.get(n).to({
            x: GameConfig.curWidth() / 2 - n.width / 2 + 50,
            alpha: 1
        }, 300, egret.Ease.sineInOut), egret.setTimeout(function () {
            i ? egret.Tween.get(n).to({x: n.x + 100}, 500) : egret.Tween.get(n).to({x: n.x - 100}, 500)
        }, this, 300), egret.setTimeout(function () {
            i ? egret.Tween.get(n).to({x: GameConfig.curWidth()}, 300, egret.Ease.sineIn) : egret.Tween.get(n).to({x: -n.width}, 300, egret.Ease.sineIn)
        }, this, 800), egret.setTimeout(function () {
            GameLayerManager.gameLayer().loadLayer.contains(n) && (GameLayerManager.gameLayer().loadLayer.removeChild(n), n = null)
        }, this, 1100)
    }

    function n(t, e) {
        void 0 === t && (t = ""), void 0 === e && (e = !1);
        var i = new egret.TextField;
        i.size = 24, i.y = GameConfig.curHeight() / 2, e ? i.textColor = GameConfig.TextColors.red : i.textColor = GameConfig.TextColors.green, i.alpha = 0, i.text = t, i.strokeColor = 0, i.x = GameConfig.curWidth() / 2, i.stroke = 2, i.bold = !0, i.textAlign = egret.HorizontalAlign.CENTER, i.fontFamily = GameConfig.FontFamily, i.touchEnabled = !1, GameLayerManager.gameLayer().loadLayer.contains(i) || GameLayerManager.gameLayer().loadLayer.addChild(i), i.anchorOffsetX = i.width / 2, i.anchorOffsetY = i.height / 2, i.scaleX = 0, i.scaleY = 0;
        var n = function () {
            GameLayerManager.gameLayer().loadLayer.contains(i) && (GameLayerManager.gameLayer().loadLayer.removeChild(i), i = null)
        };
        egret.Tween.get(i).to({scaleX: 1, scaleY: 1, alpha: 1}, 200), egret.setTimeout(function () {
            egret.Tween.get(i).to({alpha: 0}, 500).call(n, this)
        }, this, 1e3)
    }

    function a(t, e) {
        void 0 === t && (t = ""), void 0 === e && (e = !1);
        var i = new egret.TextField;
        i.size = 24, i.y = GameConfig.curHeight() / 2, e ? i.textColor = GameConfig.TextColors.red : i.textColor = GameConfig.TextColors.green, i.alpha = 0, i.text = t, i.strokeColor = 0, i.x = GameConfig.curWidth() / 2, i.stroke = 2, i.bold = !0, i.textAlign = egret.HorizontalAlign.CENTER, i.fontFamily = GameConfig.FontFamily, i.touchEnabled = !1, GameLayerManager.gameLayer().loadLayer.contains(i) || GameLayerManager.gameLayer().loadLayer.addChild(i), i.anchorOffsetX = i.width / 2, i.anchorOffsetY = i.height / 2, i.scaleX = 4, i.scaleY = 4;
        var n = function () {
            GameLayerManager.gameLayer().loadLayer.contains(i) && (GameLayerManager.gameLayer().loadLayer.removeChild(i), i = null)
        };
        egret.Tween.get(i).to({scaleX: 1, scaleY: 1, alpha: 1}, 200), egret.setTimeout(function () {
            egret.Tween.get(i).to({alpha: 0}, 500).call(n, this)
        }, this, 1e3)
    }

    function s() {
        for (egret.Tween.removeTweens(this); GameLayerManager.gameLayer().loadLayer.numChildren;) {
            var t = GameLayerManager.gameLayer().loadLayer.getChildAt(GameLayerManager.gameLayer().loadLayer.numChildren - 1);
            GameLayerManager.gameLayer().loadLayer.contains(t) && (GameLayerManager.gameLayer().loadLayer.removeChild(t), t = null)
        }
    }

    t.showTipsDownToUp = e, t.showTipsLeftOrRight = i, t.showTipsFromCenter = n, t.showTipsBigToSmall = a, t.clearEffectAll = s
}(TipsUtils || (TipsUtils = {}));
var WaitPanel = function (t) {
    function e(e) {
        void 0 === e && (e = 1), t.call(this), this.bg = new egret.Sprite, this.w = 0, this.h = 0, this.createView()
    }

    __extends(e, t);
    var i = (__define, e), n = i.prototype;
    return n.createView = function () {
        this.w = egret.MainContext.instance.stage.stageWidth, this.h = egret.MainContext.instance.stage.stageHeight, this.bg.graphics.beginFill(0, .5), this.bg.graphics.drawRect(0, 0, this.w, this.h), this.bg.graphics.endFill(), this.bg.width = this.w, this.bg.height = this.h, this.addChild(this.bg), this.touchEnabled = !0, this.waitImg = new egret.Bitmap, this.waitImg.texture = RES.getRes("loadingCircle"), this.addChild(this.waitImg), this.waitImg.x = this.w / 2, this.waitImg.y = this.h / 2, this.waitImg.anchorOffsetX = this.waitImg.width / 2, this.waitImg.anchorOffsetY = this.waitImg.height / 2, EffectUtils.rotationEffect(this.waitImg, 1e3)
    }, e
}(egret.Sprite);
egret.registerClass(WaitPanel, "WaitPanel");